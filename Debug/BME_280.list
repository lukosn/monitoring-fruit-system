
BME_280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011764  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c10  080118f8  080118f8  000218f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012508  08012508  000301ec  2**0
                  CONTENTS
  4 .ARM          00000000  08012508  08012508  000301ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012508  08012508  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012508  08012508  00022508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801250c  0801250c  0002250c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08012510  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301ec  2**0
                  CONTENTS
 10 .bss          0000278c  200001f0  200001f0  000301f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000297c  2000297c  000301f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000172bc  00000000  00000000  0003025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e5c  00000000  00000000  0004751b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001380  00000000  00000000  0004b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ef5  00000000  00000000  0004c6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022172  00000000  00000000  0004d5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ebec  00000000  00000000  0006f75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bb6d6  00000000  00000000  0008e34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000065d4  00000000  00000000  00149a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0014fff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080118dc 	.word	0x080118dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	080118dc 	.word	0x080118dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <BME_280_init>:
struct bme280_data data;
float temp, pres, hum;


int8_t BME_280_init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	int8_t result = BME280_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	71fb      	strb	r3, [r7, #7]
	uint8_t settings;

	bme.dev_id = (BME280_I2C_ADDR_PRIM<<1);
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <BME_280_init+0xbc>)
 8000d00:	22ec      	movs	r2, #236	; 0xec
 8000d02:	705a      	strb	r2, [r3, #1]
	bme.intf = BME280_I2C_INTF;
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <BME_280_init+0xbc>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	709a      	strb	r2, [r3, #2]
	bme.read = i2c_read;
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <BME_280_init+0xbc>)
 8000d0c:	4a29      	ldr	r2, [pc, #164]	; (8000db4 <BME_280_init+0xc0>)
 8000d0e:	605a      	str	r2, [r3, #4]
	bme.write = i2c_write;
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <BME_280_init+0xbc>)
 8000d12:	4a29      	ldr	r2, [pc, #164]	; (8000db8 <BME_280_init+0xc4>)
 8000d14:	609a      	str	r2, [r3, #8]
	bme.delay_ms = delay_ms;
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <BME_280_init+0xbc>)
 8000d18:	4a28      	ldr	r2, [pc, #160]	; (8000dbc <BME_280_init+0xc8>)
 8000d1a:	60da      	str	r2, [r3, #12]

	result = bme280_init(&bme);
 8000d1c:	4824      	ldr	r0, [pc, #144]	; (8000db0 <BME_280_init+0xbc>)
 8000d1e:	f000 f90f 	bl	8000f40 <bme280_init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]

	if(result != BME280_OK)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <BME_280_init+0x40>
	{
		return -1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	e038      	b.n	8000da6 <BME_280_init+0xb2>
	}

	bme.settings.filter = BME280_FILTER_COEFF_16;
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <BME_280_init+0xbc>)
 8000d36:	2204      	movs	r2, #4
 8000d38:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	bme.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <BME_280_init+0xbc>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	bme.settings.osr_t = BME280_OVERSAMPLING_2X;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <BME_280_init+0xbc>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	bme.settings.osr_p = BME280_OVERSAMPLING_16X;
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <BME_280_init+0xbc>)
 8000d4e:	2205      	movs	r2, #5
 8000d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	bme.settings.osr_h = BME280_OVERSAMPLING_1X;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <BME_280_init+0xbc>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a



	if(result == BME280_OK)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d11e      	bne.n	8000da2 <BME_280_init+0xae>
	{
		settings = 	BME280_OSR_PRESS_SEL;
 8000d64:	2301      	movs	r3, #1
 8000d66:	71bb      	strb	r3, [r7, #6]
		settings |= BME280_OSR_TEMP_SEL;
 8000d68:	79bb      	ldrb	r3, [r7, #6]
 8000d6a:	f043 0302 	orr.w	r3, r3, #2
 8000d6e:	71bb      	strb	r3, [r7, #6]
		settings |= BME280_OSR_HUM_SEL;
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	71bb      	strb	r3, [r7, #6]
		settings |= BME280_STANDBY_SEL;
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	71bb      	strb	r3, [r7, #6]
		settings |= BME280_FILTER_SEL;
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	71bb      	strb	r3, [r7, #6]

		result = bme280_set_sensor_settings(settings, &bme);
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	4909      	ldr	r1, [pc, #36]	; (8000db0 <BME_280_init+0xbc>)
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 f9cb 	bl	8001128 <bme280_set_sensor_settings>
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
		result = bme280_set_sensor_mode(BME280_NORMAL_MODE, &bme);
 8000d96:	4906      	ldr	r1, [pc, #24]	; (8000db0 <BME_280_init+0xbc>)
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 fa1a 	bl	80011d2 <bme280_set_sensor_mode>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	}

	return result;
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000020c 	.word	0x2000020c
 8000db4:	08000eb1 	.word	0x08000eb1
 8000db8:	08000ef9 	.word	0x08000ef9
 8000dbc:	08000e99 	.word	0x08000e99

08000dc0 <BME280_read_print_data>:

int8_t BME280_read_print_data(void)
{
 8000dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af04      	add	r7, sp, #16
	int8_t result;

		bme.delay_ms(100);
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <BME280_read_print_data+0xc0>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	2064      	movs	r0, #100	; 0x64
 8000dce:	4798      	blx	r3
		result = bme280_get_sensor_data(BME280_ALL, &data, &bme);
 8000dd0:	4a2b      	ldr	r2, [pc, #172]	; (8000e80 <BME280_read_print_data+0xc0>)
 8000dd2:	492c      	ldr	r1, [pc, #176]	; (8000e84 <BME280_read_print_data+0xc4>)
 8000dd4:	2007      	movs	r0, #7
 8000dd6:	f000 fa9e 	bl	8001316 <bme280_get_sensor_data>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]

		temp = data.temperature;
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <BME280_read_print_data+0xc4>)
 8000de0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000de4:	4610      	mov	r0, r2
 8000de6:	4619      	mov	r1, r3
 8000de8:	f7ff fefe 	bl	8000be8 <__aeabi_d2f>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <BME280_read_print_data+0xc8>)
 8000df0:	6013      	str	r3, [r2, #0]
		pres = data.pressure*0.01;
 8000df2:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <BME280_read_print_data+0xc4>)
 8000df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df8:	a31f      	add	r3, pc, #124	; (adr r3, 8000e78 <BME280_read_print_data+0xb8>)
 8000dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfe:	f7ff fbfb 	bl	80005f8 <__aeabi_dmul>
 8000e02:	4602      	mov	r2, r0
 8000e04:	460b      	mov	r3, r1
 8000e06:	4610      	mov	r0, r2
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f7ff feed 	bl	8000be8 <__aeabi_d2f>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <BME280_read_print_data+0xcc>)
 8000e12:	6013      	str	r3, [r2, #0]
		hum = data.humidity;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <BME280_read_print_data+0xc4>)
 8000e16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f7ff fee3 	bl	8000be8 <__aeabi_d2f>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a1a      	ldr	r2, [pc, #104]	; (8000e90 <BME280_read_print_data+0xd0>)
 8000e26:	6013      	str	r3, [r2, #0]

		printf("Temperature: %0.2f C, Pressure:  %0.2f hPa, Humidity:  %0.2f %%\r\n",temp, pres, hum);
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <BME280_read_print_data+0xc8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb8b 	bl	8000548 <__aeabi_f2d>
 8000e32:	4680      	mov	r8, r0
 8000e34:	4689      	mov	r9, r1
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <BME280_read_print_data+0xcc>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fb84 	bl	8000548 <__aeabi_f2d>
 8000e40:	4604      	mov	r4, r0
 8000e42:	460d      	mov	r5, r1
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <BME280_read_print_data+0xd0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fb7d 	bl	8000548 <__aeabi_f2d>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000e56:	e9cd 4500 	strd	r4, r5, [sp]
 8000e5a:	4642      	mov	r2, r8
 8000e5c:	464b      	mov	r3, r9
 8000e5e:	480d      	ldr	r0, [pc, #52]	; (8000e94 <BME280_read_print_data+0xd4>)
 8000e60:	f00c fc6e 	bl	800d740 <iprintf>

	return result;
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000e72:	bf00      	nop
 8000e74:	f3af 8000 	nop.w
 8000e78:	47ae147b 	.word	0x47ae147b
 8000e7c:	3f847ae1 	.word	0x3f847ae1
 8000e80:	2000020c 	.word	0x2000020c
 8000e84:	20000250 	.word	0x20000250
 8000e88:	20000268 	.word	0x20000268
 8000e8c:	2000026c 	.word	0x2000026c
 8000e90:	20000270 	.word	0x20000270
 8000e94:	080118f8 	.word	0x080118f8

08000e98 <delay_ms>:



void delay_ms(uint32_t period)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	HAL_Delay(period);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f003 f95f 	bl	8004164 <HAL_Delay>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <i2c_read>:

int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t size)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af04      	add	r7, sp, #16
 8000eb6:	603a      	str	r2, [r7, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	71bb      	strb	r3, [r7, #6]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	80bb      	strh	r3, [r7, #4]
	int8_t rslt = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c2, dev_id, reg_addr, 1, reg_data, size, 100);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	b299      	uxth	r1, r3
 8000ece:	79bb      	ldrb	r3, [r7, #6]
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	2364      	movs	r3, #100	; 0x64
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	88bb      	ldrh	r3, [r7, #4]
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <i2c_read+0x44>)
 8000ee2:	f003 feb7 	bl	8004c54 <HAL_I2C_Mem_Read>
	return rslt;
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200002cc 	.word	0x200002cc

08000ef8 <i2c_write>:

int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t size)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af04      	add	r7, sp, #16
 8000efe:	603a      	str	r2, [r7, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	460b      	mov	r3, r1
 8000f08:	71bb      	strb	r3, [r7, #6]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	80bb      	strh	r3, [r7, #4]
	int8_t rslt = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, dev_id, reg_addr, 1, reg_data, size, 100);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	b299      	uxth	r1, r3
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	2364      	movs	r3, #100	; 0x64
 8000f1c:	9302      	str	r3, [sp, #8]
 8000f1e:	88bb      	ldrh	r3, [r7, #4]
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <i2c_write+0x44>)
 8000f2a:	f003 fd7f 	bl	8004a2c <HAL_I2C_Mem_Write>
	return rslt;
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200002cc 	.word	0x200002cc

08000f40 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 fa19 	bl	8002388 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d133      	bne.n	8000fca <bme280_init+0x8a>
    {
        while (try_count)
 8000f62:	e028      	b.n	8000fb6 <bme280_init+0x76>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f64:	f107 010d 	add.w	r1, r7, #13
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	20d0      	movs	r0, #208	; 0xd0
 8000f6e:	f000 f832 	bl	8000fd6 <bme280_get_regs>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d114      	bne.n	8000fa8 <bme280_init+0x68>
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b60      	cmp	r3, #96	; 0x60
 8000f82:	d111      	bne.n	8000fa8 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8000f84:	7b7a      	ldrb	r2, [r7, #13]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f978 	bl	8001280 <bme280_soft_reset>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d110      	bne.n	8000fbe <bme280_init+0x7e>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 f867 	bl	8002070 <get_calib_data>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8000fa6:	e00a      	b.n	8000fbe <bme280_init+0x7e>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2001      	movs	r0, #1
 8000fae:	4798      	blx	r3
            --try_count;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1d3      	bne.n	8000f64 <bme280_init+0x24>
 8000fbc:	e000      	b.n	8000fc0 <bme280_init+0x80>
                break;
 8000fbe:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <bme280_init+0x8a>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8000fc6:	23fe      	movs	r3, #254	; 0xfe
 8000fc8:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 f9cd 	bl	8002388 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d117      	bne.n	800102a <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d003      	beq.n	800100a <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685c      	ldr	r4, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7858      	ldrb	r0, [r3, #1]
 8001012:	89bb      	ldrh	r3, [r7, #12]
 8001014:	7bf9      	ldrb	r1, [r7, #15]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	47a0      	blx	r4
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 8001026:	23fc      	movs	r3, #252	; 0xfc
 8001028:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 800102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b08d      	sub	sp, #52	; 0x34
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d901      	bls.n	8001050 <bme280_set_regs+0x1a>
    {
        len = 10;
 800104c:	230a      	movs	r3, #10
 800104e:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f001 f999 	bl	8002388 <null_ptr_check>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 800105c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001060:	2b00      	cmp	r3, #0
 8001062:	d156      	bne.n	8001112 <bme280_set_regs+0xdc>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d053      	beq.n	8001112 <bme280_set_regs+0xdc>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d050      	beq.n	8001112 <bme280_set_regs+0xdc>
    {
        if (len != 0)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d049      	beq.n	800110a <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d01a      	beq.n	80010ba <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001084:	2300      	movs	r3, #0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800108a:	e011      	b.n	80010b0 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800108c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	440b      	add	r3, r1
 800109e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3e8      	bcc.n	800108c <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d90d      	bls.n	80010dc <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f107 0114 	add.w	r1, r7, #20
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f001 f816 	bl	80020fa <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3b01      	subs	r3, #1
 80010d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010da:	e001      	b.n	80010e0 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689c      	ldr	r4, [r3, #8]
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	7858      	ldrb	r0, [r3, #1]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	7819      	ldrb	r1, [r3, #0]
 80010ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ee:	f107 0214 	add.w	r2, r7, #20
 80010f2:	47a0      	blx	r4
 80010f4:	4603      	mov	r3, r0
 80010f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 80010fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00b      	beq.n	800111a <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 8001102:	23fc      	movs	r3, #252	; 0xfc
 8001104:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8001108:	e007      	b.n	800111a <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 800110a:	23fd      	movs	r3, #253	; 0xfd
 800110c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8001110:	e003      	b.n	800111a <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001112:	23ff      	movs	r3, #255	; 0xff
 8001114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001118:	e000      	b.n	800111c <bme280_set_regs+0xe6>
        if (len != 0)
 800111a:	bf00      	nop
    }

    return rslt;
 800111c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001120:	4618      	mov	r0, r3
 8001122:	3734      	adds	r7, #52	; 0x34
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}

08001128 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001134:	6838      	ldr	r0, [r7, #0]
 8001136:	f001 f927 	bl	8002388 <null_ptr_check>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d13f      	bne.n	80011c6 <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001146:	f107 030e 	add.w	r3, r7, #14
 800114a:	6839      	ldr	r1, [r7, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f874 	bl	800123a <bme280_get_sensor_mode>
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d107      	bne.n	800116e <bme280_set_sensor_settings+0x46>
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8001164:	6838      	ldr	r0, [r7, #0]
 8001166:	f000 fb74 	bl	8001852 <put_device_to_sleep>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 800116e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d127      	bne.n	80011c6 <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4619      	mov	r1, r3
 800117a:	2007      	movs	r0, #7
 800117c:	f001 f8e8 	bl	8002350 <are_settings_changed>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d009      	beq.n	800119a <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f9b0 	bl	80014f6 <set_osr_settings>
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 800119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d111      	bne.n	80011c6 <bme280_set_sensor_settings+0x9e>
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4619      	mov	r1, r3
 80011a6:	2018      	movs	r0, #24
 80011a8:	f001 f8d2 	bl	8002350 <are_settings_changed>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d009      	beq.n	80011c6 <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 fa37 	bl	8001630 <set_filter_standby_settings>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b084      	sub	sp, #16
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	6039      	str	r1, [r7, #0]
 80011dc:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80011de:	6838      	ldr	r0, [r7, #0]
 80011e0:	f001 f8d2 	bl	8002388 <null_ptr_check>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d11e      	bne.n	800122e <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011f0:	f107 030e 	add.w	r3, r7, #14
 80011f4:	6839      	ldr	r1, [r7, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f81f 	bl	800123a <bme280_get_sensor_mode>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d107      	bne.n	8001218 <bme280_set_sensor_mode+0x46>
 8001208:	7bbb      	ldrb	r3, [r7, #14]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 800120e:	6838      	ldr	r0, [r7, #0]
 8001210:	f000 fb1f 	bl	8001852 <put_device_to_sleep>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d106      	bne.n	800122e <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	6839      	ldr	r1, [r7, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fae1 	bl	80017ec <write_power_mode>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b084      	sub	sp, #16
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f001 f89f 	bl	8002388 <null_ptr_check>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10e      	bne.n	8001274 <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	20f4      	movs	r0, #244	; 0xf4
 800125e:	f7ff feba 	bl	8000fd6 <bme280_get_regs>
 8001262:	4603      	mov	r3, r0
 8001264:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	b2da      	uxtb	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8001274:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8001288:	23e0      	movs	r3, #224	; 0xe0
 800128a:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8001290:	2305      	movs	r3, #5
 8001292:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8001294:	23b6      	movs	r3, #182	; 0xb6
 8001296:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f001 f875 	bl	8002388 <null_ptr_check>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d12f      	bne.n	800130a <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80012aa:	f107 010b 	add.w	r1, r7, #11
 80012ae:	f107 000d 	add.w	r0, r7, #13
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f7ff febe 	bl	8001036 <bme280_set_regs>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d121      	bne.n	800130a <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2002      	movs	r0, #2
 80012cc:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 80012ce:	f107 010c 	add.w	r1, r7, #12
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	20f3      	movs	r0, #243	; 0xf3
 80012d8:	f7ff fe7d 	bl	8000fd6 <bme280_get_regs>
 80012dc:	4603      	mov	r3, r0
 80012de:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 80012e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d109      	bne.n	80012fc <bme280_soft_reset+0x7c>
 80012e8:	7bbb      	ldrb	r3, [r7, #14]
 80012ea:	1e5a      	subs	r2, r3, #1
 80012ec:	73ba      	strb	r2, [r7, #14]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d004      	beq.n	80012fc <bme280_soft_reset+0x7c>
 80012f2:	7b3b      	ldrb	r3, [r7, #12]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1e4      	bne.n	80012c6 <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 80012fc:	7b3b      	ldrb	r3, [r7, #12]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 8001306:	23fa      	movs	r3, #250	; 0xfa
 8001308:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b08a      	sub	sp, #40	; 0x28
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
    struct bme280_uncomp_data uncomp_data = { 0 };
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f001 f825 	bl	8002388 <null_ptr_check>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 8001344:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001348:	2b00      	cmp	r3, #0
 800134a:	d124      	bne.n	8001396 <bme280_get_sensor_data+0x80>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d021      	beq.n	8001396 <bme280_get_sensor_data+0x80>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001352:	f107 011c 	add.w	r1, r7, #28
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2208      	movs	r2, #8
 800135a:	20f7      	movs	r0, #247	; 0xf7
 800135c:	f7ff fe3b 	bl	8000fd6 <bme280_get_regs>
 8001360:	4603      	mov	r3, r0
 8001362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001366:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <bme280_get_sensor_data+0x86>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 800136e:	f107 0210 	add.w	r2, r7, #16
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f000 f815 	bl	80013a8 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3310      	adds	r3, #16
 8001382:	f107 0110 	add.w	r1, r7, #16
 8001386:	7bf8      	ldrb	r0, [r7, #15]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	f000 f853 	bl	8001434 <bme280_compensate_data>
 800138e:	4603      	mov	r3, r0
 8001390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001394:	e002      	b.n	800139c <bme280_get_sensor_data+0x86>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001396:	23ff      	movs	r3, #255	; 0xff
 8001398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800139c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	031b      	lsls	r3, r3, #12
 80013b8:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3301      	adds	r3, #1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3302      	adds	r3, #2
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	431a      	orrs	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	431a      	orrs	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3303      	adds	r3, #3
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	031b      	lsls	r3, r3, #12
 80013e6:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3304      	adds	r3, #4
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3305      	adds	r3, #5
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	431a      	orrs	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	431a      	orrs	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3306      	adds	r3, #6
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	021b      	lsls	r3, r3, #8
 8001414:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3307      	adds	r3, #7
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	431a      	orrs	r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	609a      	str	r2, [r3, #8]
}
 8001428:	bf00      	nop
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	4603      	mov	r3, r0
 8001442:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d04b      	beq.n	80014e6 <bme280_compensate_data+0xb2>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d048      	beq.n	80014e6 <bme280_compensate_data+0xb2>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d045      	beq.n	80014e6 <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	e9c1 2302 	strd	r2, r3, [r1, #8]
        comp_data->pressure = 0;
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e9c1 2300 	strd	r2, r3, [r1]
        comp_data->humidity = 0;
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	e9c1 2304 	strd	r2, r3, [r1, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800148e:	6839      	ldr	r1, [r7, #0]
 8001490:	68b8      	ldr	r0, [r7, #8]
 8001492:	f000 fa2b 	bl	80018ec <compensate_temperature>
 8001496:	eeb0 7a40 	vmov.f32	s14, s0
 800149a:	eef0 7a60 	vmov.f32	s15, s1
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00a      	beq.n	80014c4 <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 80014ae:	6839      	ldr	r1, [r7, #0]
 80014b0:	68b8      	ldr	r0, [r7, #8]
 80014b2:	f000 faed 	bl	8001a90 <compensate_pressure>
 80014b6:	eeb0 7a40 	vmov.f32	s14, s0
 80014ba:	eef0 7a60 	vmov.f32	s15, s1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00d      	beq.n	80014ea <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80014ce:	6839      	ldr	r1, [r7, #0]
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f000 fcad 	bl	8001e30 <compensate_humidity>
 80014d6:	eeb0 7a40 	vmov.f32	s14, s0
 80014da:	eef0 7a60 	vmov.f32	s15, s1
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 80014e4:	e001      	b.n	80014ea <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80014e6:	23ff      	movs	r3, #255	; 0xff
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80014ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
 8001502:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 8001504:	2301      	movs	r3, #1
 8001506:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f000 f815 	bl	8001544 <set_osr_humidity_settings>
 800151a:	4603      	mov	r3, r0
 800151c:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800151e:	7bfb      	ldrb	r3, [r7, #15]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	4618      	mov	r0, r3
 8001530:	f000 f842 	bl	80015b8 <set_osr_press_temp_settings>
 8001534:	4603      	mov	r3, r0
 8001536:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001538:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800154e:	23f2      	movs	r3, #242	; 0xf2
 8001550:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	789b      	ldrb	r3, [r3, #2]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	b2db      	uxtb	r3, r3
 800155c:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800155e:	f107 010e 	add.w	r1, r7, #14
 8001562:	f107 000c 	add.w	r0, r7, #12
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	f7ff fd64 	bl	8001036 <bme280_set_regs>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d118      	bne.n	80015ac <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 800157a:	23f4      	movs	r3, #244	; 0xf4
 800157c:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800157e:	7b38      	ldrb	r0, [r7, #12]
 8001580:	f107 010d 	add.w	r1, r7, #13
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2201      	movs	r2, #1
 8001588:	f7ff fd25 	bl	8000fd6 <bme280_get_regs>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 8001590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001598:	f107 010d 	add.w	r1, r7, #13
 800159c:	f107 000c 	add.w	r0, r7, #12
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f7ff fd47 	bl	8001036 <bme280_set_regs>
 80015a8:	4603      	mov	r3, r0
 80015aa:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80015ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80015c6:	23f4      	movs	r3, #244	; 0xf4
 80015c8:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015ca:	7db8      	ldrb	r0, [r7, #22]
 80015cc:	f107 0115 	add.w	r1, r7, #21
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f7ff fcff 	bl	8000fd6 <bme280_get_regs>
 80015d8:	4603      	mov	r3, r0
 80015da:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 80015dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d11f      	bne.n	8001624 <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 80015ee:	f107 0315 	add.w	r3, r7, #21
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f88e 	bl	8001716 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 8001604:	f107 0315 	add.w	r3, r7, #21
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f8a0 	bl	8001750 <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001610:	f107 0115 	add.w	r1, r7, #21
 8001614:	f107 0016 	add.w	r0, r7, #22
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f7ff fd0b 	bl	8001036 <bme280_set_regs>
 8001620:	4603      	mov	r3, r0
 8001622:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001624:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 800163e:	23f5      	movs	r3, #245	; 0xf5
 8001640:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001642:	7db8      	ldrb	r0, [r7, #22]
 8001644:	f107 0115 	add.w	r1, r7, #21
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f7ff fcc3 	bl	8000fd6 <bme280_get_regs>
 8001650:	4603      	mov	r3, r0
 8001652:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8001654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d11f      	bne.n	800169c <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 8001666:	f107 0315 	add.w	r3, r7, #21
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 f81b 	bl	80016a8 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	f003 0310 	and.w	r3, r3, #16
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 800167c:	f107 0315 	add.w	r3, r7, #21
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f82d 	bl	80016e2 <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001688:	f107 0115 	add.w	r1, r7, #21
 800168c:	f107 0016 	add.w	r0, r7, #22
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f7ff fccf 	bl	8001036 <bme280_set_regs>
 8001698:	4603      	mov	r3, r0
 800169a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800169c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	f023 031c 	bic.w	r3, r3, #28
 80016bc:	b25a      	sxtb	r2, r3
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	78db      	ldrb	r3, [r3, #3]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	b25b      	sxtb	r3, r3
 80016c6:	f003 031c 	and.w	r3, r3, #28
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	4313      	orrs	r3, r2
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	701a      	strb	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	b25a      	sxtb	r2, r3
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	791b      	ldrb	r3, [r3, #4]
 80016fc:	015b      	lsls	r3, r3, #5
 80016fe:	b25b      	sxtb	r3, r3
 8001700:	4313      	orrs	r3, r2
 8001702:	b25b      	sxtb	r3, r3
 8001704:	b2da      	uxtb	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	701a      	strb	r2, [r3, #0]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b25b      	sxtb	r3, r3
 8001726:	f023 031c 	bic.w	r3, r3, #28
 800172a:	b25a      	sxtb	r2, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	b25b      	sxtb	r3, r3
 8001734:	f003 031c 	and.w	r3, r3, #28
 8001738:	b25b      	sxtb	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	701a      	strb	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	b25b      	sxtb	r3, r3
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	b25a      	sxtb	r2, r3
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	785b      	ldrb	r3, [r3, #1]
 800176a:	015b      	lsls	r3, r3, #5
 800176c:	b25b      	sxtb	r3, r3
 800176e:	4313      	orrs	r3, r2
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	701a      	strb	r2, [r3, #0]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	b2da      	uxtb	r2, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3302      	adds	r3, #2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	109b      	asrs	r3, r3, #2
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3302      	adds	r3, #2
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3303      	adds	r3, #3
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	109b      	asrs	r3, r3, #2
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3303      	adds	r3, #3
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	711a      	strb	r2, [r3, #4]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017f8:	23f4      	movs	r3, #244	; 0xf4
 80017fa:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017fc:	7bb8      	ldrb	r0, [r7, #14]
 80017fe:	f107 010d 	add.w	r1, r7, #13
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	f7ff fbe6 	bl	8000fd6 <bme280_get_regs>
 800180a:	4603      	mov	r3, r0
 800180c:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d117      	bne.n	8001846 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001816:	7b7b      	ldrb	r3, [r7, #13]
 8001818:	b25b      	sxtb	r3, r3
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	b25a      	sxtb	r2, r3
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	b25b      	sxtb	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b25b      	sxtb	r3, r3
 800182e:	b2db      	uxtb	r3, r3
 8001830:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001832:	f107 010d 	add.w	r1, r7, #13
 8001836:	f107 000e 	add.w	r0, r7, #14
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2201      	movs	r2, #1
 800183e:	f7ff fbfa 	bl	8001036 <bme280_set_regs>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800185a:	f107 0110 	add.w	r1, r7, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2204      	movs	r2, #4
 8001862:	20f2      	movs	r0, #242	; 0xf2
 8001864:	f7ff fbb7 	bl	8000fd6 <bme280_get_regs>
 8001868:	4603      	mov	r3, r0
 800186a:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 800186c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d118      	bne.n	80018a6 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 8001874:	f107 0208 	add.w	r2, r7, #8
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff80 	bl	8001784 <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff fcfb 	bl	8001280 <bme280_soft_reset>
 800188a:	4603      	mov	r3, r0
 800188c:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 800188e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d107      	bne.n	80018a6 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 f808 	bl	80018b2 <reload_device_settings>
 80018a2:	4603      	mov	r3, r0
 80018a4:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 80018a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b084      	sub	sp, #16
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	201f      	movs	r0, #31
 80018c2:	f7ff fe18 	bl	80014f6 <set_osr_settings>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d106      	bne.n	80018e0 <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	201f      	movs	r0, #31
 80018d8:	f7ff feaa 	bl	8001630 <set_filter_standby_settings>
 80018dc:	4603      	mov	r3, r0
 80018de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	4b5f      	ldr	r3, [pc, #380]	; (8001a78 <compensate_temperature+0x18c>)
 80018fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    double temperature_max = 85;
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b5d      	ldr	r3, [pc, #372]	; (8001a7c <compensate_temperature+0x190>)
 8001906:	e9c7 2306 	strd	r2, r3, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fdf8 	bl	8000504 <__aeabi_ui2d>
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	4b59      	ldr	r3, [pc, #356]	; (8001a80 <compensate_temperature+0x194>)
 800191a:	f7fe ff97 	bl	800084c <__aeabi_ddiv>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4614      	mov	r4, r2
 8001924:	461d      	mov	r5, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fdea 	bl	8000504 <__aeabi_ui2d>
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <compensate_temperature+0x198>)
 8001936:	f7fe ff89 	bl	800084c <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4620      	mov	r0, r4
 8001940:	4629      	mov	r1, r5
 8001942:	f7fe fca1 	bl	8000288 <__aeabi_dsub>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_T2);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fde5 	bl	8000524 <__aeabi_i2d>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001962:	f7fe fe49 	bl	80005f8 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdc6 	bl	8000504 <__aeabi_ui2d>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001980:	f7fe ff64 	bl	800084c <__aeabi_ddiv>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4614      	mov	r4, r2
 800198a:	461d      	mov	r5, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	881b      	ldrh	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fdb7 	bl	8000504 <__aeabi_ui2d>
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <compensate_temperature+0x19c>)
 800199c:	f7fe ff56 	bl	800084c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4620      	mov	r0, r4
 80019a6:	4629      	mov	r1, r5
 80019a8:	f7fe fc6e 	bl	8000288 <__aeabi_dsub>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 80019b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019bc:	f7fe fe1c 	bl	80005f8 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4614      	mov	r4, r2
 80019c6:	461d      	mov	r5, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fda8 	bl	8000524 <__aeabi_i2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4620      	mov	r0, r4
 80019da:	4629      	mov	r1, r5
 80019dc:	f7fe fe0c 	bl	80005f8 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 80019e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019f0:	f7fe fc4c 	bl	800028c <__adddf3>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4610      	mov	r0, r2
 80019fa:	4619      	mov	r1, r3
 80019fc:	f7ff f8ac 	bl	8000b58 <__aeabi_d2iz>
 8001a00:	4602      	mov	r2, r0
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8001a06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a0e:	f7fe fc3d 	bl	800028c <__adddf3>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <compensate_temperature+0x1a0>)
 8001a20:	f7fe ff14 	bl	800084c <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (temperature < temperature_min)
 8001a2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a30:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a34:	f7ff f852 	bl	8000adc <__aeabi_dcmplt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <compensate_temperature+0x15c>
    {
        temperature = temperature_min;
 8001a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a46:	e00c      	b.n	8001a62 <compensate_temperature+0x176>
    }
    else if (temperature > temperature_max)
 8001a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a50:	f7ff f862 	bl	8000b18 <__aeabi_dcmpgt>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <compensate_temperature+0x176>
    {
        temperature = temperature_max;
 8001a5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return temperature;
 8001a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a66:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a6e:	eef0 0a67 	vmov.f32	s1, s15
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
 8001a78:	c0440000 	.word	0xc0440000
 8001a7c:	40554000 	.word	0x40554000
 8001a80:	40d00000 	.word	0x40d00000
 8001a84:	40900000 	.word	0x40900000
 8001a88:	40c00000 	.word	0x40c00000
 8001a8c:	40b40000 	.word	0x40b40000

08001a90 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	b08e      	sub	sp, #56	; 0x38
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 8001a9a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001e00 <compensate_pressure+0x370>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 8001aa4:	a3d8      	add	r3, pc, #864	; (adr r3, 8001e08 <compensate_pressure+0x378>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	e9c7 2308 	strd	r2, r3, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd36 	bl	8000524 <__aeabi_i2d>
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac0:	f7fe fec4 	bl	800084c <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4610      	mov	r0, r2
 8001aca:	4619      	mov	r1, r3
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	4bc1      	ldr	r3, [pc, #772]	; (8001dd8 <compensate_pressure+0x348>)
 8001ad2:	f7fe fbd9 	bl	8000288 <__aeabi_dsub>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001ade:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ae6:	f7fe fd87 	bl	80005f8 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4614      	mov	r4, r2
 8001af0:	461d      	mov	r5, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd13 	bl	8000524 <__aeabi_i2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe fd77 	bl	80005f8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	4bb1      	ldr	r3, [pc, #708]	; (8001ddc <compensate_pressure+0x34c>)
 8001b18:	f7fe fe98 	bl	800084c <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fcfa 	bl	8000524 <__aeabi_i2d>
 8001b30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	f7fe fba2 	bl	800028c <__adddf3>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b50:	f7fe fb9c 	bl	800028c <__adddf3>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b9f      	ldr	r3, [pc, #636]	; (8001de0 <compensate_pressure+0x350>)
 8001b62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b66:	f7fe fe71 	bl	800084c <__aeabi_ddiv>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4614      	mov	r4, r2
 8001b70:	461d      	mov	r5, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fcd3 	bl	8000524 <__aeabi_i2d>
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b98      	ldr	r3, [pc, #608]	; (8001de4 <compensate_pressure+0x354>)
 8001b84:	f7fe fd38 	bl	80005f8 <__aeabi_dmul>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	4629      	mov	r1, r5
 8001b90:	f7fe fb7c 	bl	800028c <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fcbe 	bl	8000524 <__aeabi_i2d>
 8001ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bac:	f7fe fd24 	bl	80005f8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bbc:	f7fe fd1c 	bl	80005f8 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b86      	ldr	r3, [pc, #536]	; (8001de8 <compensate_pressure+0x358>)
 8001bce:	f7fe fe3d 	bl	800084c <__aeabi_ddiv>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fc9f 	bl	8000524 <__aeabi_i2d>
 8001be6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bea:	f7fe fd05 	bl	80005f8 <__aeabi_dmul>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfa:	f7fe fb47 	bl	800028c <__adddf3>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b77      	ldr	r3, [pc, #476]	; (8001de8 <compensate_pressure+0x358>)
 8001c0c:	f7fe fe1e 	bl	800084c <__aeabi_ddiv>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	; (8001ddc <compensate_pressure+0x34c>)
 8001c1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c22:	f7fe fe13 	bl	800084c <__aeabi_ddiv>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	4b6e      	ldr	r3, [pc, #440]	; (8001dec <compensate_pressure+0x35c>)
 8001c34:	f7fe fb2a 	bl	800028c <__adddf3>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	461d      	mov	r5, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	88db      	ldrh	r3, [r3, #6]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc5d 	bl	8000504 <__aeabi_ui2d>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	f7fe fcd1 	bl	80005f8 <__aeabi_dmul>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9c7 2306 	strd	r2, r3, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c6a:	f7fe ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f040 80cd 	bne.w	8001e10 <compensate_pressure+0x380>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc42 	bl	8000504 <__aeabi_ui2d>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	f04f 0000 	mov.w	r0, #0
 8001c88:	4959      	ldr	r1, [pc, #356]	; (8001df0 <compensate_pressure+0x360>)
 8001c8a:	f7fe fafd 	bl	8000288 <__aeabi_dsub>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4b56      	ldr	r3, [pc, #344]	; (8001df4 <compensate_pressure+0x364>)
 8001c9c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ca0:	f7fe fdd4 	bl	800084c <__aeabi_ddiv>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001cac:	f7fe faec 	bl	8000288 <__aeabi_dsub>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	a345      	add	r3, pc, #276	; (adr r3, 8001dd0 <compensate_pressure+0x340>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fc9b 	bl	80005f8 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cce:	f7fe fdbd 	bl	800084c <__aeabi_ddiv>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc1f 	bl	8000524 <__aeabi_i2d>
 8001ce6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cea:	f7fe fc85 	bl	80005f8 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cfa:	f7fe fc7d 	bl	80005f8 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <compensate_pressure+0x368>)
 8001d0c:	f7fe fd9e 	bl	800084c <__aeabi_ddiv>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	e9c7 2306 	strd	r2, r3, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7fe fc00 	bl	8000524 <__aeabi_i2d>
 8001d24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d28:	f7fe fc66 	bl	80005f8 <__aeabi_dmul>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	4b28      	ldr	r3, [pc, #160]	; (8001ddc <compensate_pressure+0x34c>)
 8001d3a:	f7fe fd87 	bl	800084c <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	e9c7 2304 	strd	r2, r3, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001d46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d4e:	f7fe fa9d 	bl	800028c <__adddf3>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4614      	mov	r4, r2
 8001d58:	461d      	mov	r5, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fbdf 	bl	8000524 <__aeabi_i2d>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	f7fe fa8d 	bl	800028c <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <compensate_pressure+0x36c>)
 8001d80:	f7fe fd64 	bl	800084c <__aeabi_ddiv>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d8c:	f7fe fa7e 	bl	800028c <__adddf3>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        if (pressure < pressure_min)
 8001d98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d9c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001da0:	f7fe fe9c 	bl	8000adc <__aeabi_dcmplt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <compensate_pressure+0x324>
        {
            pressure = pressure_min;
 8001daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001db2:	e031      	b.n	8001e18 <compensate_pressure+0x388>
        }
        else if (pressure > pressure_max)
 8001db4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001db8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001dbc:	f7fe feac 	bl	8000b18 <__aeabi_dcmpgt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d028      	beq.n	8001e18 <compensate_pressure+0x388>
        {
            pressure = pressure_max;
 8001dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001dce:	e023      	b.n	8001e18 <compensate_pressure+0x388>
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40b86a00 	.word	0x40b86a00
 8001dd8:	40ef4000 	.word	0x40ef4000
 8001ddc:	40e00000 	.word	0x40e00000
 8001de0:	40100000 	.word	0x40100000
 8001de4:	40f00000 	.word	0x40f00000
 8001de8:	41200000 	.word	0x41200000
 8001dec:	3ff00000 	.word	0x3ff00000
 8001df0:	41300000 	.word	0x41300000
 8001df4:	40b00000 	.word	0x40b00000
 8001df8:	41e00000 	.word	0x41e00000
 8001dfc:	40300000 	.word	0x40300000
 8001e00:	00000000 	.word	0x00000000
 8001e04:	40dd4c00 	.word	0x40dd4c00
 8001e08:	00000000 	.word	0x00000000
 8001e0c:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8001e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e14:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    }

    return pressure;
 8001e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e1c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e20:	eeb0 0a47 	vmov.f32	s0, s14
 8001e24:	eef0 0a67 	vmov.f32	s1, s15
 8001e28:	3738      	adds	r7, #56	; 0x38
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2e:	bf00      	nop

08001e30 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	b094      	sub	sp, #80	; 0x50
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b81      	ldr	r3, [pc, #516]	; (8002050 <compensate_humidity+0x220>)
 8001e4c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb65 	bl	8000524 <__aeabi_i2d>
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <compensate_humidity+0x224>)
 8001e60:	f7fe fa12 	bl	8000288 <__aeabi_dsub>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb56 	bl	8000524 <__aeabi_i2d>
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b76      	ldr	r3, [pc, #472]	; (8002058 <compensate_humidity+0x228>)
 8001e7e:	f7fe fbbb 	bl	80005f8 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4614      	mov	r4, r2
 8001e88:	461d      	mov	r5, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb47 	bl	8000524 <__aeabi_i2d>
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	4b70      	ldr	r3, [pc, #448]	; (800205c <compensate_humidity+0x22c>)
 8001e9c:	f7fe fcd6 	bl	800084c <__aeabi_ddiv>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001eac:	f7fe fba4 	bl	80005f8 <__aeabi_dmul>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	4629      	mov	r1, r5
 8001eb8:	f7fe f9e8 	bl	800028c <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb1b 	bl	8000504 <__aeabi_ui2d>
 8001ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ed2:	f7fe f9d9 	bl	8000288 <__aeabi_dsub>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	e9c7 2308 	strd	r2, r3, [r7, #32]
    var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7fe fb1d 	bl	8000524 <__aeabi_i2d>
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <compensate_humidity+0x230>)
 8001ef0:	f7fe fcac 	bl	800084c <__aeabi_ddiv>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	7f1b      	ldrb	r3, [r3, #28]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe faff 	bl	8000504 <__aeabi_ui2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b56      	ldr	r3, [pc, #344]	; (8002064 <compensate_humidity+0x234>)
 8001f0c:	f7fe fc9e 	bl	800084c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f1c:	f7fe fb6c 	bl	80005f8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b4e      	ldr	r3, [pc, #312]	; (8002068 <compensate_humidity+0x238>)
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2304 	strd	r2, r3, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faef 	bl	8000524 <__aeabi_i2d>
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <compensate_humidity+0x234>)
 8001f4c:	f7fe fc7e 	bl	800084c <__aeabi_ddiv>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f5c:	f7fe fb4c 	bl	80005f8 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f6c:	f7fe fb44 	bl	80005f8 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b3a      	ldr	r3, [pc, #232]	; (8002068 <compensate_humidity+0x238>)
 8001f7e:	f7fe f985 	bl	800028c <__adddf3>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	e9c7 2302 	strd	r2, r3, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8001f8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f92:	f7fe fb31 	bl	80005f8 <__aeabi_dmul>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4614      	mov	r4, r2
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fa2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001fa6:	f7fe fb27 	bl	80005f8 <__aeabi_dmul>
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4620      	mov	r0, r4
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	f7fe fb21 	bl	80005f8 <__aeabi_dmul>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	e9c7 2302 	strd	r2, r3, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	7e1b      	ldrb	r3, [r3, #24]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fa9e 	bl	8000504 <__aeabi_ui2d>
 8001fc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fcc:	f7fe fb14 	bl	80005f8 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	4b23      	ldr	r3, [pc, #140]	; (800206c <compensate_humidity+0x23c>)
 8001fde:	f7fe fc35 	bl	800084c <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	f04f 0000 	mov.w	r0, #0
 8001fea:	491f      	ldr	r1, [pc, #124]	; (8002068 <compensate_humidity+0x238>)
 8001fec:	f7fe f94c 	bl	8000288 <__aeabi_dsub>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ff8:	f7fe fafe 	bl	80005f8 <__aeabi_dmul>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    if (humidity > humidity_max)
 8002004:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002008:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800200c:	f7fe fd84 	bl	8000b18 <__aeabi_dcmpgt>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d004      	beq.n	8002020 <compensate_humidity+0x1f0>
    {
        humidity = humidity_max;
 8002016:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800201a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800201e:	e00c      	b.n	800203a <compensate_humidity+0x20a>
    }
    else if (humidity < humidity_min)
 8002020:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002024:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002028:	f7fe fd58 	bl	8000adc <__aeabi_dcmplt>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <compensate_humidity+0x20a>
    {
        humidity = humidity_min;
 8002032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002036:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    }

    return humidity;
 800203a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800203e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002042:	eeb0 0a47 	vmov.f32	s0, s14
 8002046:	eef0 0a67 	vmov.f32	s1, s15
 800204a:	3750      	adds	r7, #80	; 0x50
 800204c:	46bd      	mov	sp, r7
 800204e:	bdb0      	pop	{r4, r5, r7, pc}
 8002050:	40590000 	.word	0x40590000
 8002054:	40f2c000 	.word	0x40f2c000
 8002058:	40500000 	.word	0x40500000
 800205c:	40d00000 	.word	0x40d00000
 8002060:	40f00000 	.word	0x40f00000
 8002064:	41900000 	.word	0x41900000
 8002068:	3ff00000 	.word	0x3ff00000
 800206c:	41200000 	.word	0x41200000

08002070 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002078:	2388      	movs	r3, #136	; 0x88
 800207a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	829a      	strh	r2, [r3, #20]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002094:	f107 010c 	add.w	r1, r7, #12
 8002098:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	221a      	movs	r2, #26
 80020a0:	f7fe ff99 	bl	8000fd6 <bme280_get_regs>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 80020aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d11d      	bne.n	80020ee <get_calib_data+0x7e>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f84a 	bl	8002152 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80020be:	23e1      	movs	r3, #225	; 0xe1
 80020c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80020c4:	f107 010c 	add.w	r1, r7, #12
 80020c8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2207      	movs	r2, #7
 80020d0:	f7fe ff81 	bl	8000fd6 <bme280_get_regs>
 80020d4:	4603      	mov	r3, r0
 80020d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80020da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d105      	bne.n	80020ee <get_calib_data+0x7e>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f000 f8e2 	bl	80022b2 <parse_humidity_calib_data>
        }
    }

    return rslt;
 80020ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b087      	sub	sp, #28
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8002108:	2301      	movs	r3, #1
 800210a:	75fb      	strb	r3, [r7, #23]
 800210c:	e016      	b.n	800213c <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 800210e:	7dfb      	ldrb	r3, [r7, #23]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	441a      	add	r2, r3
 8002114:	7dfb      	ldrb	r3, [r7, #23]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	3b01      	subs	r3, #1
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	440b      	add	r3, r1
 800211e:	7812      	ldrb	r2, [r2, #0]
 8002120:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8002122:	7dfb      	ldrb	r3, [r7, #23]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	441a      	add	r2, r3
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4619      	mov	r1, r3
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	440b      	add	r3, r1
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8002136:	7dfb      	ldrb	r3, [r7, #23]
 8002138:	3301      	adds	r3, #1
 800213a:	75fb      	strb	r3, [r7, #23]
 800213c:	7dfa      	ldrb	r2, [r7, #23]
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	429a      	cmp	r2, r3
 8002142:	d3e4      	bcc.n	800210e <interleave_reg_addr+0x14>
    }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	3310      	adds	r3, #16
 8002160:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3301      	adds	r3, #1
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	b21a      	sxth	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3303      	adds	r3, #3
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3302      	adds	r3, #2
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3305      	adds	r3, #5
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3307      	adds	r3, #7
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3306      	adds	r3, #6
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3309      	adds	r3, #9
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3308      	adds	r3, #8
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	330b      	adds	r3, #11
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	b21a      	sxth	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	330a      	adds	r3, #10
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b21a      	sxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	330d      	adds	r3, #13
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	330c      	adds	r3, #12
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	b21b      	sxth	r3, r3
 8002212:	4313      	orrs	r3, r2
 8002214:	b21a      	sxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	330f      	adds	r3, #15
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	b21a      	sxth	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	330e      	adds	r3, #14
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	b21b      	sxth	r3, r3
 800222c:	4313      	orrs	r3, r2
 800222e:	b21a      	sxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3311      	adds	r3, #17
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21a      	sxth	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3310      	adds	r3, #16
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b21b      	sxth	r3, r3
 8002246:	4313      	orrs	r3, r2
 8002248:	b21a      	sxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3313      	adds	r3, #19
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	b21a      	sxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3312      	adds	r3, #18
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b21b      	sxth	r3, r3
 8002260:	4313      	orrs	r3, r2
 8002262:	b21a      	sxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3315      	adds	r3, #21
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	b21a      	sxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3314      	adds	r3, #20
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b21b      	sxth	r3, r3
 800227a:	4313      	orrs	r3, r2
 800227c:	b21a      	sxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3317      	adds	r3, #23
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3316      	adds	r3, #22
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21a      	sxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3319      	adds	r3, #25
 80022a0:	781a      	ldrb	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	761a      	strb	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b087      	sub	sp, #28
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	3310      	adds	r3, #16
 80022c0:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3301      	adds	r3, #1
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	b21a      	sxth	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3302      	adds	r3, #2
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3303      	adds	r3, #3
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	b25b      	sxtb	r3, r3
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	827b      	strh	r3, [r7, #18]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	f003 030f 	and.w	r3, r3, #15
 8002300:	823b      	strh	r3, [r7, #16]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8002302:	8a7a      	ldrh	r2, [r7, #18]
 8002304:	8a3b      	ldrh	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	b21a      	sxth	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3305      	adds	r3, #5
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	b29b      	uxth	r3, r3
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	b29b      	uxth	r3, r3
 800231c:	81fb      	strh	r3, [r7, #14]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3304      	adds	r3, #4
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	b2db      	uxtb	r3, r3
 8002328:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800232a:	89fa      	ldrh	r2, [r7, #14]
 800232c:	89bb      	ldrh	r3, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	b21a      	sxth	r2, r3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3306      	adds	r3, #6
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b25a      	sxtb	r2, r3
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002344:	bf00      	nop
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	460a      	mov	r2, r1
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 8002364:	79fa      	ldrb	r2, [r7, #7]
 8002366:	79bb      	ldrb	r3, [r7, #6]
 8002368:	4013      	ands	r3, r2
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	e001      	b.n	800237a <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <null_ptr_check+0x26>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <null_ptr_check+0x26>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <null_ptr_check+0x26>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 80023ae:	23ff      	movs	r3, #255	; 0xff
 80023b0:	73fb      	strb	r3, [r7, #15]
 80023b2:	e001      	b.n	80023b8 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <SELECT>:
#define SD_CS_GPIO_Port CS_SD_GPIO_Port
#define SD_CS_Pin CS_SD_Pin

/* SPI Chip Select */
static void SELECT(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2110      	movs	r1, #16
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d4:	f002 f976 	bl	80046c4 <HAL_GPIO_WritePin>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80023e0:	2201      	movs	r2, #1
 80023e2:	2110      	movs	r1, #16
 80023e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023e8:	f002 f96c 	bl	80046c4 <HAL_GPIO_WritePin>
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80023fa:	bf00      	nop
 80023fc:	4808      	ldr	r0, [pc, #32]	; (8002420 <SPI_TxByte+0x30>)
 80023fe:	f005 fcb8 	bl	8007d72 <HAL_SPI_GetState>
 8002402:	4603      	mov	r3, r0
 8002404:	2b01      	cmp	r3, #1
 8002406:	d1f9      	bne.n	80023fc <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002408:	1df9      	adds	r1, r7, #7
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	2201      	movs	r2, #1
 8002410:	4803      	ldr	r0, [pc, #12]	; (8002420 <SPI_TxByte+0x30>)
 8002412:	f004 ffe0 	bl	80073d6 <HAL_SPI_Transmit>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200024a0 	.word	0x200024a0

08002424 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800242a:	23ff      	movs	r3, #255	; 0xff
 800242c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8002432:	bf00      	nop
 8002434:	4809      	ldr	r0, [pc, #36]	; (800245c <SPI_RxByte+0x38>)
 8002436:	f005 fc9c 	bl	8007d72 <HAL_SPI_GetState>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d1f9      	bne.n	8002434 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8002440:	1dba      	adds	r2, r7, #6
 8002442:	1df9      	adds	r1, r7, #7
 8002444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2301      	movs	r3, #1
 800244c:	4803      	ldr	r0, [pc, #12]	; (800245c <SPI_RxByte+0x38>)
 800244e:	f005 fa6e 	bl	800792e <HAL_SPI_TransmitReceive>

  return data;
 8002452:	79bb      	ldrb	r3, [r7, #6]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200024a0 	.word	0x200024a0

08002460 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002468:	f7ff ffdc 	bl	8002424 <SPI_RxByte>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	701a      	strb	r2, [r3, #0]
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <SD_ReadyWait+0x34>)
 8002484:	2232      	movs	r2, #50	; 0x32
 8002486:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8002488:	f7ff ffcc 	bl	8002424 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 800248c:	f7ff ffca 	bl	8002424 <SPI_RxByte>
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2bff      	cmp	r3, #255	; 0xff
 8002498:	d004      	beq.n	80024a4 <SD_ReadyWait+0x28>
 800249a:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SD_ReadyWait+0x34>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f3      	bne.n	800248c <SD_ReadyWait+0x10>

  return res;
 80024a4:	79fb      	ldrb	r3, [r7, #7]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000256a 	.word	0x2000256a

080024b4 <SD_PowerOn>:


static void SD_PowerOn(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80024ba:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80024be:	617b      	str	r3, [r7, #20]


  DESELECT();
 80024c0:	f7ff ff8c 	bl	80023dc <DESELECT>

  for(int i = 0; i < 10; i++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	e005      	b.n	80024d6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80024ca:	20ff      	movs	r0, #255	; 0xff
 80024cc:	f7ff ff90 	bl	80023f0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	3301      	adds	r3, #1
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b09      	cmp	r3, #9
 80024da:	ddf6      	ble.n	80024ca <SD_PowerOn+0x16>
  }


  SELECT();
 80024dc:	f7ff ff74 	bl	80023c8 <SELECT>


  cmd_arg[0] = (CMD0 | 0x40);
 80024e0:	2340      	movs	r3, #64	; 0x40
 80024e2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80024e8:	2300      	movs	r3, #0
 80024ea:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80024f4:	2395      	movs	r3, #149	; 0x95
 80024f6:	727b      	strb	r3, [r7, #9]


  for (int i = 0; i < 6; i++)
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e009      	b.n	8002512 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80024fe:	1d3a      	adds	r2, r7, #4
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff72 	bl	80023f0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3301      	adds	r3, #1
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b05      	cmp	r3, #5
 8002516:	ddf2      	ble.n	80024fe <SD_PowerOn+0x4a>
  }


  while ((SPI_RxByte() != 0x01) && Count)
 8002518:	e002      	b.n	8002520 <SD_PowerOn+0x6c>
  {
    Count--;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3b01      	subs	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8002520:	f7ff ff80 	bl	8002424 <SPI_RxByte>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d002      	beq.n	8002530 <SD_PowerOn+0x7c>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f4      	bne.n	800251a <SD_PowerOn+0x66>
  }

  DESELECT();
 8002530:	f7ff ff54 	bl	80023dc <DESELECT>
  SPI_TxByte(0XFF);
 8002534:	20ff      	movs	r0, #255	; 0xff
 8002536:	f7ff ff5b 	bl	80023f0 <SPI_TxByte>

  PowerFlag = 1;
 800253a:	4b03      	ldr	r3, [pc, #12]	; (8002548 <SD_PowerOn+0x94>)
 800253c:	2201      	movs	r2, #1
 800253e:	701a      	strb	r2, [r3, #0]
}
 8002540:	bf00      	nop
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000275 	.word	0x20000275

0800254c <SD_PowerOff>:


static void SD_PowerOff(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <SD_PowerOff+0x14>)
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	20000275 	.word	0x20000275

08002564 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <SD_CheckPower+0x14>)
 800256a:	781b      	ldrb	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000275 	.word	0x20000275

0800257c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <SD_RxDataBlock+0x68>)
 8002588:	220a      	movs	r2, #10
 800258a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 800258c:	f7ff ff4a 	bl	8002424 <SPI_RxByte>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2bff      	cmp	r3, #255	; 0xff
 8002598:	d104      	bne.n	80025a4 <SD_RxDataBlock+0x28>
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <SD_RxDataBlock+0x68>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f3      	bne.n	800258c <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2bfe      	cmp	r3, #254	; 0xfe
 80025a8:	d001      	beq.n	80025ae <SD_RxDataBlock+0x32>
    return FALSE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e016      	b.n	80025dc <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff53 	bl	8002460 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	607a      	str	r2, [r7, #4]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff4d 	bl	8002460 <SPI_RxBytePtr>
  } while(btr -= 2);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	3b02      	subs	r3, #2
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ed      	bne.n	80025ae <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 80025d2:	f7ff ff27 	bl	8002424 <SPI_RxByte>
  SPI_RxByte();
 80025d6:	f7ff ff25 	bl	8002424 <SPI_RxByte>

  return TRUE;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20002569 	.word	0x20002569

080025e8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80025f8:	f7ff ff40 	bl	800247c <SD_ReadyWait>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2bff      	cmp	r3, #255	; 0xff
 8002600:	d001      	beq.n	8002606 <SD_TxDataBlock+0x1e>
    return FALSE;
 8002602:	2300      	movs	r3, #0
 8002604:	e040      	b.n	8002688 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fef1 	bl	80023f0 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	2bfd      	cmp	r3, #253	; 0xfd
 8002612:	d031      	beq.n	8002678 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fee5 	bl	80023f0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fede 	bl	80023f0 <SPI_TxByte>
    } while (--wc);
 8002634:	7bbb      	ldrb	r3, [r7, #14]
 8002636:	3b01      	subs	r3, #1
 8002638:	73bb      	strb	r3, [r7, #14]
 800263a:	7bbb      	ldrb	r3, [r7, #14]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1eb      	bne.n	8002618 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8002640:	f7ff fef0 	bl	8002424 <SPI_RxByte>
    SPI_RxByte();
 8002644:	f7ff feee 	bl	8002424 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8002648:	e00b      	b.n	8002662 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800264a:	f7ff feeb 	bl	8002424 <SPI_RxByte>
 800264e:	4603      	mov	r3, r0
 8002650:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2b05      	cmp	r3, #5
 800265a:	d006      	beq.n	800266a <SD_TxDataBlock+0x82>
        break;

      i++;
 800265c:	7b7b      	ldrb	r3, [r7, #13]
 800265e:	3301      	adds	r3, #1
 8002660:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8002662:	7b7b      	ldrb	r3, [r7, #13]
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d9f0      	bls.n	800264a <SD_TxDataBlock+0x62>
 8002668:	e000      	b.n	800266c <SD_TxDataBlock+0x84>
        break;
 800266a:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800266c:	bf00      	nop
 800266e:	f7ff fed9 	bl	8002424 <SPI_RxByte>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0fa      	beq.n	800266e <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	2b05      	cmp	r3, #5
 8002680:	d101      	bne.n	8002686 <SD_TxDataBlock+0x9e>
    return TRUE;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800269c:	f7ff feee 	bl	800247c <SD_ReadyWait>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2bff      	cmp	r3, #255	; 0xff
 80026a4:	d001      	beq.n	80026aa <SD_SendCmd+0x1a>
    return 0xFF;
 80026a6:	23ff      	movs	r3, #255	; 0xff
 80026a8:	e040      	b.n	800272c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fe9f 	bl	80023f0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	0e1b      	lsrs	r3, r3, #24
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fe99 	bl	80023f0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fe93 	bl	80023f0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fe8d 	bl	80023f0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fe88 	bl	80023f0 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d101      	bne.n	80026ee <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80026ea:	2395      	movs	r3, #149	; 0x95
 80026ec:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	2b48      	cmp	r3, #72	; 0x48
 80026f2:	d101      	bne.n	80026f8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80026f4:	2387      	movs	r3, #135	; 0x87
 80026f6:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fe78 	bl	80023f0 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b4c      	cmp	r3, #76	; 0x4c
 8002704:	d101      	bne.n	800270a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002706:	f7ff fe8d 	bl	8002424 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800270a:	230a      	movs	r3, #10
 800270c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800270e:	f7ff fe89 	bl	8002424 <SPI_RxByte>
 8002712:	4603      	mov	r3, r0
 8002714:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002716:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800271a:	2b00      	cmp	r3, #0
 800271c:	da05      	bge.n	800272a <SD_SendCmd+0x9a>
 800271e:	7bbb      	ldrb	r3, [r7, #14]
 8002720:	3b01      	subs	r3, #1
 8002722:	73bb      	strb	r3, [r7, #14]
 8002724:	7bbb      	ldrb	r3, [r7, #14]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f1      	bne.n	800270e <SD_SendCmd+0x7e>

  return res;
 800272a:	7b7b      	ldrb	r3, [r7, #13]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/


DSTATUS SD_disk_initialize(BYTE drv)
{
 8002734:	b590      	push	{r4, r7, lr}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];


  if(drv)
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8002744:	2301      	movs	r3, #1
 8002746:	e0d5      	b.n	80028f4 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002748:	4b6c      	ldr	r3, [pc, #432]	; (80028fc <SD_disk_initialize+0x1c8>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <SD_disk_initialize+0x2a>
    return Stat;
 8002756:	4b69      	ldr	r3, [pc, #420]	; (80028fc <SD_disk_initialize+0x1c8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	e0ca      	b.n	80028f4 <SD_disk_initialize+0x1c0>


  SD_PowerOn();
 800275e:	f7ff fea9 	bl	80024b4 <SD_PowerOn>


  SELECT();
 8002762:	f7ff fe31 	bl	80023c8 <SELECT>


  type = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	73bb      	strb	r3, [r7, #14]


  if (SD_SendCmd(CMD0, 0) == 1)
 800276a:	2100      	movs	r1, #0
 800276c:	2040      	movs	r0, #64	; 0x40
 800276e:	f7ff ff8f 	bl	8002690 <SD_SendCmd>
 8002772:	4603      	mov	r3, r0
 8002774:	2b01      	cmp	r3, #1
 8002776:	f040 80a5 	bne.w	80028c4 <SD_disk_initialize+0x190>
  {

    Timer1 = 100;
 800277a:	4b61      	ldr	r3, [pc, #388]	; (8002900 <SD_disk_initialize+0x1cc>)
 800277c:	2264      	movs	r2, #100	; 0x64
 800277e:	701a      	strb	r2, [r3, #0]


    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8002780:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002784:	2048      	movs	r0, #72	; 0x48
 8002786:	f7ff ff83 	bl	8002690 <SD_SendCmd>
 800278a:	4603      	mov	r3, r0
 800278c:	2b01      	cmp	r3, #1
 800278e:	d158      	bne.n	8002842 <SD_disk_initialize+0x10e>
    {

      for (n = 0; n < 4; n++)
 8002790:	2300      	movs	r3, #0
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	e00c      	b.n	80027b0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002796:	7bfc      	ldrb	r4, [r7, #15]
 8002798:	f7ff fe44 	bl	8002424 <SPI_RxByte>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	f104 0310 	add.w	r3, r4, #16
 80027a4:	443b      	add	r3, r7
 80027a6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	3301      	adds	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d9ef      	bls.n	8002796 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80027b6:	7abb      	ldrb	r3, [r7, #10]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	f040 8083 	bne.w	80028c4 <SD_disk_initialize+0x190>
 80027be:	7afb      	ldrb	r3, [r7, #11]
 80027c0:	2baa      	cmp	r3, #170	; 0xaa
 80027c2:	d17f      	bne.n	80028c4 <SD_disk_initialize+0x190>
      {

        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80027c4:	2100      	movs	r1, #0
 80027c6:	2077      	movs	r0, #119	; 0x77
 80027c8:	f7ff ff62 	bl	8002690 <SD_SendCmd>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d807      	bhi.n	80027e2 <SD_disk_initialize+0xae>
 80027d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027d6:	2069      	movs	r0, #105	; 0x69
 80027d8:	f7ff ff5a 	bl	8002690 <SD_SendCmd>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <SD_disk_initialize+0xba>
            break;
        } while (Timer1);
 80027e2:	4b47      	ldr	r3, [pc, #284]	; (8002900 <SD_disk_initialize+0x1cc>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1eb      	bne.n	80027c4 <SD_disk_initialize+0x90>
 80027ec:	e000      	b.n	80027f0 <SD_disk_initialize+0xbc>
            break;
 80027ee:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80027f0:	4b43      	ldr	r3, [pc, #268]	; (8002900 <SD_disk_initialize+0x1cc>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d064      	beq.n	80028c4 <SD_disk_initialize+0x190>
 80027fa:	2100      	movs	r1, #0
 80027fc:	207a      	movs	r0, #122	; 0x7a
 80027fe:	f7ff ff47 	bl	8002690 <SD_SendCmd>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d15d      	bne.n	80028c4 <SD_disk_initialize+0x190>
        {

          for (n = 0; n < 4; n++)
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
 800280c:	e00c      	b.n	8002828 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800280e:	7bfc      	ldrb	r4, [r7, #15]
 8002810:	f7ff fe08 	bl	8002424 <SPI_RxByte>
 8002814:	4603      	mov	r3, r0
 8002816:	461a      	mov	r2, r3
 8002818:	f104 0310 	add.w	r3, r4, #16
 800281c:	443b      	add	r3, r7
 800281e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	3301      	adds	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b03      	cmp	r3, #3
 800282c:	d9ef      	bls.n	800280e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800282e:	7a3b      	ldrb	r3, [r7, #8]
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <SD_disk_initialize+0x108>
 8002838:	2306      	movs	r3, #6
 800283a:	e000      	b.n	800283e <SD_disk_initialize+0x10a>
 800283c:	2302      	movs	r3, #2
 800283e:	73bb      	strb	r3, [r7, #14]
 8002840:	e040      	b.n	80028c4 <SD_disk_initialize+0x190>
      }
    }
    else
    {

      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002842:	2100      	movs	r1, #0
 8002844:	2077      	movs	r0, #119	; 0x77
 8002846:	f7ff ff23 	bl	8002690 <SD_SendCmd>
 800284a:	4603      	mov	r3, r0
 800284c:	2b01      	cmp	r3, #1
 800284e:	d808      	bhi.n	8002862 <SD_disk_initialize+0x12e>
 8002850:	2100      	movs	r1, #0
 8002852:	2069      	movs	r0, #105	; 0x69
 8002854:	f7ff ff1c 	bl	8002690 <SD_SendCmd>
 8002858:	4603      	mov	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d801      	bhi.n	8002862 <SD_disk_initialize+0x12e>
 800285e:	2302      	movs	r3, #2
 8002860:	e000      	b.n	8002864 <SD_disk_initialize+0x130>
 8002862:	2301      	movs	r3, #1
 8002864:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8002866:	7bbb      	ldrb	r3, [r7, #14]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d10e      	bne.n	800288a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800286c:	2100      	movs	r1, #0
 800286e:	2077      	movs	r0, #119	; 0x77
 8002870:	f7ff ff0e 	bl	8002690 <SD_SendCmd>
 8002874:	4603      	mov	r3, r0
 8002876:	2b01      	cmp	r3, #1
 8002878:	d80e      	bhi.n	8002898 <SD_disk_initialize+0x164>
 800287a:	2100      	movs	r1, #0
 800287c:	2069      	movs	r0, #105	; 0x69
 800287e:	f7ff ff07 	bl	8002690 <SD_SendCmd>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d107      	bne.n	8002898 <SD_disk_initialize+0x164>
            break;
 8002888:	e00d      	b.n	80028a6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800288a:	2100      	movs	r1, #0
 800288c:	2041      	movs	r0, #65	; 0x41
 800288e:	f7ff feff 	bl	8002690 <SD_SendCmd>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <SD_disk_initialize+0x170>
            break;
        }
      } while (Timer1);
 8002898:	4b19      	ldr	r3, [pc, #100]	; (8002900 <SD_disk_initialize+0x1cc>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e1      	bne.n	8002866 <SD_disk_initialize+0x132>
 80028a2:	e000      	b.n	80028a6 <SD_disk_initialize+0x172>
            break;
 80028a4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <SD_disk_initialize+0x1cc>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <SD_disk_initialize+0x18c>
 80028b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028b4:	2050      	movs	r0, #80	; 0x50
 80028b6:	f7ff feeb 	bl	8002690 <SD_SendCmd>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <SD_disk_initialize+0x190>
      {

        type = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <SD_disk_initialize+0x1d0>)
 80028c6:	7bbb      	ldrb	r3, [r7, #14]
 80028c8:	7013      	strb	r3, [r2, #0]

  DESELECT();
 80028ca:	f7ff fd87 	bl	80023dc <DESELECT>

  SPI_RxByte();
 80028ce:	f7ff fda9 	bl	8002424 <SPI_RxByte>

  if (type)
 80028d2:	7bbb      	ldrb	r3, [r7, #14]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <SD_disk_initialize+0x1b6>
  {

    Stat &= ~STA_NOINIT;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <SD_disk_initialize+0x1c8>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <SD_disk_initialize+0x1c8>)
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e001      	b.n	80028ee <SD_disk_initialize+0x1ba>
  }
  else
  {

    SD_PowerOff();
 80028ea:	f7ff fe2f 	bl	800254c <SD_PowerOff>
  }

  return Stat;
 80028ee:	4b03      	ldr	r3, [pc, #12]	; (80028fc <SD_disk_initialize+0x1c8>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b2db      	uxtb	r3, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}
 80028fc:	20000000 	.word	0x20000000
 8002900:	20002569 	.word	0x20002569
 8002904:	20000274 	.word	0x20000274

08002908 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <SD_disk_status+0x14>
    return STA_NOINIT;
 8002918:	2301      	movs	r3, #1
 800291a:	e002      	b.n	8002922 <SD_disk_status+0x1a>

  return Stat;
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <SD_disk_status+0x28>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	b2db      	uxtb	r3, r3
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000000 	.word	0x20000000

08002934 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4603      	mov	r3, r0
 8002942:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d102      	bne.n	8002950 <SD_disk_read+0x1c>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <SD_disk_read+0x20>
    return RES_PARERR;
 8002950:	2304      	movs	r3, #4
 8002952:	e051      	b.n	80029f8 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <SD_disk_read+0xcc>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002962:	2303      	movs	r3, #3
 8002964:	e048      	b.n	80029f8 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <SD_disk_read+0xd0>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f003 0304 	and.w	r3, r3, #4
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	025b      	lsls	r3, r3, #9
 8002976:	607b      	str	r3, [r7, #4]

  SELECT();
 8002978:	f7ff fd26 	bl	80023c8 <SELECT>

  if (count == 1)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d111      	bne.n	80029a6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	2051      	movs	r0, #81	; 0x51
 8002986:	f7ff fe83 	bl	8002690 <SD_SendCmd>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d129      	bne.n	80029e4 <SD_disk_read+0xb0>
 8002990:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002994:	68b8      	ldr	r0, [r7, #8]
 8002996:	f7ff fdf1 	bl	800257c <SD_RxDataBlock>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d021      	beq.n	80029e4 <SD_disk_read+0xb0>
      count = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	e01e      	b.n	80029e4 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	2052      	movs	r0, #82	; 0x52
 80029aa:	f7ff fe71 	bl	8002690 <SD_SendCmd>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d117      	bne.n	80029e4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 80029b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029b8:	68b8      	ldr	r0, [r7, #8]
 80029ba:	f7ff fddf 	bl	800257c <SD_RxDataBlock>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <SD_disk_read+0xa6>
          break;

        buff += 512;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80029ca:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ed      	bne.n	80029b4 <SD_disk_read+0x80>
 80029d8:	e000      	b.n	80029dc <SD_disk_read+0xa8>
          break;
 80029da:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80029dc:	2100      	movs	r1, #0
 80029de:	204c      	movs	r0, #76	; 0x4c
 80029e0:	f7ff fe56 	bl	8002690 <SD_SendCmd>
    }
  }

  DESELECT();
 80029e4:	f7ff fcfa 	bl	80023dc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80029e8:	f7ff fd1c 	bl	8002424 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	bf14      	ite	ne
 80029f2:	2301      	movne	r3, #1
 80029f4:	2300      	moveq	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000000 	.word	0x20000000
 8002a04:	20000274 	.word	0x20000274

08002a08 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60b9      	str	r1, [r7, #8]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4603      	mov	r3, r0
 8002a16:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <SD_disk_write+0x1c>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <SD_disk_write+0x20>
    return RES_PARERR;
 8002a24:	2304      	movs	r3, #4
 8002a26:	e06b      	b.n	8002b00 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8002a28:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <SD_disk_write+0x100>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e062      	b.n	8002b00 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8002a3a:	4b33      	ldr	r3, [pc, #204]	; (8002b08 <SD_disk_write+0x100>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <SD_disk_write+0x44>
    return RES_WRPRT;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e059      	b.n	8002b00 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <SD_disk_write+0x104>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	025b      	lsls	r3, r3, #9
 8002a5c:	607b      	str	r3, [r7, #4]

  SELECT();
 8002a5e:	f7ff fcb3 	bl	80023c8 <SELECT>

  if (count == 1)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d110      	bne.n	8002a8a <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	2058      	movs	r0, #88	; 0x58
 8002a6c:	f7ff fe10 	bl	8002690 <SD_SendCmd>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d13a      	bne.n	8002aec <SD_disk_write+0xe4>
 8002a76:	21fe      	movs	r1, #254	; 0xfe
 8002a78:	68b8      	ldr	r0, [r7, #8]
 8002a7a:	f7ff fdb5 	bl	80025e8 <SD_TxDataBlock>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d033      	beq.n	8002aec <SD_disk_write+0xe4>
      count = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	e030      	b.n	8002aec <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <SD_disk_write+0x104>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002a96:	2100      	movs	r1, #0
 8002a98:	2077      	movs	r0, #119	; 0x77
 8002a9a:	f7ff fdf9 	bl	8002690 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002a9e:	6839      	ldr	r1, [r7, #0]
 8002aa0:	2057      	movs	r0, #87	; 0x57
 8002aa2:	f7ff fdf5 	bl	8002690 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	2059      	movs	r0, #89	; 0x59
 8002aaa:	f7ff fdf1 	bl	8002690 <SD_SendCmd>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d11b      	bne.n	8002aec <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002ab4:	21fc      	movs	r1, #252	; 0xfc
 8002ab6:	68b8      	ldr	r0, [r7, #8]
 8002ab8:	f7ff fd96 	bl	80025e8 <SD_TxDataBlock>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ac8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ee      	bne.n	8002ab4 <SD_disk_write+0xac>
 8002ad6:	e000      	b.n	8002ada <SD_disk_write+0xd2>
          break;
 8002ad8:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8002ada:	21fd      	movs	r1, #253	; 0xfd
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7ff fd83 	bl	80025e8 <SD_TxDataBlock>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <SD_disk_write+0xe4>
      {
        count = 1;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8002aec:	f7ff fc76 	bl	80023dc <DESELECT>
  SPI_RxByte();
 8002af0:	f7ff fc98 	bl	8002424 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000274 	.word	0x20000274

08002b10 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b08b      	sub	sp, #44	; 0x2c
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	603a      	str	r2, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	e11b      	b.n	8002d66 <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8002b34:	79bb      	ldrb	r3, [r7, #6]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d129      	bne.n	8002b8e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d017      	beq.n	8002b72 <SD_disk_ioctl+0x62>
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	dc1f      	bgt.n	8002b86 <SD_disk_ioctl+0x76>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <SD_disk_ioctl+0x40>
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d00b      	beq.n	8002b66 <SD_disk_ioctl+0x56>
 8002b4e:	e01a      	b.n	8002b86 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002b50:	f7ff fd08 	bl	8002564 <SD_CheckPower>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002b5a:	f7ff fcf7 	bl	800254c <SD_PowerOff>
      res = RES_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002b64:	e0fd      	b.n	8002d62 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002b66:	f7ff fca5 	bl	80024b4 <SD_PowerOn>
      res = RES_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002b70:	e0f7      	b.n	8002d62 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	1c5c      	adds	r4, r3, #1
 8002b76:	f7ff fcf5 	bl	8002564 <SD_CheckPower>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002b84:	e0ed      	b.n	8002d62 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002b86:	2304      	movs	r3, #4
 8002b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002b8c:	e0e9      	b.n	8002d62 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8002b8e:	4b78      	ldr	r3, [pc, #480]	; (8002d70 <SD_disk_ioctl+0x260>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0e2      	b.n	8002d66 <SD_disk_ioctl+0x256>

    SELECT();
 8002ba0:	f7ff fc12 	bl	80023c8 <SELECT>

    switch (ctrl)
 8002ba4:	79bb      	ldrb	r3, [r7, #6]
 8002ba6:	2b0d      	cmp	r3, #13
 8002ba8:	f200 80cc 	bhi.w	8002d44 <SD_disk_ioctl+0x234>
 8002bac:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <SD_disk_ioctl+0xa4>)
 8002bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb2:	bf00      	nop
 8002bb4:	08002caf 	.word	0x08002caf
 8002bb8:	08002bed 	.word	0x08002bed
 8002bbc:	08002c9f 	.word	0x08002c9f
 8002bc0:	08002d45 	.word	0x08002d45
 8002bc4:	08002d45 	.word	0x08002d45
 8002bc8:	08002d45 	.word	0x08002d45
 8002bcc:	08002d45 	.word	0x08002d45
 8002bd0:	08002d45 	.word	0x08002d45
 8002bd4:	08002d45 	.word	0x08002d45
 8002bd8:	08002d45 	.word	0x08002d45
 8002bdc:	08002d45 	.word	0x08002d45
 8002be0:	08002cc1 	.word	0x08002cc1
 8002be4:	08002ce5 	.word	0x08002ce5
 8002be8:	08002d09 	.word	0x08002d09
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002bec:	2100      	movs	r1, #0
 8002bee:	2049      	movs	r0, #73	; 0x49
 8002bf0:	f7ff fd4e 	bl	8002690 <SD_SendCmd>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 80a8 	bne.w	8002d4c <SD_disk_ioctl+0x23c>
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	2110      	movs	r1, #16
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fcba 	bl	800257c <SD_RxDataBlock>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 809e 	beq.w	8002d4c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8002c10:	7b3b      	ldrb	r3, [r7, #12]
 8002c12:	099b      	lsrs	r3, r3, #6
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10e      	bne.n	8002c38 <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002c1a:	7d7b      	ldrb	r3, [r7, #21]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	7d3b      	ldrb	r3, [r7, #20]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002c2e:	8bfb      	ldrh	r3, [r7, #30]
 8002c30:	029a      	lsls	r2, r3, #10
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e02e      	b.n	8002c96 <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002c38:	7c7b      	ldrb	r3, [r7, #17]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	7dbb      	ldrb	r3, [r7, #22]
 8002c42:	09db      	lsrs	r3, r3, #7
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	7d7b      	ldrb	r3, [r7, #21]
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0306 	and.w	r3, r3, #6
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3302      	adds	r3, #2
 8002c5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002c60:	7d3b      	ldrb	r3, [r7, #20]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	7cbb      	ldrb	r3, [r7, #18]
 8002c76:	029b      	lsls	r3, r3, #10
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002c88:	8bfa      	ldrh	r2, [r7, #30]
 8002c8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c8e:	3b09      	subs	r3, #9
 8002c90:	409a      	lsls	r2, r3
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002c9c:	e056      	b.n	8002d4c <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca4:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002cac:	e055      	b.n	8002d5a <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002cae:	f7ff fbe5 	bl	800247c <SD_ReadyWait>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2bff      	cmp	r3, #255	; 0xff
 8002cb6:	d14b      	bne.n	8002d50 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002cbe:	e047      	b.n	8002d50 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2049      	movs	r0, #73	; 0x49
 8002cc4:	f7ff fce4 	bl	8002690 <SD_SendCmd>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d142      	bne.n	8002d54 <SD_disk_ioctl+0x244>
 8002cce:	2110      	movs	r1, #16
 8002cd0:	6a38      	ldr	r0, [r7, #32]
 8002cd2:	f7ff fc53 	bl	800257c <SD_RxDataBlock>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d03b      	beq.n	8002d54 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002ce2:	e037      	b.n	8002d54 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	204a      	movs	r0, #74	; 0x4a
 8002ce8:	f7ff fcd2 	bl	8002690 <SD_SendCmd>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d132      	bne.n	8002d58 <SD_disk_ioctl+0x248>
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	6a38      	ldr	r0, [r7, #32]
 8002cf6:	f7ff fc41 	bl	800257c <SD_RxDataBlock>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02b      	beq.n	8002d58 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002d06:	e027      	b.n	8002d58 <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002d08:	2100      	movs	r1, #0
 8002d0a:	207a      	movs	r0, #122	; 0x7a
 8002d0c:	f7ff fcc0 	bl	8002690 <SD_SendCmd>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d116      	bne.n	8002d44 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002d1c:	e00b      	b.n	8002d36 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002d1e:	6a3c      	ldr	r4, [r7, #32]
 8002d20:	1c63      	adds	r3, r4, #1
 8002d22:	623b      	str	r3, [r7, #32]
 8002d24:	f7ff fb7e 	bl	8002424 <SPI_RxByte>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002d2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d30:	3301      	adds	r3, #1
 8002d32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002d36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d9ef      	bls.n	8002d1e <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8002d44:	2304      	movs	r3, #4
 8002d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002d4a:	e006      	b.n	8002d5a <SD_disk_ioctl+0x24a>
      break;
 8002d4c:	bf00      	nop
 8002d4e:	e004      	b.n	8002d5a <SD_disk_ioctl+0x24a>
      break;
 8002d50:	bf00      	nop
 8002d52:	e002      	b.n	8002d5a <SD_disk_ioctl+0x24a>
      break;
 8002d54:	bf00      	nop
 8002d56:	e000      	b.n	8002d5a <SD_disk_ioctl+0x24a>
      break;
 8002d58:	bf00      	nop
    }

    DESELECT();
 8002d5a:	f7ff fb3f 	bl	80023dc <DESELECT>
    SPI_RxByte();
 8002d5e:	f7ff fb61 	bl	8002424 <SPI_RxByte>
  }

  return res;
 8002d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	372c      	adds	r7, #44	; 0x2c
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000000 	.word	0x20000000

08002d74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7a:	f107 0314 	add.w	r3, r7, #20
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	4a39      	ldr	r2, [pc, #228]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002d90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d94:	6153      	str	r3, [r2, #20]
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dac:	6153      	str	r3, [r2, #20]
 8002dae:	4b31      	ldr	r3, [pc, #196]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4a2d      	ldr	r2, [pc, #180]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002dc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002dc4:	6153      	str	r3, [r2, #20]
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4a27      	ldr	r2, [pc, #156]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ddc:	6153      	str	r3, [r2, #20]
 8002dde:	4b25      	ldr	r3, [pc, #148]	; (8002e74 <MX_GPIO_Init+0x100>)
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2110      	movs	r1, #16
 8002dee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002df2:	f001 fc67 	bl	80046c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 8002df6:	2201      	movs	r2, #1
 8002df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dfc:	481e      	ldr	r0, [pc, #120]	; (8002e78 <MX_GPIO_Init+0x104>)
 8002dfe:	f001 fc61 	bl	80046c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = power_button_Pin;
 8002e02:	2301      	movs	r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(power_button_GPIO_Port, &GPIO_InitStruct);
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4619      	mov	r1, r3
 8002e16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e1a:	f001 fad9 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8002e1e:	2310      	movs	r3, #16
 8002e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e22:	2301      	movs	r3, #1
 8002e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8002e2e:	f107 0314 	add.w	r3, r7, #20
 8002e32:	4619      	mov	r1, r3
 8002e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e38:	f001 faca 	bl	80043d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_ACC_Pin;
 8002e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_ACC_GPIO_Port, &GPIO_InitStruct);
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	4619      	mov	r1, r3
 8002e54:	4808      	ldr	r0, [pc, #32]	; (8002e78 <MX_GPIO_Init+0x104>)
 8002e56:	f001 fabb 	bl	80043d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	2006      	movs	r0, #6
 8002e60:	f001 fa7f 	bl	8004362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002e64:	2006      	movs	r0, #6
 8002e66:	f001 fa98 	bl	800439a <HAL_NVIC_EnableIRQ>

}
 8002e6a:	bf00      	nop
 8002e6c:	3728      	adds	r7, #40	; 0x28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	48000400 	.word	0x48000400

08002e7c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e82:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <MX_I2C1_Init+0x78>)
 8002e84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002e86:	4b1a      	ldr	r3, [pc, #104]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e88:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <MX_I2C1_Init+0x7c>)
 8002e8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002e8c:	4b18      	ldr	r3, [pc, #96]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e98:	4b15      	ldr	r3, [pc, #84]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002e9e:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ea4:	4b12      	ldr	r3, [pc, #72]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eb0:	4b0f      	ldr	r3, [pc, #60]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002eb6:	480e      	ldr	r0, [pc, #56]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eb8:	f001 fc34 	bl	8004724 <HAL_I2C_Init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ec2:	f000 fce1 	bl	8003888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002eca:	f002 fa95 	bl	80053f8 <HAL_I2CEx_ConfigAnalogFilter>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002ed4:	f000 fcd8 	bl	8003888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <MX_I2C1_Init+0x74>)
 8002edc:	f002 fad7 	bl	800548e <HAL_I2CEx_ConfigDigitalFilter>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002ee6:	f000 fccf 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000278 	.word	0x20000278
 8002ef4:	40005400 	.word	0x40005400
 8002ef8:	2000090e 	.word	0x2000090e

08002efc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f02:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <MX_I2C2_Init+0x78>)
 8002f04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <MX_I2C2_Init+0x7c>)
 8002f0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002f0c:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f12:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f36:	480e      	ldr	r0, [pc, #56]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f38:	f001 fbf4 	bl	8004724 <HAL_I2C_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002f42:	f000 fca1 	bl	8003888 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f46:	2100      	movs	r1, #0
 8002f48:	4809      	ldr	r0, [pc, #36]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f4a:	f002 fa55 	bl	80053f8 <HAL_I2CEx_ConfigAnalogFilter>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002f54:	f000 fc98 	bl	8003888 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_I2C2_Init+0x74>)
 8002f5c:	f002 fa97 	bl	800548e <HAL_I2CEx_ConfigDigitalFilter>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002f66:	f000 fc8f 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200002cc 	.word	0x200002cc
 8002f74:	40005800 	.word	0x40005800
 8002f78:	2000090e 	.word	0x2000090e

08002f7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 031c 	add.w	r3, r7, #28
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a2f      	ldr	r2, [pc, #188]	; (8003058 <HAL_I2C_MspInit+0xdc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d128      	bne.n	8002ff0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	4a2e      	ldr	r2, [pc, #184]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6153      	str	r3, [r2, #20]
 8002faa:	4b2c      	ldr	r3, [pc, #176]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fb6:	23c0      	movs	r3, #192	; 0xc0
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fba:	2312      	movs	r3, #18
 8002fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fca:	f107 031c 	add.w	r3, r7, #28
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4823      	ldr	r0, [pc, #140]	; (8003060 <HAL_I2C_MspInit+0xe4>)
 8002fd2:	f001 f9fd 	bl	80043d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fd6:	4b21      	ldr	r3, [pc, #132]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4a20      	ldr	r2, [pc, #128]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8002fdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fe0:	61d3      	str	r3, [r2, #28]
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002fee:	e02e      	b.n	800304e <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1b      	ldr	r2, [pc, #108]	; (8003064 <HAL_I2C_MspInit+0xe8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d129      	bne.n	800304e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8003000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003004:	6153      	str	r3, [r2, #20]
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003012:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003018:	2312      	movs	r3, #18
 800301a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003020:	2303      	movs	r3, #3
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003024:	2304      	movs	r3, #4
 8003026:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003028:	f107 031c 	add.w	r3, r7, #28
 800302c:	4619      	mov	r1, r3
 800302e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003032:	f001 f9cd 	bl	80043d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	4a08      	ldr	r2, [pc, #32]	; (800305c <HAL_I2C_MspInit+0xe0>)
 800303c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003040:	61d3      	str	r3, [r2, #28]
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_I2C_MspInit+0xe0>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
}
 800304e:	bf00      	nop
 8003050:	3730      	adds	r7, #48	; 0x30
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	40005400 	.word	0x40005400
 800305c:	40021000 	.word	0x40021000
 8003060:	48000400 	.word	0x48000400
 8003064:	40005800 	.word	0x40005800

08003068 <lcd_init>:
#include "lcd_i2c.h"
#include "stm32f3xx_hal.h"
#include "i2c.h"

void lcd_init(struct lcd_disp *lcd)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]

	if(lcd->bl)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 800307e:	2308      	movs	r3, #8
 8003080:	73fb      	strb	r3, [r7, #15]
	}

	HAL_Delay(40);
 8003082:	2028      	movs	r0, #40	; 0x28
 8003084:	f001 f86e 	bl	8004164 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	2130      	movs	r1, #48	; 0x30
 8003090:	4618      	mov	r0, r3
 8003092:	f000 f829 	bl	80030e8 <lcd_write>
	HAL_Delay(5);
 8003096:	2005      	movs	r0, #5
 8003098:	f001 f864 	bl	8004164 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	2130      	movs	r1, #48	; 0x30
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 f81f 	bl	80030e8 <lcd_write>
	HAL_Delay(1);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f001 f85a 	bl	8004164 <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	7bfa      	ldrb	r2, [r7, #15]
 80030b6:	2130      	movs	r1, #48	; 0x30
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f815 	bl	80030e8 <lcd_write>

	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	2102      	movs	r1, #2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f80e 	bl	80030e8 <lcd_write>

	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	210c      	movs	r1, #12
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f807 	bl	80030e8 <lcd_write>

	lcd_clear(lcd);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8e3 	bl	80032a6 <lcd_clear>
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
 80030f2:	460b      	mov	r3, r1
 80030f4:	71bb      	strb	r3, [r7, #6]
 80030f6:	4613      	mov	r3, r2
 80030f8:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 80030fa:	79bb      	ldrb	r3, [r7, #6]
 80030fc:	f023 030f 	bic.w	r3, r3, #15
 8003100:	b2da      	uxtb	r2, r3
 8003102:	797b      	ldrb	r3, [r7, #5]
 8003104:	4313      	orrs	r3, r2
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	b2db      	uxtb	r3, r3
 800310e:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8003110:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003114:	f023 030f 	bic.w	r3, r3, #15
 8003118:	b25a      	sxtb	r2, r3
 800311a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800311e:	4313      	orrs	r3, r2
 8003120:	b25b      	sxtb	r3, r3
 8003122:	b2db      	uxtb	r3, r3
 8003124:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8003126:	79bb      	ldrb	r3, [r7, #6]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	b2da      	uxtb	r2, r3
 800312c:	797b      	ldrb	r3, [r7, #5]
 800312e:	4313      	orrs	r3, r2
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	b2db      	uxtb	r3, r3
 8003138:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 800313a:	79bb      	ldrb	r3, [r7, #6]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	b25a      	sxtb	r2, r3
 8003140:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003144:	4313      	orrs	r3, r2
 8003146:	b25b      	sxtb	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	b299      	uxth	r1, r3
 8003150:	f107 020c 	add.w	r2, r7, #12
 8003154:	2364      	movs	r3, #100	; 0x64
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2304      	movs	r3, #4
 800315a:	4805      	ldr	r0, [pc, #20]	; (8003170 <lcd_write+0x88>)
 800315c:	f001 fb72 	bl	8004844 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8003160:	2005      	movs	r0, #5
 8003162:	f000 ffff 	bl	8004164 <HAL_Delay>
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000278 	.word	0x20000278

08003174 <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	2300      	movs	r3, #0
 8003182:	73bb      	strb	r3, [r7, #14]

	if(lcd->bl)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 800318e:	2308      	movs	r3, #8
 8003190:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f887 	bl	80032a6 <lcd_clear>

	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	2100      	movs	r1, #0
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ffa1 	bl	80030e8 <lcd_write>

	while(lcd->line_1[i])
 80031a6:	e00f      	b.n	80031c8 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->line_1[i], (xpin | RS_PIN));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7818      	ldrb	r0, [r3, #0]
 80031ac:	7bbb      	ldrb	r3, [r7, #14]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	7859      	ldrb	r1, [r3, #1]
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	f7ff ff93 	bl	80030e8 <lcd_write>
		i++;
 80031c2:	7bbb      	ldrb	r3, [r7, #14]
 80031c4:	3301      	adds	r3, #1
 80031c6:	73bb      	strb	r3, [r7, #14]
	while(lcd->line_1[i])
 80031c8:	7bbb      	ldrb	r3, [r7, #14]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	4413      	add	r3, r2
 80031ce:	785b      	ldrb	r3, [r3, #1]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e9      	bne.n	80031a8 <lcd_display+0x34>
	}

	i = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	7bfa      	ldrb	r2, [r7, #15]
 80031de:	21c0      	movs	r1, #192	; 0xc0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff81 	bl	80030e8 <lcd_write>

	while(lcd->line_2[i])
 80031e6:	e00f      	b.n	8003208 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->line_2[i], (xpin | RS_PIN));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7818      	ldrb	r0, [r3, #0]
 80031ec:	7bbb      	ldrb	r3, [r7, #14]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	7d99      	ldrb	r1, [r3, #22]
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	f7ff ff73 	bl	80030e8 <lcd_write>
		i++;
 8003202:	7bbb      	ldrb	r3, [r7, #14]
 8003204:	3301      	adds	r3, #1
 8003206:	73bb      	strb	r3, [r7, #14]
	while(lcd->line_2[i])
 8003208:	7bbb      	ldrb	r3, [r7, #14]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	7d9b      	ldrb	r3, [r3, #22]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1e9      	bne.n	80031e8 <lcd_display+0x74>
	}


	i = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_3, xpin);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	2194      	movs	r1, #148	; 0x94
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff61 	bl	80030e8 <lcd_write>

	while(lcd->line_3[i])
 8003226:	e010      	b.n	800324a <lcd_display+0xd6>
	{
		lcd_write(lcd->addr, lcd->line_3[i], (xpin | RS_PIN));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7818      	ldrb	r0, [r3, #0]
 800322c:	7bbb      	ldrb	r3, [r7, #14]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	f893 102b 	ldrb.w	r1, [r3, #43]	; 0x2b
 8003236:	7bfb      	ldrb	r3, [r7, #15]
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	f7ff ff52 	bl	80030e8 <lcd_write>
		i++;
 8003244:	7bbb      	ldrb	r3, [r7, #14]
 8003246:	3301      	adds	r3, #1
 8003248:	73bb      	strb	r3, [r7, #14]
	while(lcd->line_3[i])
 800324a:	7bbb      	ldrb	r3, [r7, #14]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	4413      	add	r3, r2
 8003250:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e7      	bne.n	8003228 <lcd_display+0xb4>
	}

	i = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_4, xpin);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff3f 	bl	80030e8 <lcd_write>

	while(lcd->line_4[i])
 800326a:	e010      	b.n	800328e <lcd_display+0x11a>
	{
		lcd_write(lcd->addr, lcd->line_4[i], (xpin | RS_PIN));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7818      	ldrb	r0, [r3, #0]
 8003270:	7bbb      	ldrb	r3, [r7, #14]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	f893 1040 	ldrb.w	r1, [r3, #64]	; 0x40
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	f7ff ff30 	bl	80030e8 <lcd_write>
		i++;
 8003288:	7bbb      	ldrb	r3, [r7, #14]
 800328a:	3301      	adds	r3, #1
 800328c:	73bb      	strb	r3, [r7, #14]
	while(lcd->line_4[i])
 800328e:	7bbb      	ldrb	r3, [r7, #14]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e7      	bne.n	800326c <lcd_display+0xf8>
	}
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b084      	sub	sp, #16
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	73fb      	strb	r3, [r7, #15]

	if(lcd->bl)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80032bc:	2308      	movs	r3, #8
 80032be:	73fb      	strb	r3, [r7, #15]
	}

	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff ff0d 	bl	80030e8 <lcd_write>
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <power_on>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void power_on(void)
{
 80032d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032dc:	b089      	sub	sp, #36	; 0x24
 80032de:	af08      	add	r7, sp, #32
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80032e0:	2200      	movs	r2, #0
 80032e2:	493b      	ldr	r1, [pc, #236]	; (80033d0 <power_on+0xf8>)
 80032e4:	483b      	ldr	r0, [pc, #236]	; (80033d4 <power_on+0xfc>)
 80032e6:	f003 fe60 	bl	8006faa <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80032ea:	2200      	movs	r2, #0
 80032ec:	493a      	ldr	r1, [pc, #232]	; (80033d8 <power_on+0x100>)
 80032ee:	4839      	ldr	r0, [pc, #228]	; (80033d4 <power_on+0xfc>)
 80032f0:	f003 feb9 	bl	8007066 <HAL_RTC_GetDate>

	timer = time.Seconds % 5;
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <power_on+0xf8>)
 80032f6:	789a      	ldrb	r2, [r3, #2]
 80032f8:	4b38      	ldr	r3, [pc, #224]	; (80033dc <power_on+0x104>)
 80032fa:	fba3 1302 	umull	r1, r3, r3, r2
 80032fe:	0899      	lsrs	r1, r3, #2
 8003300:	460b      	mov	r3, r1
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <power_on+0x108>)
 800330e:	601a      	str	r2, [r3, #0]

	if(timer == 1)
 8003310:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <power_on+0x108>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d14f      	bne.n	80033b8 <power_on+0xe0>
	{
		BME280_read_print_data();
 8003318:	f7fd fd52 	bl	8000dc0 <BME280_read_print_data>

		sprintf((char *)disp.line_1, "Temperatura: %0.2f C",data.temperature);
 800331c:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <power_on+0x10c>)
 800331e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003322:	4931      	ldr	r1, [pc, #196]	; (80033e8 <power_on+0x110>)
 8003324:	4831      	ldr	r0, [pc, #196]	; (80033ec <power_on+0x114>)
 8003326:	f00a fa79 	bl	800d81c <siprintf>
		sprintf((char *)disp.line_2, "Cisnienie: %0.1f hPa",data.pressure*0.01);
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <power_on+0x10c>)
 800332c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003330:	a325      	add	r3, pc, #148	; (adr r3, 80033c8 <power_on+0xf0>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fd f95f 	bl	80005f8 <__aeabi_dmul>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	492c      	ldr	r1, [pc, #176]	; (80033f0 <power_on+0x118>)
 8003340:	482c      	ldr	r0, [pc, #176]	; (80033f4 <power_on+0x11c>)
 8003342:	f00a fa6b 	bl	800d81c <siprintf>
		sprintf((char *)disp.line_3, "Wilgotnosc: %0.2f %%",data.humidity);
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <power_on+0x10c>)
 8003348:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800334c:	492a      	ldr	r1, [pc, #168]	; (80033f8 <power_on+0x120>)
 800334e:	482b      	ldr	r0, [pc, #172]	; (80033fc <power_on+0x124>)
 8003350:	f00a fa64 	bl	800d81c <siprintf>
		lcd_display(&disp);
 8003354:	482a      	ldr	r0, [pc, #168]	; (8003400 <power_on+0x128>)
 8003356:	f7ff ff0d 	bl	8003174 <lcd_display>

		sprintf(buffer, "%02d:%02d:%02d, Temperatura: %0.2f C, Cisnienie: %0.2f hPa, Wilgotnosc: %0.2f %% \r\n",
				time.Hours, time.Minutes, time.Seconds, data.temperature, data.pressure*0.01, data.humidity);
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <power_on+0xf8>)
 800335c:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer, "%02d:%02d:%02d, Temperatura: %0.2f C, Cisnienie: %0.2f hPa, Wilgotnosc: %0.2f %% \r\n",
 800335e:	4698      	mov	r8, r3
				time.Hours, time.Minutes, time.Seconds, data.temperature, data.pressure*0.01, data.humidity);
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <power_on+0xf8>)
 8003362:	785b      	ldrb	r3, [r3, #1]
		sprintf(buffer, "%02d:%02d:%02d, Temperatura: %0.2f C, Cisnienie: %0.2f hPa, Wilgotnosc: %0.2f %% \r\n",
 8003364:	4699      	mov	r9, r3
				time.Hours, time.Minutes, time.Seconds, data.temperature, data.pressure*0.01, data.humidity);
 8003366:	4b1a      	ldr	r3, [pc, #104]	; (80033d0 <power_on+0xf8>)
 8003368:	789b      	ldrb	r3, [r3, #2]
		sprintf(buffer, "%02d:%02d:%02d, Temperatura: %0.2f C, Cisnienie: %0.2f hPa, Wilgotnosc: %0.2f %% \r\n",
 800336a:	461e      	mov	r6, r3
 800336c:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <power_on+0x10c>)
 800336e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
				time.Hours, time.Minutes, time.Seconds, data.temperature, data.pressure*0.01, data.humidity);
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <power_on+0x10c>)
 8003374:	e9d3 0100 	ldrd	r0, r1, [r3]
		sprintf(buffer, "%02d:%02d:%02d, Temperatura: %0.2f C, Cisnienie: %0.2f hPa, Wilgotnosc: %0.2f %% \r\n",
 8003378:	a313      	add	r3, pc, #76	; (adr r3, 80033c8 <power_on+0xf0>)
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f7fd f93b 	bl	80005f8 <__aeabi_dmul>
 8003382:	4602      	mov	r2, r0
 8003384:	460b      	mov	r3, r1
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <power_on+0x10c>)
 800338c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003390:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003394:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003398:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800339c:	9600      	str	r6, [sp, #0]
 800339e:	464b      	mov	r3, r9
 80033a0:	4642      	mov	r2, r8
 80033a2:	4918      	ldr	r1, [pc, #96]	; (8003404 <power_on+0x12c>)
 80033a4:	4818      	ldr	r0, [pc, #96]	; (8003408 <power_on+0x130>)
 80033a6:	f00a fa39 	bl	800d81c <siprintf>
		write_data_SD(buffer);
 80033aa:	4817      	ldr	r0, [pc, #92]	; (8003408 <power_on+0x130>)
 80033ac:	f000 faba 	bl	8003924 <write_data_SD>
		HAL_Delay(1000);
 80033b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80033b4:	f000 fed6 	bl	8004164 <HAL_Delay>
	}

	acc_data();
 80033b8:	f000 f82a 	bl	8003410 <acc_data>

}
 80033bc:	bf00      	nop
 80033be:	3704      	adds	r7, #4
 80033c0:	46bd      	mov	sp, r7
 80033c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033c6:	bf00      	nop
 80033c8:	47ae147b 	.word	0x47ae147b
 80033cc:	3f847ae1 	.word	0x3f847ae1
 80033d0:	200003e0 	.word	0x200003e0
 80033d4:	20002480 	.word	0x20002480
 80033d8:	200003f4 	.word	0x200003f4
 80033dc:	cccccccd 	.word	0xcccccccd
 80033e0:	2000041c 	.word	0x2000041c
 80033e4:	20000250 	.word	0x20000250
 80033e8:	0801193c 	.word	0x0801193c
 80033ec:	20000321 	.word	0x20000321
 80033f0:	08011954 	.word	0x08011954
 80033f4:	20000336 	.word	0x20000336
 80033f8:	0801196c 	.word	0x0801196c
 80033fc:	2000034b 	.word	0x2000034b
 8003400:	20000320 	.word	0x20000320
 8003404:	08011984 	.word	0x08011984
 8003408:	20000378 	.word	0x20000378
 800340c:	00000000 	.word	0x00000000

08003410 <acc_data>:

void acc_data(void)
{
 8003410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003412:	ed2d 8b02 	vpush	{d8}
 8003416:	b085      	sub	sp, #20
 8003418:	af04      	add	r7, sp, #16
	acc_read(0x32);
 800341a:	2032      	movs	r0, #50	; 0x32
 800341c:	f000 f922 	bl	8003664 <acc_read>
	axis.X_axis = ((rx_data[1]<<8) | rx_data[0]);
 8003420:	4b65      	ldr	r3, [pc, #404]	; (80035b8 <acc_data+0x1a8>)
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	b21a      	sxth	r2, r3
 8003428:	4b63      	ldr	r3, [pc, #396]	; (80035b8 <acc_data+0x1a8>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b21b      	sxth	r3, r3
 800342e:	4313      	orrs	r3, r2
 8003430:	b21a      	sxth	r2, r3
 8003432:	4b62      	ldr	r3, [pc, #392]	; (80035bc <acc_data+0x1ac>)
 8003434:	801a      	strh	r2, [r3, #0]
	axis.Y_axis = ((rx_data[3]<<8) | rx_data[2]);
 8003436:	4b60      	ldr	r3, [pc, #384]	; (80035b8 <acc_data+0x1a8>)
 8003438:	78db      	ldrb	r3, [r3, #3]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	b21a      	sxth	r2, r3
 800343e:	4b5e      	ldr	r3, [pc, #376]	; (80035b8 <acc_data+0x1a8>)
 8003440:	789b      	ldrb	r3, [r3, #2]
 8003442:	b21b      	sxth	r3, r3
 8003444:	4313      	orrs	r3, r2
 8003446:	b21a      	sxth	r2, r3
 8003448:	4b5c      	ldr	r3, [pc, #368]	; (80035bc <acc_data+0x1ac>)
 800344a:	805a      	strh	r2, [r3, #2]
	axis.Z_axis = ((rx_data[5]<<8) | rx_data[4]);
 800344c:	4b5a      	ldr	r3, [pc, #360]	; (80035b8 <acc_data+0x1a8>)
 800344e:	795b      	ldrb	r3, [r3, #5]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	b21a      	sxth	r2, r3
 8003454:	4b58      	ldr	r3, [pc, #352]	; (80035b8 <acc_data+0x1a8>)
 8003456:	791b      	ldrb	r3, [r3, #4]
 8003458:	b21b      	sxth	r3, r3
 800345a:	4313      	orrs	r3, r2
 800345c:	b21a      	sxth	r2, r3
 800345e:	4b57      	ldr	r3, [pc, #348]	; (80035bc <acc_data+0x1ac>)
 8003460:	809a      	strh	r2, [r3, #4]

	axis_g.X_g = axis.X_axis*.0078;
 8003462:	4b56      	ldr	r3, [pc, #344]	; (80035bc <acc_data+0x1ac>)
 8003464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fd f85b 	bl	8000524 <__aeabi_i2d>
 800346e:	a350      	add	r3, pc, #320	; (adr r3, 80035b0 <acc_data+0x1a0>)
 8003470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003474:	f7fd f8c0 	bl	80005f8 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	f7fd fbb2 	bl	8000be8 <__aeabi_d2f>
 8003484:	4603      	mov	r3, r0
 8003486:	4a4e      	ldr	r2, [pc, #312]	; (80035c0 <acc_data+0x1b0>)
 8003488:	6013      	str	r3, [r2, #0]
	axis_g.Y_g = axis.Y_axis*.0078;
 800348a:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <acc_data+0x1ac>)
 800348c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f847 	bl	8000524 <__aeabi_i2d>
 8003496:	a346      	add	r3, pc, #280	; (adr r3, 80035b0 <acc_data+0x1a0>)
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f7fd f8ac 	bl	80005f8 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	f7fd fb9e 	bl	8000be8 <__aeabi_d2f>
 80034ac:	4603      	mov	r3, r0
 80034ae:	4a44      	ldr	r2, [pc, #272]	; (80035c0 <acc_data+0x1b0>)
 80034b0:	6053      	str	r3, [r2, #4]
	axis_g.Z_g = axis.Z_axis*.0078;
 80034b2:	4b42      	ldr	r3, [pc, #264]	; (80035bc <acc_data+0x1ac>)
 80034b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fd f833 	bl	8000524 <__aeabi_i2d>
 80034be:	a33c      	add	r3, pc, #240	; (adr r3, 80035b0 <acc_data+0x1a0>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f7fd f898 	bl	80005f8 <__aeabi_dmul>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd fb8a 	bl	8000be8 <__aeabi_d2f>
 80034d4:	4603      	mov	r3, r0
 80034d6:	4a3a      	ldr	r2, [pc, #232]	; (80035c0 <acc_data+0x1b0>)
 80034d8:	6093      	str	r3, [r2, #8]
	a_axis = powf(axis_g.X_g,2) + powf(axis_g.Y_g,2) + powf(axis_g.Z_g,2);
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <acc_data+0x1b0>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80034e4:	eeb0 0a67 	vmov.f32	s0, s15
 80034e8:	f00d fe36 	bl	8011158 <powf>
 80034ec:	eeb0 8a40 	vmov.f32	s16, s0
 80034f0:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <acc_data+0x1b0>)
 80034f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80034f6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80034fa:	eeb0 0a67 	vmov.f32	s0, s15
 80034fe:	f00d fe2b 	bl	8011158 <powf>
 8003502:	eef0 7a40 	vmov.f32	s15, s0
 8003506:	ee38 8a27 	vadd.f32	s16, s16, s15
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <acc_data+0x1b0>)
 800350c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003510:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003514:	eeb0 0a67 	vmov.f32	s0, s15
 8003518:	f00d fe1e 	bl	8011158 <powf>
 800351c:	eef0 7a40 	vmov.f32	s15, s0
 8003520:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003524:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <acc_data+0x1b4>)
 8003526:	edc3 7a00 	vstr	s15, [r3]
	a_total = powf(a_axis, 0.5) - 1;
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <acc_data+0x1b4>)
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003534:	eeb0 0a67 	vmov.f32	s0, s15
 8003538:	f00d fe0e 	bl	8011158 <powf>
 800353c:	eef0 7a40 	vmov.f32	s15, s0
 8003540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003544:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003548:	4b1f      	ldr	r3, [pc, #124]	; (80035c8 <acc_data+0x1b8>)
 800354a:	edc3 7a00 	vstr	s15, [r3]

	if(a_total > 1)
 800354e:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <acc_data+0x1b8>)
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003560:	dd1b      	ble.n	800359a <acc_data+0x18a>
	{
	sprintf(buffer, "%02d:%02d:%02d, Nastapilo uderzenie z przyspieszeniem: %0.2fg \r\n",
			time.Hours, time.Minutes, time.Seconds, a_total);
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <acc_data+0x1bc>)
 8003564:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer, "%02d:%02d:%02d, Nastapilo uderzenie z przyspieszeniem: %0.2fg \r\n",
 8003566:	461d      	mov	r5, r3
			time.Hours, time.Minutes, time.Seconds, a_total);
 8003568:	4b18      	ldr	r3, [pc, #96]	; (80035cc <acc_data+0x1bc>)
 800356a:	785b      	ldrb	r3, [r3, #1]
	sprintf(buffer, "%02d:%02d:%02d, Nastapilo uderzenie z przyspieszeniem: %0.2fg \r\n",
 800356c:	461e      	mov	r6, r3
			time.Hours, time.Minutes, time.Seconds, a_total);
 800356e:	4b17      	ldr	r3, [pc, #92]	; (80035cc <acc_data+0x1bc>)
 8003570:	789b      	ldrb	r3, [r3, #2]
	sprintf(buffer, "%02d:%02d:%02d, Nastapilo uderzenie z przyspieszeniem: %0.2fg \r\n",
 8003572:	461c      	mov	r4, r3
 8003574:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <acc_data+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fc ffe5 	bl	8000548 <__aeabi_f2d>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003586:	9400      	str	r4, [sp, #0]
 8003588:	4633      	mov	r3, r6
 800358a:	462a      	mov	r2, r5
 800358c:	4910      	ldr	r1, [pc, #64]	; (80035d0 <acc_data+0x1c0>)
 800358e:	4811      	ldr	r0, [pc, #68]	; (80035d4 <acc_data+0x1c4>)
 8003590:	f00a f944 	bl	800d81c <siprintf>
	write_data_SD(buffer);
 8003594:	480f      	ldr	r0, [pc, #60]	; (80035d4 <acc_data+0x1c4>)
 8003596:	f000 f9c5 	bl	8003924 <write_data_SD>
	}
	HAL_Delay(100);
 800359a:	2064      	movs	r0, #100	; 0x64
 800359c:	f000 fde2 	bl	8004164 <HAL_Delay>
}
 80035a0:	bf00      	nop
 80035a2:	3704      	adds	r7, #4
 80035a4:	46bd      	mov	sp, r7
 80035a6:	ecbd 8b02 	vpop	{d8}
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ac:	f3af 8000 	nop.w
 80035b0:	8e8a71de 	.word	0x8e8a71de
 80035b4:	3f7ff2e4 	.word	0x3f7ff2e4
 80035b8:	200003f8 	.word	0x200003f8
 80035bc:	20000400 	.word	0x20000400
 80035c0:	20000408 	.word	0x20000408
 80035c4:	20000414 	.word	0x20000414
 80035c8:	20000418 	.word	0x20000418
 80035cc:	200003e0 	.word	0x200003e0
 80035d0:	080119d8 	.word	0x080119d8
 80035d4:	20000378 	.word	0x20000378

080035d8 <power_off>:

void power_off(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
	  lcd_clear(&disp);
 80035de:	480a      	ldr	r0, [pc, #40]	; (8003608 <power_off+0x30>)
 80035e0:	f7ff fe61 	bl	80032a6 <lcd_clear>
	  RTC_TimeTypeDef new_time = {0};
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	611a      	str	r2, [r3, #16]
	  HAL_RTC_SetTime(&hrtc, &new_time, RTC_FORMAT_BIN);
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	2200      	movs	r2, #0
 80035f6:	4619      	mov	r1, r3
 80035f8:	4804      	ldr	r0, [pc, #16]	; (800360c <power_off+0x34>)
 80035fa:	f003 fc3c 	bl	8006e76 <HAL_RTC_SetTime>
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000320 	.word	0x20000320
 800360c:	20002480 	.word	0x20002480

08003610 <acc_write>:

void acc_write(uint8_t addr, uint8_t value)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	460a      	mov	r2, r1
 800361a:	71fb      	strb	r3, [r7, #7]
 800361c:	4613      	mov	r3, r2
 800361e:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = addr | 0x40;
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003626:	b2db      	uxtb	r3, r3
 8003628:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800362a:	79bb      	ldrb	r3, [r7, #6]
 800362c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 800362e:	2200      	movs	r2, #0
 8003630:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003634:	4809      	ldr	r0, [pc, #36]	; (800365c <acc_write+0x4c>)
 8003636:	f001 f845 	bl	80046c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, data, 2, 100);
 800363a:	f107 010c 	add.w	r1, r7, #12
 800363e:	2364      	movs	r3, #100	; 0x64
 8003640:	2202      	movs	r2, #2
 8003642:	4807      	ldr	r0, [pc, #28]	; (8003660 <acc_write+0x50>)
 8003644:	f003 fec7 	bl	80073d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 8003648:	2201      	movs	r2, #1
 800364a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800364e:	4803      	ldr	r0, [pc, #12]	; (800365c <acc_write+0x4c>)
 8003650:	f001 f838 	bl	80046c4 <HAL_GPIO_WritePin>
}
 8003654:	bf00      	nop
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	48000400 	.word	0x48000400
 8003660:	20002504 	.word	0x20002504

08003664 <acc_read>:

void acc_read(uint8_t addr)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
	addr |= 0x80;
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003674:	b2db      	uxtb	r3, r3
 8003676:	71fb      	strb	r3, [r7, #7]
	addr |= 0x40;
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800367e:	b2db      	uxtb	r3, r3
 8003680:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_RESET);
 8003682:	2200      	movs	r2, #0
 8003684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003688:	480c      	ldr	r0, [pc, #48]	; (80036bc <acc_read+0x58>)
 800368a:	f001 f81b 	bl	80046c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800368e:	1df9      	adds	r1, r7, #7
 8003690:	2364      	movs	r3, #100	; 0x64
 8003692:	2201      	movs	r2, #1
 8003694:	480a      	ldr	r0, [pc, #40]	; (80036c0 <acc_read+0x5c>)
 8003696:	f003 fe9e 	bl	80073d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, rx_data, 6, 100);
 800369a:	2364      	movs	r3, #100	; 0x64
 800369c:	2206      	movs	r2, #6
 800369e:	4909      	ldr	r1, [pc, #36]	; (80036c4 <acc_read+0x60>)
 80036a0:	4807      	ldr	r0, [pc, #28]	; (80036c0 <acc_read+0x5c>)
 80036a2:	f004 f80d 	bl	80076c0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_ACC_GPIO_Port, CS_ACC_Pin, GPIO_PIN_SET);
 80036a6:	2201      	movs	r2, #1
 80036a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036ac:	4803      	ldr	r0, [pc, #12]	; (80036bc <acc_read+0x58>)
 80036ae:	f001 f809 	bl	80046c4 <HAL_GPIO_WritePin>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	48000400 	.word	0x48000400
 80036c0:	20002504 	.word	0x20002504
 80036c4:	200003f8 	.word	0x200003f8

080036c8 <acc_init>:

void acc_init(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
	acc_write(0x31, 0x01);
 80036cc:	2101      	movs	r1, #1
 80036ce:	2031      	movs	r0, #49	; 0x31
 80036d0:	f7ff ff9e 	bl	8003610 <acc_write>
	acc_write(0x2d, 0x00);
 80036d4:	2100      	movs	r1, #0
 80036d6:	202d      	movs	r0, #45	; 0x2d
 80036d8:	f7ff ff9a 	bl	8003610 <acc_write>
	acc_write(0x2d, 0x08);
 80036dc:	2108      	movs	r1, #8
 80036de:	202d      	movs	r0, #45	; 0x2d
 80036e0:	f7ff ff96 	bl	8003610 <acc_write>
}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036ec:	f000 fcd4 	bl	8004098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036f0:	f000 f842 	bl	8003778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036f4:	f7ff fb3e 	bl	8002d74 <MX_GPIO_Init>
  MX_I2C1_Init();
 80036f8:	f7ff fbc0 	bl	8002e7c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80036fc:	f000 fc2e 	bl	8003f5c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8003700:	f7ff fbfc 	bl	8002efc <MX_I2C2_Init>
  MX_FATFS_Init();
 8003704:	f005 f9c2 	bl	8008a8c <MX_FATFS_Init>
  MX_SPI1_Init();
 8003708:	f000 f9d2 	bl	8003ab0 <MX_SPI1_Init>
  MX_RTC_Init();
 800370c:	f000 f984 	bl	8003a18 <MX_RTC_Init>
  MX_SPI2_Init();
 8003710:	f000 fa0c 	bl	8003b2c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  BME_280_init();
 8003714:	f7fd faee 	bl	8000cf4 <BME_280_init>
  acc_init();
 8003718:	f7ff ffd6 	bl	80036c8 <acc_init>



  disp.addr = (0x27 << 1);
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <main+0x88>)
 800371e:	224e      	movs	r2, #78	; 0x4e
 8003720:	701a      	strb	r2, [r3, #0]
  disp.bl = true;
 8003722:	4b13      	ldr	r3, [pc, #76]	; (8003770 <main+0x88>)
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
  lcd_init(&disp);
 800372a:	4811      	ldr	r0, [pc, #68]	; (8003770 <main+0x88>)
 800372c:	f7ff fc9c 	bl	8003068 <lcd_init>

  HAL_Delay(500);
 8003730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003734:	f000 fd16 	bl	8004164 <HAL_Delay>
  SD_disk_initialize(0);
 8003738:	2000      	movs	r0, #0
 800373a:	f7fe fffb 	bl	8002734 <SD_disk_initialize>
  HAL_Delay(500);
 800373e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003742:	f000 fd0f 	bl	8004164 <HAL_Delay>

  plik_SD_init();
 8003746:	f000 f8a5 	bl	8003894 <plik_SD_init>
  HAL_Delay(200);
 800374a:	20c8      	movs	r0, #200	; 0xc8
 800374c:	f000 fd0a 	bl	8004164 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch(push_counter)
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <main+0x8c>)
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <main+0x78>
 800375a:	2b01      	cmp	r3, #1
 800375c:	d003      	beq.n	8003766 <main+0x7e>
		  break;
	  case 1:
		  power_on();
		  break;
	  default:
		  break;
 800375e:	e005      	b.n	800376c <main+0x84>
		  power_off();
 8003760:	f7ff ff3a 	bl	80035d8 <power_off>
		  break;
 8003764:	e002      	b.n	800376c <main+0x84>
		  power_on();
 8003766:	f7ff fdb7 	bl	80032d8 <power_on>
		  break;
 800376a:	bf00      	nop
	  switch(push_counter)
 800376c:	e7f0      	b.n	8003750 <main+0x68>
 800376e:	bf00      	nop
 8003770:	20000320 	.word	0x20000320
 8003774:	200003dc 	.word	0x200003dc

08003778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b09e      	sub	sp, #120	; 0x78
 800377c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800377e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003782:	2228      	movs	r2, #40	; 0x28
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f00a f940 	bl	800da0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800378c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800379c:	463b      	mov	r3, r7
 800379e:	223c      	movs	r2, #60	; 0x3c
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f00a f932 	bl	800da0c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80037a8:	230b      	movs	r3, #11
 80037aa:	653b      	str	r3, [r7, #80]	; 0x50
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80037b2:	2300      	movs	r3, #0
 80037b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037b6:	2301      	movs	r3, #1
 80037b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037ba:	2310      	movs	r3, #16
 80037bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80037be:	2301      	movs	r3, #1
 80037c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037c2:	2302      	movs	r3, #2
 80037c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ca:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80037d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 fea6 	bl	8005528 <HAL_RCC_OscConfig>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80037e2:	f000 f851 	bl	8003888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037e6:	230f      	movs	r3, #15
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037ea:	2302      	movs	r3, #2
 80037ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037ee:	2300      	movs	r3, #0
 80037f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037f8:	2300      	movs	r3, #0
 80037fa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003800:	2102      	movs	r1, #2
 8003802:	4618      	mov	r0, r3
 8003804:	f002 fece 	bl	80065a4 <HAL_RCC_ClockConfig>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800380e:	f000 f83b 	bl	8003888 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8003812:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <SystemClock_Config+0xcc>)
 8003814:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003826:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003828:	463b      	mov	r3, r7
 800382a:	4618      	mov	r0, r3
 800382c:	f003 f8f0 	bl	8006a10 <HAL_RCCEx_PeriphCLKConfig>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003836:	f000 f827 	bl	8003888 <Error_Handler>
  }
}
 800383a:	bf00      	nop
 800383c:	3778      	adds	r7, #120	; 0x78
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	00010061 	.word	0x00010061

08003848 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == power_button_Pin)
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d10e      	bne.n	8003876 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		push_counter ++;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_GPIO_EXTI_Callback+0x3c>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	3301      	adds	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003864:	801a      	strh	r2, [r3, #0]
		if(push_counter >= 2)
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003868:	881b      	ldrh	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	d902      	bls.n	8003876 <HAL_GPIO_EXTI_Callback+0x2e>
		{
			push_counter = 0;
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003872:	2200      	movs	r2, #0
 8003874:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	200003dc 	.word	0x200003dc

08003888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800388c:	b672      	cpsid	i
}
 800388e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003890:	e7fe      	b.n	8003890 <Error_Handler+0x8>
	...

08003894 <plik_SD_init>:
char buff[100];



extern void plik_SD_init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0

	fresult = f_mount(&fs, "/", 1);
 8003898:	2201      	movs	r2, #1
 800389a:	491a      	ldr	r1, [pc, #104]	; (8003904 <plik_SD_init+0x70>)
 800389c:	481a      	ldr	r0, [pc, #104]	; (8003908 <plik_SD_init+0x74>)
 800389e:	f007 fddd 	bl	800b45c <f_mount>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b19      	ldr	r3, [pc, #100]	; (800390c <plik_SD_init+0x78>)
 80038a8:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <plik_SD_init+0x78>)
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <plik_SD_init+0x28>
	{
	  	printf("Error in mounting SD CARD\r\n");
 80038b2:	4817      	ldr	r0, [pc, #92]	; (8003910 <plik_SD_init+0x7c>)
 80038b4:	f009 ffaa 	bl	800d80c <puts>
	  	Error_Handler();
 80038b8:	f7ff ffe6 	bl	8003888 <Error_Handler>
	}


  	fresult = f_open(&fil, "BME_280/Data.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80038bc:	2212      	movs	r2, #18
 80038be:	4915      	ldr	r1, [pc, #84]	; (8003914 <plik_SD_init+0x80>)
 80038c0:	4815      	ldr	r0, [pc, #84]	; (8003918 <plik_SD_init+0x84>)
 80038c2:	f007 fe15 	bl	800b4f0 <f_open>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <plik_SD_init+0x78>)
 80038cc:	701a      	strb	r2, [r3, #0]
  	if(fresult != FR_OK)
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <plik_SD_init+0x78>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d004      	beq.n	80038e0 <plik_SD_init+0x4c>
  	{
  		printf("Error in creating a file\r\n");
 80038d6:	4811      	ldr	r0, [pc, #68]	; (800391c <plik_SD_init+0x88>)
 80038d8:	f009 ff98 	bl	800d80c <puts>
  		Error_Handler();
 80038dc:	f7ff ffd4 	bl	8003888 <Error_Handler>
  	}

	fresult = f_close(&fil);
 80038e0:	480d      	ldr	r0, [pc, #52]	; (8003918 <plik_SD_init+0x84>)
 80038e2:	f008 fc24 	bl	800c12e <f_close>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <plik_SD_init+0x78>)
 80038ec:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <plik_SD_init+0x78>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d004      	beq.n	8003900 <plik_SD_init+0x6c>
	{
		printf("Error in closing a file\r\n");
 80038f6:	480a      	ldr	r0, [pc, #40]	; (8003920 <plik_SD_init+0x8c>)
 80038f8:	f009 ff88 	bl	800d80c <puts>
		Error_Handler();
 80038fc:	f7ff ffc4 	bl	8003888 <Error_Handler>
	}
}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}
 8003904:	08011a1c 	.word	0x08011a1c
 8003908:	20000420 	.word	0x20000420
 800390c:	2000247c 	.word	0x2000247c
 8003910:	08011a20 	.word	0x08011a20
 8003914:	08011a3c 	.word	0x08011a3c
 8003918:	20001450 	.word	0x20001450
 800391c:	08011a50 	.word	0x08011a50
 8003920:	08011a6c 	.word	0x08011a6c

08003924 <write_data_SD>:

extern void write_data_SD(const char *buff)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	UINT bytes_written;

  	fresult = f_open(&fil, "BME_280/Data.txt", FA_OPEN_ALWAYS | FA_WRITE);
 800392c:	2212      	movs	r2, #18
 800392e:	492a      	ldr	r1, [pc, #168]	; (80039d8 <write_data_SD+0xb4>)
 8003930:	482a      	ldr	r0, [pc, #168]	; (80039dc <write_data_SD+0xb8>)
 8003932:	f007 fddd 	bl	800b4f0 <f_open>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	4b29      	ldr	r3, [pc, #164]	; (80039e0 <write_data_SD+0xbc>)
 800393c:	701a      	strb	r2, [r3, #0]
  	if(fresult != FR_OK)
 800393e:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <write_data_SD+0xbc>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d004      	beq.n	8003950 <write_data_SD+0x2c>
  	{
  		printf("Error in opening a file\r\n");
 8003946:	4827      	ldr	r0, [pc, #156]	; (80039e4 <write_data_SD+0xc0>)
 8003948:	f009 ff60 	bl	800d80c <puts>
  		Error_Handler();
 800394c:	f7ff ff9c 	bl	8003888 <Error_Handler>
  	}

  	fresult = f_lseek(&fil, f_size(&fil));
 8003950:	4b22      	ldr	r3, [pc, #136]	; (80039dc <write_data_SD+0xb8>)
 8003952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4619      	mov	r1, r3
 800395a:	4820      	ldr	r0, [pc, #128]	; (80039dc <write_data_SD+0xb8>)
 800395c:	f008 fc12 	bl	800c184 <f_lseek>
 8003960:	4603      	mov	r3, r0
 8003962:	461a      	mov	r2, r3
 8003964:	4b1e      	ldr	r3, [pc, #120]	; (80039e0 <write_data_SD+0xbc>)
 8003966:	701a      	strb	r2, [r3, #0]
  	if(fresult != FR_OK)
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <write_data_SD+0xbc>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d004      	beq.n	800397a <write_data_SD+0x56>
  	{
  		printf("Error in moving cursor to an end of the file\r\n");
 8003970:	481d      	ldr	r0, [pc, #116]	; (80039e8 <write_data_SD+0xc4>)
 8003972:	f009 ff4b 	bl	800d80c <puts>
  		Error_Handler();
 8003976:	f7ff ff87 	bl	8003888 <Error_Handler>
  	}

	fresult = f_write(&fil, buff, strlen(buff), &bytes_written);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fc fc78 	bl	8000270 <strlen>
 8003980:	4602      	mov	r2, r0
 8003982:	f107 030c 	add.w	r3, r7, #12
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4814      	ldr	r0, [pc, #80]	; (80039dc <write_data_SD+0xb8>)
 800398a:	f008 f8c9 	bl	800bb20 <f_write>
 800398e:	4603      	mov	r3, r0
 8003990:	461a      	mov	r2, r3
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <write_data_SD+0xbc>)
 8003994:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <write_data_SD+0xbc>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d004      	beq.n	80039a8 <write_data_SD+0x84>
	{
		printf("Error in writing data to file\r\n");
 800399e:	4813      	ldr	r0, [pc, #76]	; (80039ec <write_data_SD+0xc8>)
 80039a0:	f009 ff34 	bl	800d80c <puts>
		Error_Handler();
 80039a4:	f7ff ff70 	bl	8003888 <Error_Handler>
	}

	fresult = f_close(&fil);
 80039a8:	480c      	ldr	r0, [pc, #48]	; (80039dc <write_data_SD+0xb8>)
 80039aa:	f008 fbc0 	bl	800c12e <f_close>
 80039ae:	4603      	mov	r3, r0
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <write_data_SD+0xbc>)
 80039b4:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK)
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <write_data_SD+0xbc>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <write_data_SD+0xa4>
	{
		printf("Error in closing a file\r\n");
 80039be:	480c      	ldr	r0, [pc, #48]	; (80039f0 <write_data_SD+0xcc>)
 80039c0:	f009 ff24 	bl	800d80c <puts>
		Error_Handler();
 80039c4:	f7ff ff60 	bl	8003888 <Error_Handler>
	}
	HAL_Delay(100);
 80039c8:	2064      	movs	r0, #100	; 0x64
 80039ca:	f000 fbcb 	bl	8004164 <HAL_Delay>
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08011a3c 	.word	0x08011a3c
 80039dc:	20001450 	.word	0x20001450
 80039e0:	2000247c 	.word	0x2000247c
 80039e4:	08011a88 	.word	0x08011a88
 80039e8:	08011aa4 	.word	0x08011aa4
 80039ec:	08011ad4 	.word	0x08011ad4
 80039f0:	08011a6c 	.word	0x08011a6c

080039f4 <__io_putchar>:
 */

#include "usart.h"

int __io_putchar(int ch)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 1000);
 80039fc:	1d39      	adds	r1, r7, #4
 80039fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a02:	2201      	movs	r2, #1
 8003a04:	4803      	ldr	r0, [pc, #12]	; (8003a14 <__io_putchar+0x20>)
 8003a06:	f004 fbcd 	bl	80081a4 <HAL_UART_Transmit>

	return ch;
 8003a0a:	687b      	ldr	r3, [r7, #4]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20002570 	.word	0x20002570

08003a18 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a1e:	4a10      	ldr	r2, [pc, #64]	; (8003a60 <MX_RTC_Init+0x48>)
 8003a20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a22:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a2a:	227f      	movs	r2, #127	; 0x7f
 8003a2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a30:	22ff      	movs	r2, #255	; 0xff
 8003a32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <MX_RTC_Init+0x44>)
 8003a48:	f003 f992 	bl	8006d70 <HAL_RTC_Init>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003a52:	f7ff ff19 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20002480 	.word	0x20002480
 8003a60:	40002800 	.word	0x40002800

08003a64 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a0d      	ldr	r2, [pc, #52]	; (8003aa8 <HAL_RTC_MspInit+0x44>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d111      	bne.n	8003a9a <HAL_RTC_MspInit+0x36>
 8003a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a84:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b07      	ldr	r3, [pc, #28]	; (8003aac <HAL_RTC_MspInit+0x48>)
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	461a      	mov	r2, r3
 8003a96:	2301      	movs	r3, #1
 8003a98:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40002800 	.word	0x40002800
 8003aac:	10908100 	.word	0x10908100

08003ab0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ab4:	4b1b      	ldr	r3, [pc, #108]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003ab6:	4a1c      	ldr	r2, [pc, #112]	; (8003b28 <MX_SPI1_Init+0x78>)
 8003ab8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003aba:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ac0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ac8:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003aca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003ace:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ad0:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ad6:	4b13      	ldr	r3, [pc, #76]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ae2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003afe:	2207      	movs	r2, #7
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003b0a:	2208      	movs	r2, #8
 8003b0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b0e:	4805      	ldr	r0, [pc, #20]	; (8003b24 <MX_SPI1_Init+0x74>)
 8003b10:	f003 fbb6 	bl	8007280 <HAL_SPI_Init>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003b1a:	f7ff feb5 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200024a0 	.word	0x200024a0
 8003b28:	40013000 	.word	0x40013000

08003b2c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b32:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <MX_SPI2_Init+0x78>)
 8003b34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b44:	4b16      	ldr	r3, [pc, #88]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003b4c:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b4e:	2202      	movs	r2, #2
 8003b50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b62:	2220      	movs	r2, #32
 8003b64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b66:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b7a:	2207      	movs	r2, #7
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003b8a:	4805      	ldr	r0, [pc, #20]	; (8003ba0 <MX_SPI2_Init+0x74>)
 8003b8c:	f003 fb78 	bl	8007280 <HAL_SPI_Init>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003b96:	f7ff fe77 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20002504 	.word	0x20002504
 8003ba4:	40003800 	.word	0x40003800

08003ba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	; 0x30
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2f      	ldr	r2, [pc, #188]	; (8003c84 <HAL_SPI_MspInit+0xdc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d129      	bne.n	8003c1e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003bca:	4b2f      	ldr	r3, [pc, #188]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	4a2e      	ldr	r2, [pc, #184]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003bd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bd4:	6193      	str	r3, [r2, #24]
 8003bd6:	4b2c      	ldr	r3, [pc, #176]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be2:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	4a28      	ldr	r2, [pc, #160]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bec:	6153      	str	r3, [r2, #20]
 8003bee:	4b26      	ldr	r3, [pc, #152]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003bfa:	23e0      	movs	r3, #224	; 0xe0
 8003bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c06:	2303      	movs	r3, #3
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c0a:	2305      	movs	r3, #5
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0e:	f107 031c 	add.w	r3, r7, #28
 8003c12:	4619      	mov	r1, r3
 8003c14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c18:	f000 fbda 	bl	80043d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003c1c:	e02d      	b.n	8003c7a <HAL_SPI_MspInit+0xd2>
  else if(spiHandle->Instance==SPI2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a1a      	ldr	r2, [pc, #104]	; (8003c8c <HAL_SPI_MspInit+0xe4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d128      	bne.n	8003c7a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003c28:	4b17      	ldr	r3, [pc, #92]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c32:	61d3      	str	r3, [r2, #28]
 8003c34:	4b14      	ldr	r3, [pc, #80]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c40:	4b11      	ldr	r3, [pc, #68]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003c46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4a:	6153      	str	r3, [r2, #20]
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <HAL_SPI_MspInit+0xe0>)
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003c58:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c66:	2303      	movs	r3, #3
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c6a:	2305      	movs	r3, #5
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c6e:	f107 031c 	add.w	r3, r7, #28
 8003c72:	4619      	mov	r1, r3
 8003c74:	4806      	ldr	r0, [pc, #24]	; (8003c90 <HAL_SPI_MspInit+0xe8>)
 8003c76:	f000 fbab 	bl	80043d0 <HAL_GPIO_Init>
}
 8003c7a:	bf00      	nop
 8003c7c:	3730      	adds	r7, #48	; 0x30
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40013000 	.word	0x40013000
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40003800 	.word	0x40003800
 8003c90:	48000400 	.word	0x48000400

08003c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9a:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_MspInit+0x44>)
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	4a0e      	ldr	r2, [pc, #56]	; (8003cd8 <HAL_MspInit+0x44>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6193      	str	r3, [r2, #24]
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_MspInit+0x44>)
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_MspInit+0x44>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	4a08      	ldr	r2, [pc, #32]	; (8003cd8 <HAL_MspInit+0x44>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbc:	61d3      	str	r3, [r2, #28]
 8003cbe:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_MspInit+0x44>)
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40021000 	.word	0x40021000

08003cdc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <SDTimer_Handler+0x40>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <SDTimer_Handler+0x1c>
	{
		Timer1--;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <SDTimer_Handler+0x40>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <SDTimer_Handler+0x40>)
 8003cf6:	701a      	strb	r2, [r3, #0]
	}

	if(Timer2 > 0)
 8003cf8:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <SDTimer_Handler+0x44>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <SDTimer_Handler+0x34>
	{
		Timer2--;
 8003d02:	4b07      	ldr	r3, [pc, #28]	; (8003d20 <SDTimer_Handler+0x44>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	4b04      	ldr	r3, [pc, #16]	; (8003d20 <SDTimer_Handler+0x44>)
 8003d0e:	701a      	strb	r2, [r3, #0]
	}
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20002569 	.word	0x20002569
 8003d20:	2000256a 	.word	0x2000256a

08003d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d28:	e7fe      	b.n	8003d28 <NMI_Handler+0x4>

08003d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d2e:	e7fe      	b.n	8003d2e <HardFault_Handler+0x4>

08003d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d34:	e7fe      	b.n	8003d34 <MemManage_Handler+0x4>

08003d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d36:	b480      	push	{r7}
 8003d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d3a:	e7fe      	b.n	8003d3a <BusFault_Handler+0x4>

08003d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d40:	e7fe      	b.n	8003d40 <UsageFault_Handler+0x4>

08003d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8003d70:	4b0a      	ldr	r3, [pc, #40]	; (8003d9c <SysTick_Handler+0x30>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4b08      	ldr	r3, [pc, #32]	; (8003d9c <SysTick_Handler+0x30>)
 8003d7c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003d7e:	4b07      	ldr	r3, [pc, #28]	; (8003d9c <SysTick_Handler+0x30>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b09      	cmp	r3, #9
 8003d86:	d904      	bls.n	8003d92 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <SysTick_Handler+0x30>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8003d8e:	f7ff ffa5 	bl	8003cdc <SDTimer_Handler>
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d92:	f000 f9c7 	bl	8004124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20002568 	.word	0x20002568

08003da0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(power_button_Pin);
 8003da4:	2001      	movs	r0, #1
 8003da6:	f000 fca5 	bl	80046f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  return 1;
 8003db2:	2301      	movs	r3, #1
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <_kill>:

int _kill(int pid, int sig)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
 8003dc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dc8:	f009 fe72 	bl	800dab0 <__errno>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2216      	movs	r2, #22
 8003dd0:	601a      	str	r2, [r3, #0]
  return -1;
 8003dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_exit>:

void _exit (int status)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003de6:	f04f 31ff 	mov.w	r1, #4294967295
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff ffe7 	bl	8003dbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8003df0:	e7fe      	b.n	8003df0 <_exit+0x12>

08003df2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b086      	sub	sp, #24
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e00a      	b.n	8003e1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e04:	f3af 8000 	nop.w
 8003e08:	4601      	mov	r1, r0
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	60ba      	str	r2, [r7, #8]
 8003e10:	b2ca      	uxtb	r2, r1
 8003e12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3301      	adds	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	dbf0      	blt.n	8003e04 <_read+0x12>
  }

  return len;
 8003e22:	687b      	ldr	r3, [r7, #4]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e009      	b.n	8003e52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	60ba      	str	r2, [r7, #8]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff fdd4 	bl	80039f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	dbf1      	blt.n	8003e3e <_write+0x12>
  }
  return len;
 8003e5a:	687b      	ldr	r3, [r7, #4]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_close>:

int _close(int file)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e8c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_isatty>:

int _isatty(int file)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003ea4:	2301      	movs	r3, #1
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ed4:	4a14      	ldr	r2, [pc, #80]	; (8003f28 <_sbrk+0x5c>)
 8003ed6:	4b15      	ldr	r3, [pc, #84]	; (8003f2c <_sbrk+0x60>)
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <_sbrk+0x64>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <_sbrk+0x64>)
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <_sbrk+0x68>)
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eee:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <_sbrk+0x64>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d207      	bcs.n	8003f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003efc:	f009 fdd8 	bl	800dab0 <__errno>
 8003f00:	4603      	mov	r3, r0
 8003f02:	220c      	movs	r2, #12
 8003f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	e009      	b.n	8003f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f0c:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <_sbrk+0x64>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f12:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <_sbrk+0x64>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	4a05      	ldr	r2, [pc, #20]	; (8003f30 <_sbrk+0x64>)
 8003f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	2000a000 	.word	0x2000a000
 8003f2c:	00000400 	.word	0x00000400
 8003f30:	2000256c 	.word	0x2000256c
 8003f34:	20002980 	.word	0x20002980

08003f38 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <SystemInit+0x20>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	4a05      	ldr	r2, [pc, #20]	; (8003f58 <SystemInit+0x20>)
 8003f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f60:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f62:	4a15      	ldr	r2, [pc, #84]	; (8003fb8 <MX_USART1_UART_Init+0x5c>)
 8003f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f66:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f82:	220c      	movs	r2, #12
 8003f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f8c:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f9e:	4805      	ldr	r0, [pc, #20]	; (8003fb4 <MX_USART1_UART_Init+0x58>)
 8003fa0:	f004 f8b2 	bl	8008108 <HAL_UART_Init>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003faa:	f7ff fc6d 	bl	8003888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20002570 	.word	0x20002570
 8003fb8:	40013800 	.word	0x40013800

08003fbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a17      	ldr	r2, [pc, #92]	; (8004038 <HAL_UART_MspInit+0x7c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d127      	bne.n	800402e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fde:	4b17      	ldr	r3, [pc, #92]	; (800403c <HAL_UART_MspInit+0x80>)
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	4a16      	ldr	r2, [pc, #88]	; (800403c <HAL_UART_MspInit+0x80>)
 8003fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe8:	6193      	str	r3, [r2, #24]
 8003fea:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_UART_MspInit+0x80>)
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <HAL_UART_MspInit+0x80>)
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	4a10      	ldr	r2, [pc, #64]	; (800403c <HAL_UART_MspInit+0x80>)
 8003ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004000:	6153      	str	r3, [r2, #20]
 8004002:	4b0e      	ldr	r3, [pc, #56]	; (800403c <HAL_UART_MspInit+0x80>)
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800400e:	2330      	movs	r3, #48	; 0x30
 8004010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800401a:	2303      	movs	r3, #3
 800401c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800401e:	2307      	movs	r3, #7
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004022:	f107 0314 	add.w	r3, r7, #20
 8004026:	4619      	mov	r1, r3
 8004028:	4805      	ldr	r0, [pc, #20]	; (8004040 <HAL_UART_MspInit+0x84>)
 800402a:	f000 f9d1 	bl	80043d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800402e:	bf00      	nop
 8004030:	3728      	adds	r7, #40	; 0x28
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40013800 	.word	0x40013800
 800403c:	40021000 	.word	0x40021000
 8004040:	48000800 	.word	0x48000800

08004044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800407c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004048:	f7ff ff76 	bl	8003f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800404c:	480c      	ldr	r0, [pc, #48]	; (8004080 <LoopForever+0x6>)
  ldr r1, =_edata
 800404e:	490d      	ldr	r1, [pc, #52]	; (8004084 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004050:	4a0d      	ldr	r2, [pc, #52]	; (8004088 <LoopForever+0xe>)
  movs r3, #0
 8004052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004054:	e002      	b.n	800405c <LoopCopyDataInit>

08004056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800405a:	3304      	adds	r3, #4

0800405c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800405c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800405e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004060:	d3f9      	bcc.n	8004056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004062:	4a0a      	ldr	r2, [pc, #40]	; (800408c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004064:	4c0a      	ldr	r4, [pc, #40]	; (8004090 <LoopForever+0x16>)
  movs r3, #0
 8004066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004068:	e001      	b.n	800406e <LoopFillZerobss>

0800406a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800406a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800406c:	3204      	adds	r2, #4

0800406e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800406e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004070:	d3fb      	bcc.n	800406a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004072:	f009 fd23 	bl	800dabc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004076:	f7ff fb37 	bl	80036e8 <main>

0800407a <LoopForever>:

LoopForever:
    b LoopForever
 800407a:	e7fe      	b.n	800407a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800407c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8004080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004084:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004088:	08012510 	.word	0x08012510
  ldr r2, =_sbss
 800408c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004090:	2000297c 	.word	0x2000297c

08004094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004094:	e7fe      	b.n	8004094 <ADC1_2_IRQHandler>
	...

08004098 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800409c:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_Init+0x28>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a07      	ldr	r2, [pc, #28]	; (80040c0 <HAL_Init+0x28>)
 80040a2:	f043 0310 	orr.w	r3, r3, #16
 80040a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040a8:	2003      	movs	r0, #3
 80040aa:	f000 f94f 	bl	800434c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ae:	200f      	movs	r0, #15
 80040b0:	f000 f808 	bl	80040c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040b4:	f7ff fdee 	bl	8003c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40022000 	.word	0x40022000

080040c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040cc:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_InitTick+0x54>)
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_InitTick+0x58>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	4619      	mov	r1, r3
 80040d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040da:	fbb3 f3f1 	udiv	r3, r3, r1
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 f967 	bl	80043b6 <HAL_SYSTICK_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e00e      	b.n	8004110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b0f      	cmp	r3, #15
 80040f6:	d80a      	bhi.n	800410e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040f8:	2200      	movs	r2, #0
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004100:	f000 f92f 	bl	8004362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004104:	4a06      	ldr	r2, [pc, #24]	; (8004120 <HAL_InitTick+0x5c>)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000004 	.word	0x20000004
 800411c:	2000000c 	.word	0x2000000c
 8004120:	20000008 	.word	0x20000008

08004124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_IncTick+0x20>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_IncTick+0x24>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4413      	add	r3, r2
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_IncTick+0x24>)
 8004136:	6013      	str	r3, [r2, #0]
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	2000000c 	.word	0x2000000c
 8004148:	200025f8 	.word	0x200025f8

0800414c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return uwTick;  
 8004150:	4b03      	ldr	r3, [pc, #12]	; (8004160 <HAL_GetTick+0x14>)
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	200025f8 	.word	0x200025f8

08004164 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800416c:	f7ff ffee 	bl	800414c <HAL_GetTick>
 8004170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d005      	beq.n	800418a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800417e:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <HAL_Delay+0x44>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800418a:	bf00      	nop
 800418c:	f7ff ffde 	bl	800414c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	429a      	cmp	r2, r3
 800419a:	d8f7      	bhi.n	800418c <HAL_Delay+0x28>
  {
  }
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	2000000c 	.word	0x2000000c

080041ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <__NVIC_SetPriorityGrouping+0x44>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041c8:	4013      	ands	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041de:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <__NVIC_SetPriorityGrouping+0x44>)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	60d3      	str	r3, [r2, #12]
}
 80041e4:	bf00      	nop
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	e000ed00 	.word	0xe000ed00

080041f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <__NVIC_GetPriorityGrouping+0x18>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 0307 	and.w	r3, r3, #7
}
 8004202:	4618      	mov	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	2b00      	cmp	r3, #0
 8004220:	db0b      	blt.n	800423a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	f003 021f 	and.w	r2, r3, #31
 8004228:	4907      	ldr	r1, [pc, #28]	; (8004248 <__NVIC_EnableIRQ+0x38>)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2001      	movs	r0, #1
 8004232:	fa00 f202 	lsl.w	r2, r0, r2
 8004236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000e100 	.word	0xe000e100

0800424c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	2b00      	cmp	r3, #0
 800425e:	db0a      	blt.n	8004276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	490c      	ldr	r1, [pc, #48]	; (8004298 <__NVIC_SetPriority+0x4c>)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	0112      	lsls	r2, r2, #4
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	440b      	add	r3, r1
 8004270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004274:	e00a      	b.n	800428c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4908      	ldr	r1, [pc, #32]	; (800429c <__NVIC_SetPriority+0x50>)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	3b04      	subs	r3, #4
 8004284:	0112      	lsls	r2, r2, #4
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	440b      	add	r3, r1
 800428a:	761a      	strb	r2, [r3, #24]
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000e100 	.word	0xe000e100
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f1c3 0307 	rsb	r3, r3, #7
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	bf28      	it	cs
 80042be:	2304      	movcs	r3, #4
 80042c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d902      	bls.n	80042d0 <NVIC_EncodePriority+0x30>
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3b03      	subs	r3, #3
 80042ce:	e000      	b.n	80042d2 <NVIC_EncodePriority+0x32>
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	401a      	ands	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e8:	f04f 31ff 	mov.w	r1, #4294967295
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	43d9      	mvns	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	4313      	orrs	r3, r2
         );
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3b01      	subs	r3, #1
 8004314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004318:	d301      	bcc.n	800431e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800431a:	2301      	movs	r3, #1
 800431c:	e00f      	b.n	800433e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800431e:	4a0a      	ldr	r2, [pc, #40]	; (8004348 <SysTick_Config+0x40>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3b01      	subs	r3, #1
 8004324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004326:	210f      	movs	r1, #15
 8004328:	f04f 30ff 	mov.w	r0, #4294967295
 800432c:	f7ff ff8e 	bl	800424c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004330:	4b05      	ldr	r3, [pc, #20]	; (8004348 <SysTick_Config+0x40>)
 8004332:	2200      	movs	r2, #0
 8004334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004336:	4b04      	ldr	r3, [pc, #16]	; (8004348 <SysTick_Config+0x40>)
 8004338:	2207      	movs	r2, #7
 800433a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	e000e010 	.word	0xe000e010

0800434c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff ff29 	bl	80041ac <__NVIC_SetPriorityGrouping>
}
 800435a:	bf00      	nop
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b086      	sub	sp, #24
 8004366:	af00      	add	r7, sp, #0
 8004368:	4603      	mov	r3, r0
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
 800436e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004374:	f7ff ff3e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 8004378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7ff ff8e 	bl	80042a0 <NVIC_EncodePriority>
 8004384:	4602      	mov	r2, r0
 8004386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ff5d 	bl	800424c <__NVIC_SetPriority>
}
 8004392:	bf00      	nop
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	4603      	mov	r3, r0
 80043a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff31 	bl	8004210 <__NVIC_EnableIRQ>
}
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b082      	sub	sp, #8
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7ff ffa2 	bl	8004308 <SysTick_Config>
 80043c4:	4603      	mov	r3, r0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043da:	2300      	movs	r3, #0
 80043dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043de:	e154      	b.n	800468a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2101      	movs	r1, #1
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	4013      	ands	r3, r2
 80043ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 8146 	beq.w	8004684 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d005      	beq.n	8004410 <HAL_GPIO_Init+0x40>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d130      	bne.n	8004472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	2203      	movs	r2, #3
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	43db      	mvns	r3, r3
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004446:	2201      	movs	r2, #1
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0201 	and.w	r2, r3, #1
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	2b03      	cmp	r3, #3
 800447c:	d017      	beq.n	80044ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4013      	ands	r3, r2
 8004494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d123      	bne.n	8004502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	08da      	lsrs	r2, r3, #3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3208      	adds	r2, #8
 80044c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	220f      	movs	r2, #15
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43db      	mvns	r3, r3
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	08da      	lsrs	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3208      	adds	r2, #8
 80044fc:	6939      	ldr	r1, [r7, #16]
 80044fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	2203      	movs	r2, #3
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4013      	ands	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 0203 	and.w	r2, r3, #3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	fa02 f303 	lsl.w	r3, r2, r3
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 80a0 	beq.w	8004684 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004544:	4b58      	ldr	r3, [pc, #352]	; (80046a8 <HAL_GPIO_Init+0x2d8>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	4a57      	ldr	r2, [pc, #348]	; (80046a8 <HAL_GPIO_Init+0x2d8>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6193      	str	r3, [r2, #24]
 8004550:	4b55      	ldr	r3, [pc, #340]	; (80046a8 <HAL_GPIO_Init+0x2d8>)
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800455c:	4a53      	ldr	r2, [pc, #332]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	089b      	lsrs	r3, r3, #2
 8004562:	3302      	adds	r3, #2
 8004564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	220f      	movs	r2, #15
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004586:	d019      	beq.n	80045bc <HAL_GPIO_Init+0x1ec>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a49      	ldr	r2, [pc, #292]	; (80046b0 <HAL_GPIO_Init+0x2e0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d013      	beq.n	80045b8 <HAL_GPIO_Init+0x1e8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a48      	ldr	r2, [pc, #288]	; (80046b4 <HAL_GPIO_Init+0x2e4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00d      	beq.n	80045b4 <HAL_GPIO_Init+0x1e4>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a47      	ldr	r2, [pc, #284]	; (80046b8 <HAL_GPIO_Init+0x2e8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d007      	beq.n	80045b0 <HAL_GPIO_Init+0x1e0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a46      	ldr	r2, [pc, #280]	; (80046bc <HAL_GPIO_Init+0x2ec>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d101      	bne.n	80045ac <HAL_GPIO_Init+0x1dc>
 80045a8:	2304      	movs	r3, #4
 80045aa:	e008      	b.n	80045be <HAL_GPIO_Init+0x1ee>
 80045ac:	2305      	movs	r3, #5
 80045ae:	e006      	b.n	80045be <HAL_GPIO_Init+0x1ee>
 80045b0:	2303      	movs	r3, #3
 80045b2:	e004      	b.n	80045be <HAL_GPIO_Init+0x1ee>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e002      	b.n	80045be <HAL_GPIO_Init+0x1ee>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <HAL_GPIO_Init+0x1ee>
 80045bc:	2300      	movs	r3, #0
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	f002 0203 	and.w	r2, r2, #3
 80045c4:	0092      	lsls	r2, r2, #2
 80045c6:	4093      	lsls	r3, r2
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80045ce:	4937      	ldr	r1, [pc, #220]	; (80046ac <HAL_GPIO_Init+0x2dc>)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	089b      	lsrs	r3, r3, #2
 80045d4:	3302      	adds	r3, #2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045dc:	4b38      	ldr	r3, [pc, #224]	; (80046c0 <HAL_GPIO_Init+0x2f0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	43db      	mvns	r3, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4013      	ands	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004600:	4a2f      	ldr	r2, [pc, #188]	; (80046c0 <HAL_GPIO_Init+0x2f0>)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004606:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <HAL_GPIO_Init+0x2f0>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	43db      	mvns	r3, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4013      	ands	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800462a:	4a25      	ldr	r2, [pc, #148]	; (80046c0 <HAL_GPIO_Init+0x2f0>)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004630:	4b23      	ldr	r3, [pc, #140]	; (80046c0 <HAL_GPIO_Init+0x2f0>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	43db      	mvns	r3, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4013      	ands	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4313      	orrs	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004654:	4a1a      	ldr	r2, [pc, #104]	; (80046c0 <HAL_GPIO_Init+0x2f0>)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800465a:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_GPIO_Init+0x2f0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	43db      	mvns	r3, r3
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	4013      	ands	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800467e:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <HAL_GPIO_Init+0x2f0>)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	3301      	adds	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	fa22 f303 	lsr.w	r3, r2, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	f47f aea3 	bne.w	80043e0 <HAL_GPIO_Init+0x10>
  }
}
 800469a:	bf00      	nop
 800469c:	bf00      	nop
 800469e:	371c      	adds	r7, #28
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40021000 	.word	0x40021000
 80046ac:	40010000 	.word	0x40010000
 80046b0:	48000400 	.word	0x48000400
 80046b4:	48000800 	.word	0x48000800
 80046b8:	48000c00 	.word	0x48000c00
 80046bc:	48001000 	.word	0x48001000
 80046c0:	40010400 	.word	0x40010400

080046c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	460b      	mov	r3, r1
 80046ce:	807b      	strh	r3, [r7, #2]
 80046d0:	4613      	mov	r3, r2
 80046d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046d4:	787b      	ldrb	r3, [r7, #1]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046da:	887a      	ldrh	r2, [r7, #2]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046e0:	e002      	b.n	80046e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046e2:	887a      	ldrh	r2, [r7, #2]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004700:	695a      	ldr	r2, [r3, #20]
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d006      	beq.n	8004718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800470a:	4a05      	ldr	r2, [pc, #20]	; (8004720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800470c:	88fb      	ldrh	r3, [r7, #6]
 800470e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004710:	88fb      	ldrh	r3, [r7, #6]
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff f898 	bl	8003848 <HAL_GPIO_EXTI_Callback>
  }
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40010400 	.word	0x40010400

08004724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e081      	b.n	800483a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fe fc16 	bl	8002f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	; 0x24
 8004754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0201 	bic.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d107      	bne.n	800479e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	e006      	b.n	80047ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d104      	bne.n	80047be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6812      	ldr	r2, [r2, #0]
 80047c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69d9      	ldr	r1, [r3, #28]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1a      	ldr	r2, [r3, #32]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b088      	sub	sp, #32
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	461a      	mov	r2, r3
 8004850:	460b      	mov	r3, r1
 8004852:	817b      	strh	r3, [r7, #10]
 8004854:	4613      	mov	r3, r2
 8004856:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b20      	cmp	r3, #32
 8004862:	f040 80da 	bne.w	8004a1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_I2C_Master_Transmit+0x30>
 8004870:	2302      	movs	r3, #2
 8004872:	e0d3      	b.n	8004a1c <HAL_I2C_Master_Transmit+0x1d8>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800487c:	f7ff fc66 	bl	800414c <HAL_GetTick>
 8004880:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	2319      	movs	r3, #25
 8004888:	2201      	movs	r2, #1
 800488a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fbc6 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0be      	b.n	8004a1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2221      	movs	r2, #33	; 0x21
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2210      	movs	r2, #16
 80048aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	893a      	ldrh	r2, [r7, #8]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2bff      	cmp	r3, #255	; 0xff
 80048ce:	d90e      	bls.n	80048ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	22ff      	movs	r2, #255	; 0xff
 80048d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	8979      	ldrh	r1, [r7, #10]
 80048de:	4b51      	ldr	r3, [pc, #324]	; (8004a24 <HAL_I2C_Master_Transmit+0x1e0>)
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fd54 	bl	8005394 <I2C_TransferConfig>
 80048ec:	e06c      	b.n	80049c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	8979      	ldrh	r1, [r7, #10]
 8004900:	4b48      	ldr	r3, [pc, #288]	; (8004a24 <HAL_I2C_Master_Transmit+0x1e0>)
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 fd43 	bl	8005394 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800490e:	e05b      	b.n	80049c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	6a39      	ldr	r1, [r7, #32]
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 fbd2 	bl	80050be <I2C_WaitOnTXISFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e07b      	b.n	8004a1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d034      	beq.n	80049c8 <HAL_I2C_Master_Transmit+0x184>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004962:	2b00      	cmp	r3, #0
 8004964:	d130      	bne.n	80049c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	2200      	movs	r2, #0
 800496e:	2180      	movs	r1, #128	; 0x80
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 fb55 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e04d      	b.n	8004a1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	2bff      	cmp	r3, #255	; 0xff
 8004988:	d90e      	bls.n	80049a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	22ff      	movs	r2, #255	; 0xff
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004994:	b2da      	uxtb	r2, r3
 8004996:	8979      	ldrh	r1, [r7, #10]
 8004998:	2300      	movs	r3, #0
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fcf7 	bl	8005394 <I2C_TransferConfig>
 80049a6:	e00f      	b.n	80049c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	8979      	ldrh	r1, [r7, #10]
 80049ba:	2300      	movs	r3, #0
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fce6 	bl	8005394 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d19e      	bne.n	8004910 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	6a39      	ldr	r1, [r7, #32]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fbb8 	bl	800514c <I2C_WaitOnSTOPFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e01a      	b.n	8004a1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2220      	movs	r2, #32
 80049ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6859      	ldr	r1, [r3, #4]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_I2C_Master_Transmit+0x1e4>)
 80049fa:	400b      	ands	r3, r1
 80049fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	80002000 	.word	0x80002000
 8004a28:	fe00e800 	.word	0xfe00e800

08004a2c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	4608      	mov	r0, r1
 8004a36:	4611      	mov	r1, r2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	817b      	strh	r3, [r7, #10]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	813b      	strh	r3, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	f040 80f9 	bne.w	8004c46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_I2C_Mem_Write+0x34>
 8004a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0ed      	b.n	8004c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_I2C_Mem_Write+0x4e>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e0e6      	b.n	8004c48 <HAL_I2C_Mem_Write+0x21c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a82:	f7ff fb63 	bl	800414c <HAL_GetTick>
 8004a86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	2319      	movs	r3, #25
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fac3 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0d1      	b.n	8004c48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2221      	movs	r2, #33	; 0x21
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2240      	movs	r2, #64	; 0x40
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a3a      	ldr	r2, [r7, #32]
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004acc:	88f8      	ldrh	r0, [r7, #6]
 8004ace:	893a      	ldrh	r2, [r7, #8]
 8004ad0:	8979      	ldrh	r1, [r7, #10]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	4603      	mov	r3, r0
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 f9d3 	bl	8004e88 <I2C_RequestMemoryWrite>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0a9      	b.n	8004c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2bff      	cmp	r3, #255	; 0xff
 8004afc:	d90e      	bls.n	8004b1c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	22ff      	movs	r2, #255	; 0xff
 8004b02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	8979      	ldrh	r1, [r7, #10]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fc3d 	bl	8005394 <I2C_TransferConfig>
 8004b1a:	e00f      	b.n	8004b3c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	8979      	ldrh	r1, [r7, #10]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f000 fc2c 	bl	8005394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fabc 	bl	80050be <I2C_WaitOnTXISFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e07b      	b.n	8004c48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d034      	beq.n	8004bf4 <HAL_I2C_Mem_Write+0x1c8>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d130      	bne.n	8004bf4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fa3f 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e04d      	b.n	8004c48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2bff      	cmp	r3, #255	; 0xff
 8004bb4:	d90e      	bls.n	8004bd4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	22ff      	movs	r2, #255	; 0xff
 8004bba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	8979      	ldrh	r1, [r7, #10]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fbe1 	bl	8005394 <I2C_TransferConfig>
 8004bd2:	e00f      	b.n	8004bf4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	8979      	ldrh	r1, [r7, #10]
 8004be6:	2300      	movs	r3, #0
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 fbd0 	bl	8005394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d19e      	bne.n	8004b3c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 faa2 	bl	800514c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e01a      	b.n	8004c48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2220      	movs	r2, #32
 8004c18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b0a      	ldr	r3, [pc, #40]	; (8004c50 <HAL_I2C_Mem_Write+0x224>)
 8004c26:	400b      	ands	r3, r1
 8004c28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e000      	b.n	8004c48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	fe00e800 	.word	0xfe00e800

08004c54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	4611      	mov	r1, r2
 8004c60:	461a      	mov	r2, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	817b      	strh	r3, [r7, #10]
 8004c66:	460b      	mov	r3, r1
 8004c68:	813b      	strh	r3, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	f040 80fd 	bne.w	8004e76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_I2C_Mem_Read+0x34>
 8004c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0f1      	b.n	8004e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_I2C_Mem_Read+0x4e>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0ea      	b.n	8004e78 <HAL_I2C_Mem_Read+0x224>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004caa:	f7ff fa4f 	bl	800414c <HAL_GetTick>
 8004cae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2319      	movs	r3, #25
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f9af 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d001      	beq.n	8004ccc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0d5      	b.n	8004e78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2222      	movs	r2, #34	; 0x22
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2240      	movs	r2, #64	; 0x40
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a3a      	ldr	r2, [r7, #32]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cf4:	88f8      	ldrh	r0, [r7, #6]
 8004cf6:	893a      	ldrh	r2, [r7, #8]
 8004cf8:	8979      	ldrh	r1, [r7, #10]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4603      	mov	r3, r0
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f913 	bl	8004f30 <I2C_RequestMemoryRead>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e0ad      	b.n	8004e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2bff      	cmp	r3, #255	; 0xff
 8004d24:	d90e      	bls.n	8004d44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	22ff      	movs	r2, #255	; 0xff
 8004d2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	8979      	ldrh	r1, [r7, #10]
 8004d34:	4b52      	ldr	r3, [pc, #328]	; (8004e80 <HAL_I2C_Mem_Read+0x22c>)
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f000 fb29 	bl	8005394 <I2C_TransferConfig>
 8004d42:	e00f      	b.n	8004d64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	8979      	ldrh	r1, [r7, #10]
 8004d56:	4b4a      	ldr	r3, [pc, #296]	; (8004e80 <HAL_I2C_Mem_Read+0x22c>)
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fb18 	bl	8005394 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2104      	movs	r1, #4
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f956 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e07c      	b.n	8004e78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d034      	beq.n	8004e24 <HAL_I2C_Mem_Read+0x1d0>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d130      	bne.n	8004e24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2180      	movs	r1, #128	; 0x80
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f927 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e04d      	b.n	8004e78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2bff      	cmp	r3, #255	; 0xff
 8004de4:	d90e      	bls.n	8004e04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	22ff      	movs	r2, #255	; 0xff
 8004dea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	8979      	ldrh	r1, [r7, #10]
 8004df4:	2300      	movs	r3, #0
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fac9 	bl	8005394 <I2C_TransferConfig>
 8004e02:	e00f      	b.n	8004e24 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	8979      	ldrh	r1, [r7, #10]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fab8 	bl	8005394 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d19a      	bne.n	8004d64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 f98a 	bl	800514c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e01a      	b.n	8004e78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2220      	movs	r2, #32
 8004e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <HAL_I2C_Mem_Read+0x230>)
 8004e56:	400b      	ands	r3, r1
 8004e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e000      	b.n	8004e78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
  }
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	80002400 	.word	0x80002400
 8004e84:	fe00e800 	.word	0xfe00e800

08004e88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	817b      	strh	r3, [r7, #10]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	813b      	strh	r3, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	8979      	ldrh	r1, [r7, #10]
 8004ea8:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <I2C_RequestMemoryWrite+0xa4>)
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 fa6f 	bl	8005394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	69b9      	ldr	r1, [r7, #24]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f8ff 	bl	80050be <I2C_WaitOnTXISFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e02c      	b.n	8004f24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eca:	88fb      	ldrh	r3, [r7, #6]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d105      	bne.n	8004edc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ed0:	893b      	ldrh	r3, [r7, #8]
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28
 8004eda:	e015      	b.n	8004f08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004edc:	893b      	ldrh	r3, [r7, #8]
 8004ede:	0a1b      	lsrs	r3, r3, #8
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	69b9      	ldr	r1, [r7, #24]
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 f8e5 	bl	80050be <I2C_WaitOnTXISFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e012      	b.n	8004f24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004efe:	893b      	ldrh	r3, [r7, #8]
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2180      	movs	r1, #128	; 0x80
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f884 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	80002000 	.word	0x80002000

08004f30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	4608      	mov	r0, r1
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	817b      	strh	r3, [r7, #10]
 8004f42:	460b      	mov	r3, r1
 8004f44:	813b      	strh	r3, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	b2da      	uxtb	r2, r3
 8004f4e:	8979      	ldrh	r1, [r7, #10]
 8004f50:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <I2C_RequestMemoryRead+0xa4>)
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	2300      	movs	r3, #0
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 fa1c 	bl	8005394 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	69b9      	ldr	r1, [r7, #24]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f8ac 	bl	80050be <I2C_WaitOnTXISFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e02c      	b.n	8004fca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f70:	88fb      	ldrh	r3, [r7, #6]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d105      	bne.n	8004f82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004f76:	893b      	ldrh	r3, [r7, #8]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f80:	e015      	b.n	8004fae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004f82:	893b      	ldrh	r3, [r7, #8]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	69b9      	ldr	r1, [r7, #24]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f892 	bl	80050be <I2C_WaitOnTXISFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e012      	b.n	8004fca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fa4:	893b      	ldrh	r3, [r7, #8]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2140      	movs	r1, #64	; 0x40
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f831 	bl	8005020 <I2C_WaitOnFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	80002000 	.word	0x80002000

08004fd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d103      	bne.n	8004ff6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b01      	cmp	r3, #1
 8005002:	d007      	beq.n	8005014 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	619a      	str	r2, [r3, #24]
  }
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005030:	e031      	b.n	8005096 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005038:	d02d      	beq.n	8005096 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7ff f887 	bl	800414c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <I2C_WaitOnFlagUntilTimeout+0x30>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d122      	bne.n	8005096 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	bf0c      	ite	eq
 8005060:	2301      	moveq	r3, #1
 8005062:	2300      	movne	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	461a      	mov	r2, r3
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	429a      	cmp	r2, r3
 800506c:	d113      	bne.n	8005096 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2220      	movs	r2, #32
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e00f      	b.n	80050b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699a      	ldr	r2, [r3, #24]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4013      	ands	r3, r2
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	461a      	mov	r2, r3
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d0be      	beq.n	8005032 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050ca:	e033      	b.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f87f 	bl	80051d4 <I2C_IsErrorOccurred>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e031      	b.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d025      	beq.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e8:	f7ff f830 	bl	800414c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d302      	bcc.n	80050fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d11a      	bne.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b02      	cmp	r3, #2
 800510a:	d013      	beq.n	8005134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f043 0220 	orr.w	r2, r3, #32
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e007      	b.n	8005144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d1c4      	bne.n	80050cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005158:	e02f      	b.n	80051ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f838 	bl	80051d4 <I2C_IsErrorOccurred>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e02d      	b.n	80051ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800516e:	f7fe ffed 	bl	800414c <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d302      	bcc.n	8005184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11a      	bne.n	80051ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d013      	beq.n	80051ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	f043 0220 	orr.w	r2, r3, #32
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e007      	b.n	80051ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b20      	cmp	r3, #32
 80051c6:	d1c8      	bne.n	800515a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	; 0x28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051ee:	2300      	movs	r3, #0
 80051f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d068      	beq.n	80052d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2210      	movs	r2, #16
 8005206:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005208:	e049      	b.n	800529e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d045      	beq.n	800529e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005212:	f7fe ff9b 	bl	800414c <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <I2C_IsErrorOccurred+0x54>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d13a      	bne.n	800529e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005232:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800523a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005246:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800524a:	d121      	bne.n	8005290 <I2C_IsErrorOccurred+0xbc>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005252:	d01d      	beq.n	8005290 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	2b20      	cmp	r3, #32
 8005258:	d01a      	beq.n	8005290 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005268:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800526a:	f7fe ff6f 	bl	800414c <HAL_GetTick>
 800526e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005270:	e00e      	b.n	8005290 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005272:	f7fe ff6b 	bl	800414c <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b19      	cmp	r3, #25
 800527e:	d907      	bls.n	8005290 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	f043 0320 	orr.w	r3, r3, #32
 8005286:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800528e:	e006      	b.n	800529e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b20      	cmp	r3, #32
 800529c:	d1e9      	bne.n	8005272 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d003      	beq.n	80052b4 <I2C_IsErrorOccurred+0xe0>
 80052ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0aa      	beq.n	800520a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d103      	bne.n	80052c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2220      	movs	r2, #32
 80052c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	f043 0304 	orr.w	r3, r3, #4
 80052ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00b      	beq.n	80052fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f043 0308 	orr.w	r3, r3, #8
 800530c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005316:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	f043 0302 	orr.w	r3, r3, #2
 800532e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005338:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01c      	beq.n	8005382 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff fe45 	bl	8004fd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b0d      	ldr	r3, [pc, #52]	; (8005390 <I2C_IsErrorOccurred+0x1bc>)
 800535a:	400b      	ands	r3, r1
 800535c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	431a      	orrs	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005386:	4618      	mov	r0, r3
 8005388:	3728      	adds	r7, #40	; 0x28
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	fe00e800 	.word	0xfe00e800

08005394 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	607b      	str	r3, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	817b      	strh	r3, [r7, #10]
 80053a2:	4613      	mov	r3, r2
 80053a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053a6:	897b      	ldrh	r3, [r7, #10]
 80053a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053ac:	7a7b      	ldrb	r3, [r7, #9]
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	4313      	orrs	r3, r2
 80053be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	0d5b      	lsrs	r3, r3, #21
 80053ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <I2C_TransferConfig+0x60>)
 80053d4:	430b      	orrs	r3, r1
 80053d6:	43db      	mvns	r3, r3
 80053d8:	ea02 0103 	and.w	r1, r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053e6:	bf00      	nop
 80053e8:	371c      	adds	r7, #28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	03ff63ff 	.word	0x03ff63ff

080053f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b20      	cmp	r3, #32
 800540c:	d138      	bne.n	8005480 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005414:	2b01      	cmp	r3, #1
 8005416:	d101      	bne.n	800541c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005418:	2302      	movs	r3, #2
 800541a:	e032      	b.n	8005482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	; 0x24
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0201 	bic.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800544a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6819      	ldr	r1, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2220      	movs	r2, #32
 8005470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	e000      	b.n	8005482 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005480:	2302      	movs	r3, #2
  }
}
 8005482:	4618      	mov	r0, r3
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d139      	bne.n	8005518 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e033      	b.n	800551a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2224      	movs	r2, #36	; 0x24
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0201 	bic.w	r2, r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80054e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
	...

08005528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800552e:	af00      	add	r7, sp, #0
 8005530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005534:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005538:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800553a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800553e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	f001 b823 	b.w	8006594 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005552:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 817d 	beq.w	800585e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005564:	4bbc      	ldr	r3, [pc, #752]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b04      	cmp	r3, #4
 800556e:	d00c      	beq.n	800558a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005570:	4bb9      	ldr	r3, [pc, #740]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 030c 	and.w	r3, r3, #12
 8005578:	2b08      	cmp	r3, #8
 800557a:	d15c      	bne.n	8005636 <HAL_RCC_OscConfig+0x10e>
 800557c:	4bb6      	ldr	r3, [pc, #728]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d155      	bne.n	8005636 <HAL_RCC_OscConfig+0x10e>
 800558a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800558e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005592:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 800559e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055a2:	fab3 f383 	clz	r3, r3
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	095b      	lsrs	r3, r3, #5
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d102      	bne.n	80055bc <HAL_RCC_OscConfig+0x94>
 80055b6:	4ba8      	ldr	r3, [pc, #672]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	e015      	b.n	80055e8 <HAL_RCC_OscConfig+0xc0>
 80055bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80055c8:	fa93 f3a3 	rbit	r3, r3
 80055cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80055d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80055d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80055dc:	fa93 f3a3 	rbit	r3, r3
 80055e0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80055e4:	4b9c      	ldr	r3, [pc, #624]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80055f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80055f4:	fa92 f2a2 	rbit	r2, r2
 80055f8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80055fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005600:	fab2 f282 	clz	r2, r2
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	f042 0220 	orr.w	r2, r2, #32
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	f002 021f 	and.w	r2, r2, #31
 8005610:	2101      	movs	r1, #1
 8005612:	fa01 f202 	lsl.w	r2, r1, r2
 8005616:	4013      	ands	r3, r2
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 811f 	beq.w	800585c <HAL_RCC_OscConfig+0x334>
 800561e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005622:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 8116 	bne.w	800585c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f000 bfaf 	b.w	8006594 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800563a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005646:	d106      	bne.n	8005656 <HAL_RCC_OscConfig+0x12e>
 8005648:	4b83      	ldr	r3, [pc, #524]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a82      	ldr	r2, [pc, #520]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 800564e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	e036      	b.n	80056c4 <HAL_RCC_OscConfig+0x19c>
 8005656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800565a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10c      	bne.n	8005680 <HAL_RCC_OscConfig+0x158>
 8005666:	4b7c      	ldr	r3, [pc, #496]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a7b      	ldr	r2, [pc, #492]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 800566c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005670:	6013      	str	r3, [r2, #0]
 8005672:	4b79      	ldr	r3, [pc, #484]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a78      	ldr	r2, [pc, #480]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 8005678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800567c:	6013      	str	r3, [r2, #0]
 800567e:	e021      	b.n	80056c4 <HAL_RCC_OscConfig+0x19c>
 8005680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005684:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005690:	d10c      	bne.n	80056ac <HAL_RCC_OscConfig+0x184>
 8005692:	4b71      	ldr	r3, [pc, #452]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a70      	ldr	r2, [pc, #448]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 8005698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4b6e      	ldr	r3, [pc, #440]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a6d      	ldr	r2, [pc, #436]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80056a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	e00b      	b.n	80056c4 <HAL_RCC_OscConfig+0x19c>
 80056ac:	4b6a      	ldr	r3, [pc, #424]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a69      	ldr	r2, [pc, #420]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80056b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	4b67      	ldr	r3, [pc, #412]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a66      	ldr	r2, [pc, #408]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80056be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80056c4:	4b64      	ldr	r3, [pc, #400]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	f023 020f 	bic.w	r2, r3, #15
 80056cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	495f      	ldr	r1, [pc, #380]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d059      	beq.n	80057a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ee:	f7fe fd2d 	bl	800414c <HAL_GetTick>
 80056f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056f6:	e00a      	b.n	800570e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056f8:	f7fe fd28 	bl	800414c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b64      	cmp	r3, #100	; 0x64
 8005706:	d902      	bls.n	800570e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	f000 bf43 	b.w	8006594 <HAL_RCC_OscConfig+0x106c>
 800570e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005712:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005716:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800571a:	fa93 f3a3 	rbit	r3, r3
 800571e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005722:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005726:	fab3 f383 	clz	r3, r3
 800572a:	b2db      	uxtb	r3, r3
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b01      	cmp	r3, #1
 8005738:	d102      	bne.n	8005740 <HAL_RCC_OscConfig+0x218>
 800573a:	4b47      	ldr	r3, [pc, #284]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	e015      	b.n	800576c <HAL_RCC_OscConfig+0x244>
 8005740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005744:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005748:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800574c:	fa93 f3a3 	rbit	r3, r3
 8005750:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005758:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800575c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005760:	fa93 f3a3 	rbit	r3, r3
 8005764:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005768:	4b3b      	ldr	r3, [pc, #236]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005770:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005774:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005778:	fa92 f2a2 	rbit	r2, r2
 800577c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8005780:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8005784:	fab2 f282 	clz	r2, r2
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	f042 0220 	orr.w	r2, r2, #32
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	f002 021f 	and.w	r2, r2, #31
 8005794:	2101      	movs	r1, #1
 8005796:	fa01 f202 	lsl.w	r2, r1, r2
 800579a:	4013      	ands	r3, r2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0ab      	beq.n	80056f8 <HAL_RCC_OscConfig+0x1d0>
 80057a0:	e05d      	b.n	800585e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fe fcd3 	bl	800414c <HAL_GetTick>
 80057a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057aa:	e00a      	b.n	80057c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057ac:	f7fe fcce 	bl	800414c <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b64      	cmp	r3, #100	; 0x64
 80057ba:	d902      	bls.n	80057c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	f000 bee9 	b.w	8006594 <HAL_RCC_OscConfig+0x106c>
 80057c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057c6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80057ce:	fa93 f3a3 	rbit	r3, r3
 80057d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80057d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057da:	fab3 f383 	clz	r3, r3
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d102      	bne.n	80057f4 <HAL_RCC_OscConfig+0x2cc>
 80057ee:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	e015      	b.n	8005820 <HAL_RCC_OscConfig+0x2f8>
 80057f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057f8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005800:	fa93 f3a3 	rbit	r3, r3
 8005804:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800580c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005810:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005814:	fa93 f3a3 	rbit	r3, r3
 8005818:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800581c:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <HAL_RCC_OscConfig+0x330>)
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005824:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8005828:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800582c:	fa92 f2a2 	rbit	r2, r2
 8005830:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005834:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8005838:	fab2 f282 	clz	r2, r2
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	f042 0220 	orr.w	r2, r2, #32
 8005842:	b2d2      	uxtb	r2, r2
 8005844:	f002 021f 	and.w	r2, r2, #31
 8005848:	2101      	movs	r1, #1
 800584a:	fa01 f202 	lsl.w	r2, r1, r2
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ab      	bne.n	80057ac <HAL_RCC_OscConfig+0x284>
 8005854:	e003      	b.n	800585e <HAL_RCC_OscConfig+0x336>
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800585c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	f000 817d 	beq.w	8005b6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005874:	4ba6      	ldr	r3, [pc, #664]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00b      	beq.n	8005898 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005880:	4ba3      	ldr	r3, [pc, #652]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f003 030c 	and.w	r3, r3, #12
 8005888:	2b08      	cmp	r3, #8
 800588a:	d172      	bne.n	8005972 <HAL_RCC_OscConfig+0x44a>
 800588c:	4ba0      	ldr	r3, [pc, #640]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d16c      	bne.n	8005972 <HAL_RCC_OscConfig+0x44a>
 8005898:	2302      	movs	r3, #2
 800589a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80058a2:	fa93 f3a3 	rbit	r3, r3
 80058a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80058aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ae:	fab3 f383 	clz	r3, r3
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	095b      	lsrs	r3, r3, #5
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d102      	bne.n	80058c8 <HAL_RCC_OscConfig+0x3a0>
 80058c2:	4b93      	ldr	r3, [pc, #588]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	e013      	b.n	80058f0 <HAL_RCC_OscConfig+0x3c8>
 80058c8:	2302      	movs	r3, #2
 80058ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80058d2:	fa93 f3a3 	rbit	r3, r3
 80058d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80058da:	2302      	movs	r3, #2
 80058dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80058e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80058e4:	fa93 f3a3 	rbit	r3, r3
 80058e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80058ec:	4b88      	ldr	r3, [pc, #544]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2202      	movs	r2, #2
 80058f2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80058f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80058fa:	fa92 f2a2 	rbit	r2, r2
 80058fe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005902:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005906:	fab2 f282 	clz	r2, r2
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	f042 0220 	orr.w	r2, r2, #32
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	f002 021f 	and.w	r2, r2, #31
 8005916:	2101      	movs	r1, #1
 8005918:	fa01 f202 	lsl.w	r2, r1, r2
 800591c:	4013      	ands	r3, r2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCC_OscConfig+0x410>
 8005922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005926:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d002      	beq.n	8005938 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f000 be2e 	b.w	8006594 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005938:	4b75      	ldr	r3, [pc, #468]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005944:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	21f8      	movs	r1, #248	; 0xf8
 800594e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005952:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005956:	fa91 f1a1 	rbit	r1, r1
 800595a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800595e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005962:	fab1 f181 	clz	r1, r1
 8005966:	b2c9      	uxtb	r1, r1
 8005968:	408b      	lsls	r3, r1
 800596a:	4969      	ldr	r1, [pc, #420]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 800596c:	4313      	orrs	r3, r2
 800596e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005970:	e0fd      	b.n	8005b6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8088 	beq.w	8005a94 <HAL_RCC_OscConfig+0x56c>
 8005984:	2301      	movs	r3, #1
 8005986:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800598e:	fa93 f3a3 	rbit	r3, r3
 8005992:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005996:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800599a:	fab3 f383 	clz	r3, r3
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80059a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	461a      	mov	r2, r3
 80059ac:	2301      	movs	r3, #1
 80059ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b0:	f7fe fbcc 	bl	800414c <HAL_GetTick>
 80059b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059b8:	e00a      	b.n	80059d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ba:	f7fe fbc7 	bl	800414c <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d902      	bls.n	80059d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	f000 bde2 	b.w	8006594 <HAL_RCC_OscConfig+0x106c>
 80059d0:	2302      	movs	r3, #2
 80059d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80059da:	fa93 f3a3 	rbit	r3, r3
 80059de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80059e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e6:	fab3 f383 	clz	r3, r3
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f043 0301 	orr.w	r3, r3, #1
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d102      	bne.n	8005a00 <HAL_RCC_OscConfig+0x4d8>
 80059fa:	4b45      	ldr	r3, [pc, #276]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	e013      	b.n	8005a28 <HAL_RCC_OscConfig+0x500>
 8005a00:	2302      	movs	r3, #2
 8005a02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005a0a:	fa93 f3a3 	rbit	r3, r3
 8005a0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005a12:	2302      	movs	r3, #2
 8005a14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005a18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005a1c:	fa93 f3a3 	rbit	r3, r3
 8005a20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005a24:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	2202      	movs	r2, #2
 8005a2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005a2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005a32:	fa92 f2a2 	rbit	r2, r2
 8005a36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005a3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005a3e:	fab2 f282 	clz	r2, r2
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	f042 0220 	orr.w	r2, r2, #32
 8005a48:	b2d2      	uxtb	r2, r2
 8005a4a:	f002 021f 	and.w	r2, r2, #31
 8005a4e:	2101      	movs	r1, #1
 8005a50:	fa01 f202 	lsl.w	r2, r1, r2
 8005a54:	4013      	ands	r3, r2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0af      	beq.n	80059ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b2d      	ldr	r3, [pc, #180]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	21f8      	movs	r1, #248	; 0xf8
 8005a70:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a74:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005a78:	fa91 f1a1 	rbit	r1, r1
 8005a7c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005a80:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005a84:	fab1 f181 	clz	r1, r1
 8005a88:	b2c9      	uxtb	r1, r1
 8005a8a:	408b      	lsls	r3, r1
 8005a8c:	4920      	ldr	r1, [pc, #128]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	600b      	str	r3, [r1, #0]
 8005a92:	e06c      	b.n	8005b6e <HAL_RCC_OscConfig+0x646>
 8005a94:	2301      	movs	r3, #1
 8005a96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005a9e:	fa93 f3a3 	rbit	r3, r3
 8005aa2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005aa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aaa:	fab3 f383 	clz	r3, r3
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ab4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	461a      	mov	r2, r3
 8005abc:	2300      	movs	r3, #0
 8005abe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac0:	f7fe fb44 	bl	800414c <HAL_GetTick>
 8005ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac8:	e00a      	b.n	8005ae0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aca:	f7fe fb3f 	bl	800414c <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d902      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	f000 bd5a 	b.w	8006594 <HAL_RCC_OscConfig+0x106c>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005aea:	fa93 f3a3 	rbit	r3, r3
 8005aee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af6:	fab3 f383 	clz	r3, r3
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	f043 0301 	orr.w	r3, r3, #1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d104      	bne.n	8005b14 <HAL_RCC_OscConfig+0x5ec>
 8005b0a:	4b01      	ldr	r3, [pc, #4]	; (8005b10 <HAL_RCC_OscConfig+0x5e8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	e015      	b.n	8005b3c <HAL_RCC_OscConfig+0x614>
 8005b10:	40021000 	.word	0x40021000
 8005b14:	2302      	movs	r3, #2
 8005b16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b1e:	fa93 f3a3 	rbit	r3, r3
 8005b22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b26:	2302      	movs	r3, #2
 8005b28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005b30:	fa93 f3a3 	rbit	r3, r3
 8005b34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b38:	4bc8      	ldr	r3, [pc, #800]	; (8005e5c <HAL_RCC_OscConfig+0x934>)
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005b42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005b46:	fa92 f2a2 	rbit	r2, r2
 8005b4a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005b4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005b52:	fab2 f282 	clz	r2, r2
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	f042 0220 	orr.w	r2, r2, #32
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	f002 021f 	and.w	r2, r2, #31
 8005b62:	2101      	movs	r1, #1
 8005b64:	fa01 f202 	lsl.w	r2, r1, r2
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1ad      	bne.n	8005aca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 8110 	beq.w	8005da4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d079      	beq.n	8005c88 <HAL_RCC_OscConfig+0x760>
 8005b94:	2301      	movs	r3, #1
 8005b96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005b9e:	fa93 f3a3 	rbit	r3, r3
 8005ba2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005baa:	fab3 f383 	clz	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4bab      	ldr	r3, [pc, #684]	; (8005e60 <HAL_RCC_OscConfig+0x938>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2301      	movs	r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bbe:	f7fe fac5 	bl	800414c <HAL_GetTick>
 8005bc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bc6:	e00a      	b.n	8005bde <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc8:	f7fe fac0 	bl	800414c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d902      	bls.n	8005bde <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	f000 bcdb 	b.w	8006594 <HAL_RCC_OscConfig+0x106c>
 8005bde:	2302      	movs	r3, #2
 8005be0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005be8:	fa93 f3a3 	rbit	r3, r3
 8005bec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bf4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	fa93 f2a3 	rbit	r2, r3
 8005c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	fa93 f2a3 	rbit	r2, r3
 8005c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005c36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c38:	4b88      	ldr	r3, [pc, #544]	; (8005e5c <HAL_RCC_OscConfig+0x934>)
 8005c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c44:	2102      	movs	r1, #2
 8005c46:	6019      	str	r1, [r3, #0]
 8005c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	fa93 f1a3 	rbit	r1, r3
 8005c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c5e:	6019      	str	r1, [r3, #0]
  return result;
 8005c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	fab3 f383 	clz	r3, r3
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f003 031f 	and.w	r3, r3, #31
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0a0      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x6a0>
 8005c86:	e08d      	b.n	8005da4 <HAL_RCC_OscConfig+0x87c>
 8005c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c90:	2201      	movs	r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	fa93 f2a3 	rbit	r2, r3
 8005ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ca6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005caa:	601a      	str	r2, [r3, #0]
  return result;
 8005cac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cb0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cb6:	fab3 f383 	clz	r3, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4b68      	ldr	r3, [pc, #416]	; (8005e60 <HAL_RCC_OscConfig+0x938>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cca:	f7fe fa3f 	bl	800414c <HAL_GetTick>
 8005cce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd2:	e00a      	b.n	8005cea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd4:	f7fe fa3a 	bl	800414c <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d902      	bls.n	8005cea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	f000 bc55 	b.w	8006594 <HAL_RCC_OscConfig+0x106c>
 8005cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cfa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	fa93 f2a3 	rbit	r2, r3
 8005d04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d16:	2202      	movs	r2, #2
 8005d18:	601a      	str	r2, [r3, #0]
 8005d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d1e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	fa93 f2a3 	rbit	r2, r3
 8005d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	fa93 f2a3 	rbit	r2, r3
 8005d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005d54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d56:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <HAL_RCC_OscConfig+0x934>)
 8005d58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005d62:	2102      	movs	r1, #2
 8005d64:	6019      	str	r1, [r3, #0]
 8005d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	fa93 f1a3 	rbit	r1, r3
 8005d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005d7c:	6019      	str	r1, [r3, #0]
  return result;
 8005d7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d82:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	fab3 f383 	clz	r3, r3
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2101      	movs	r1, #1
 8005d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d197      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005da8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 81a1 	beq.w	80060fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dc0:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <HAL_RCC_OscConfig+0x934>)
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d116      	bne.n	8005dfa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dcc:	4b23      	ldr	r3, [pc, #140]	; (8005e5c <HAL_RCC_OscConfig+0x934>)
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	4a22      	ldr	r2, [pc, #136]	; (8005e5c <HAL_RCC_OscConfig+0x934>)
 8005dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	61d3      	str	r3, [r2, #28]
 8005dd8:	4b20      	ldr	r3, [pc, #128]	; (8005e5c <HAL_RCC_OscConfig+0x934>)
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005df2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfa:	4b1a      	ldr	r3, [pc, #104]	; (8005e64 <HAL_RCC_OscConfig+0x93c>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d11a      	bne.n	8005e3c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e06:	4b17      	ldr	r3, [pc, #92]	; (8005e64 <HAL_RCC_OscConfig+0x93c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <HAL_RCC_OscConfig+0x93c>)
 8005e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e12:	f7fe f99b 	bl	800414c <HAL_GetTick>
 8005e16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e1a:	e009      	b.n	8005e30 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1c:	f7fe f996 	bl	800414c <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b64      	cmp	r3, #100	; 0x64
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e3b1      	b.n	8006594 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <HAL_RCC_OscConfig+0x93c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0ef      	beq.n	8005e1c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d10d      	bne.n	8005e68 <HAL_RCC_OscConfig+0x940>
 8005e4c:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <HAL_RCC_OscConfig+0x934>)
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	4a02      	ldr	r2, [pc, #8]	; (8005e5c <HAL_RCC_OscConfig+0x934>)
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	6213      	str	r3, [r2, #32]
 8005e58:	e03c      	b.n	8005ed4 <HAL_RCC_OscConfig+0x9ac>
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	10908120 	.word	0x10908120
 8005e64:	40007000 	.word	0x40007000
 8005e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e6c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10c      	bne.n	8005e92 <HAL_RCC_OscConfig+0x96a>
 8005e78:	4bc1      	ldr	r3, [pc, #772]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	4ac0      	ldr	r2, [pc, #768]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005e7e:	f023 0301 	bic.w	r3, r3, #1
 8005e82:	6213      	str	r3, [r2, #32]
 8005e84:	4bbe      	ldr	r3, [pc, #760]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	4abd      	ldr	r2, [pc, #756]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005e8a:	f023 0304 	bic.w	r3, r3, #4
 8005e8e:	6213      	str	r3, [r2, #32]
 8005e90:	e020      	b.n	8005ed4 <HAL_RCC_OscConfig+0x9ac>
 8005e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	d10c      	bne.n	8005ebc <HAL_RCC_OscConfig+0x994>
 8005ea2:	4bb7      	ldr	r3, [pc, #732]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	4ab6      	ldr	r2, [pc, #728]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005ea8:	f043 0304 	orr.w	r3, r3, #4
 8005eac:	6213      	str	r3, [r2, #32]
 8005eae:	4bb4      	ldr	r3, [pc, #720]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	4ab3      	ldr	r2, [pc, #716]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005eb4:	f043 0301 	orr.w	r3, r3, #1
 8005eb8:	6213      	str	r3, [r2, #32]
 8005eba:	e00b      	b.n	8005ed4 <HAL_RCC_OscConfig+0x9ac>
 8005ebc:	4bb0      	ldr	r3, [pc, #704]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
 8005ec0:	4aaf      	ldr	r2, [pc, #700]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	6213      	str	r3, [r2, #32]
 8005ec8:	4bad      	ldr	r3, [pc, #692]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	4aac      	ldr	r2, [pc, #688]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005ece:	f023 0304 	bic.w	r3, r3, #4
 8005ed2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8081 	beq.w	8005fe8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee6:	f7fe f931 	bl	800414c <HAL_GetTick>
 8005eea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eee:	e00b      	b.n	8005f08 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ef0:	f7fe f92c 	bl	800414c <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e345      	b.n	8006594 <HAL_RCC_OscConfig+0x106c>
 8005f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f0c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005f10:	2202      	movs	r2, #2
 8005f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f18:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	fa93 f2a3 	rbit	r2, r3
 8005f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f26:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f34:	2202      	movs	r2, #2
 8005f36:	601a      	str	r2, [r3, #0]
 8005f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	fa93 f2a3 	rbit	r2, r3
 8005f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f4a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005f4e:	601a      	str	r2, [r3, #0]
  return result;
 8005f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f54:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005f58:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f5a:	fab3 f383 	clz	r3, r3
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d102      	bne.n	8005f74 <HAL_RCC_OscConfig+0xa4c>
 8005f6e:	4b84      	ldr	r3, [pc, #528]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	e013      	b.n	8005f9c <HAL_RCC_OscConfig+0xa74>
 8005f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f78:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f84:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	fa93 f2a3 	rbit	r2, r3
 8005f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f92:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	4b79      	ldr	r3, [pc, #484]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fa0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005fa4:	2102      	movs	r1, #2
 8005fa6:	6011      	str	r1, [r2, #0]
 8005fa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	fa92 f1a2 	rbit	r1, r2
 8005fb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005fbe:	6011      	str	r1, [r2, #0]
  return result;
 8005fc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005fc4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	fab2 f282 	clz	r2, r2
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	f002 021f 	and.w	r2, r2, #31
 8005fda:	2101      	movs	r1, #1
 8005fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d084      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x9c8>
 8005fe6:	e07f      	b.n	80060e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fe8:	f7fe f8b0 	bl	800414c <HAL_GetTick>
 8005fec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff0:	e00b      	b.n	800600a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff2:	f7fe f8ab 	bl	800414c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e2c4      	b.n	8006594 <HAL_RCC_OscConfig+0x106c>
 800600a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800600e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006012:	2202      	movs	r2, #2
 8006014:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800601a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	fa93 f2a3 	rbit	r2, r3
 8006024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006028:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006032:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006036:	2202      	movs	r2, #2
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800603e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	fa93 f2a3 	rbit	r2, r3
 8006048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006050:	601a      	str	r2, [r3, #0]
  return result;
 8006052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006056:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800605a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800605c:	fab3 f383 	clz	r3, r3
 8006060:	b2db      	uxtb	r3, r3
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f043 0302 	orr.w	r3, r3, #2
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d102      	bne.n	8006076 <HAL_RCC_OscConfig+0xb4e>
 8006070:	4b43      	ldr	r3, [pc, #268]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	e013      	b.n	800609e <HAL_RCC_OscConfig+0xb76>
 8006076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800607a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800607e:	2202      	movs	r2, #2
 8006080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006086:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	fa93 f2a3 	rbit	r2, r3
 8006090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006094:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	4b39      	ldr	r3, [pc, #228]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80060a6:	2102      	movs	r1, #2
 80060a8:	6011      	str	r1, [r2, #0]
 80060aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	fa92 f1a2 	rbit	r1, r2
 80060b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80060c0:	6011      	str	r1, [r2, #0]
  return result;
 80060c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	fab2 f282 	clz	r2, r2
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	f002 021f 	and.w	r2, r2, #31
 80060dc:	2101      	movs	r1, #1
 80060de:	fa01 f202 	lsl.w	r2, r1, r2
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d184      	bne.n	8005ff2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80060e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d105      	bne.n	80060fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f0:	4b23      	ldr	r3, [pc, #140]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	4a22      	ldr	r2, [pc, #136]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 80060f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006100:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 8242 	beq.w	8006592 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800610e:	4b1c      	ldr	r3, [pc, #112]	; (8006180 <HAL_RCC_OscConfig+0xc58>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f003 030c 	and.w	r3, r3, #12
 8006116:	2b08      	cmp	r3, #8
 8006118:	f000 8213 	beq.w	8006542 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800611c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006120:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69db      	ldr	r3, [r3, #28]
 8006128:	2b02      	cmp	r3, #2
 800612a:	f040 8162 	bne.w	80063f2 <HAL_RCC_OscConfig+0xeca>
 800612e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006132:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006136:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800613a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006140:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	fa93 f2a3 	rbit	r2, r3
 800614a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800614e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006152:	601a      	str	r2, [r3, #0]
  return result;
 8006154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006158:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800615c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800615e:	fab3 f383 	clz	r3, r3
 8006162:	b2db      	uxtb	r3, r3
 8006164:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006168:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	461a      	mov	r2, r3
 8006170:	2300      	movs	r3, #0
 8006172:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006174:	f7fd ffea 	bl	800414c <HAL_GetTick>
 8006178:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800617c:	e00c      	b.n	8006198 <HAL_RCC_OscConfig+0xc70>
 800617e:	bf00      	nop
 8006180:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006184:	f7fd ffe2 	bl	800414c <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d901      	bls.n	8006198 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e1fd      	b.n	8006594 <HAL_RCC_OscConfig+0x106c>
 8006198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800619c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80061a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	fa93 f2a3 	rbit	r2, r3
 80061b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80061bc:	601a      	str	r2, [r3, #0]
  return result;
 80061be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80061c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061c8:	fab3 f383 	clz	r3, r3
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	f043 0301 	orr.w	r3, r3, #1
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d102      	bne.n	80061e2 <HAL_RCC_OscConfig+0xcba>
 80061dc:	4bb0      	ldr	r3, [pc, #704]	; (80064a0 <HAL_RCC_OscConfig+0xf78>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	e027      	b.n	8006232 <HAL_RCC_OscConfig+0xd0a>
 80061e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80061ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	fa93 f2a3 	rbit	r2, r3
 80061fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006202:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800620c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800621a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	fa93 f2a3 	rbit	r2, r3
 8006224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006228:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	4b9c      	ldr	r3, [pc, #624]	; (80064a0 <HAL_RCC_OscConfig+0xf78>)
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006236:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800623a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800623e:	6011      	str	r1, [r2, #0]
 8006240:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006244:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	fa92 f1a2 	rbit	r1, r2
 800624e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006252:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006256:	6011      	str	r1, [r2, #0]
  return result;
 8006258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800625c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	fab2 f282 	clz	r2, r2
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	f042 0220 	orr.w	r2, r2, #32
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	f002 021f 	and.w	r2, r2, #31
 8006272:	2101      	movs	r1, #1
 8006274:	fa01 f202 	lsl.w	r2, r1, r2
 8006278:	4013      	ands	r3, r2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d182      	bne.n	8006184 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800627e:	4b88      	ldr	r3, [pc, #544]	; (80064a0 <HAL_RCC_OscConfig+0xf78>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800628a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6a1b      	ldr	r3, [r3, #32]
 800629e:	430b      	orrs	r3, r1
 80062a0:	497f      	ldr	r1, [pc, #508]	; (80064a0 <HAL_RCC_OscConfig+0xf78>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	604b      	str	r3, [r1, #4]
 80062a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80062ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	fa93 f2a3 	rbit	r2, r3
 80062c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80062ca:	601a      	str	r2, [r3, #0]
  return result;
 80062cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80062d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062d6:	fab3 f383 	clz	r3, r3
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	461a      	mov	r2, r3
 80062e8:	2301      	movs	r3, #1
 80062ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062ec:	f7fd ff2e 	bl	800414c <HAL_GetTick>
 80062f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062f4:	e009      	b.n	800630a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062f6:	f7fd ff29 	bl	800414c <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e144      	b.n	8006594 <HAL_RCC_OscConfig+0x106c>
 800630a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800630e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800631c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	fa93 f2a3 	rbit	r2, r3
 8006326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800632a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800632e:	601a      	str	r2, [r3, #0]
  return result;
 8006330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006334:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006338:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800633a:	fab3 f383 	clz	r3, r3
 800633e:	b2db      	uxtb	r3, r3
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b01      	cmp	r3, #1
 800634c:	d102      	bne.n	8006354 <HAL_RCC_OscConfig+0xe2c>
 800634e:	4b54      	ldr	r3, [pc, #336]	; (80064a0 <HAL_RCC_OscConfig+0xf78>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	e027      	b.n	80063a4 <HAL_RCC_OscConfig+0xe7c>
 8006354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006358:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800635c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006360:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006366:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	fa93 f2a3 	rbit	r2, r3
 8006370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006374:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800637e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006382:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800638c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	fa93 f2a3 	rbit	r2, r3
 8006396:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800639a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	4b3f      	ldr	r3, [pc, #252]	; (80064a0 <HAL_RCC_OscConfig+0xf78>)
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063a8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80063ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80063b0:	6011      	str	r1, [r2, #0]
 80063b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063b6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	fa92 f1a2 	rbit	r1, r2
 80063c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80063c8:	6011      	str	r1, [r2, #0]
  return result;
 80063ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80063d2:	6812      	ldr	r2, [r2, #0]
 80063d4:	fab2 f282 	clz	r2, r2
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	f042 0220 	orr.w	r2, r2, #32
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	f002 021f 	and.w	r2, r2, #31
 80063e4:	2101      	movs	r1, #1
 80063e6:	fa01 f202 	lsl.w	r2, r1, r2
 80063ea:	4013      	ands	r3, r2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d082      	beq.n	80062f6 <HAL_RCC_OscConfig+0xdce>
 80063f0:	e0cf      	b.n	8006592 <HAL_RCC_OscConfig+0x106a>
 80063f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063f6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80063fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006404:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	fa93 f2a3 	rbit	r2, r3
 800640e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006412:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006416:	601a      	str	r2, [r3, #0]
  return result;
 8006418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800641c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006420:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006422:	fab3 f383 	clz	r3, r3
 8006426:	b2db      	uxtb	r3, r3
 8006428:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800642c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	461a      	mov	r2, r3
 8006434:	2300      	movs	r3, #0
 8006436:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006438:	f7fd fe88 	bl	800414c <HAL_GetTick>
 800643c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006440:	e009      	b.n	8006456 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006442:	f7fd fe83 	bl	800414c <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e09e      	b.n	8006594 <HAL_RCC_OscConfig+0x106c>
 8006456:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800645a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800645e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006468:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	fa93 f2a3 	rbit	r2, r3
 8006472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006476:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800647a:	601a      	str	r2, [r3, #0]
  return result;
 800647c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006480:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006484:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006486:	fab3 f383 	clz	r3, r3
 800648a:	b2db      	uxtb	r3, r3
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	b2db      	uxtb	r3, r3
 8006490:	f043 0301 	orr.w	r3, r3, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d104      	bne.n	80064a4 <HAL_RCC_OscConfig+0xf7c>
 800649a:	4b01      	ldr	r3, [pc, #4]	; (80064a0 <HAL_RCC_OscConfig+0xf78>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	e029      	b.n	80064f4 <HAL_RCC_OscConfig+0xfcc>
 80064a0:	40021000 	.word	0x40021000
 80064a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80064ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	fa93 f2a3 	rbit	r2, r3
 80064c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80064c8:	601a      	str	r2, [r3, #0]
 80064ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80064d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064dc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	fa93 f2a3 	rbit	r2, r3
 80064e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	4b2b      	ldr	r3, [pc, #172]	; (80065a0 <HAL_RCC_OscConfig+0x1078>)
 80064f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80064f8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80064fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006500:	6011      	str	r1, [r2, #0]
 8006502:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006506:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	fa92 f1a2 	rbit	r1, r2
 8006510:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006514:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006518:	6011      	str	r1, [r2, #0]
  return result;
 800651a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800651e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006522:	6812      	ldr	r2, [r2, #0]
 8006524:	fab2 f282 	clz	r2, r2
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	f042 0220 	orr.w	r2, r2, #32
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	f002 021f 	and.w	r2, r2, #31
 8006534:	2101      	movs	r1, #1
 8006536:	fa01 f202 	lsl.w	r2, r1, r2
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d180      	bne.n	8006442 <HAL_RCC_OscConfig+0xf1a>
 8006540:	e027      	b.n	8006592 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006546:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d101      	bne.n	8006556 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e01e      	b.n	8006594 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_RCC_OscConfig+0x1078>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800655e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006562:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800656a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	429a      	cmp	r2, r3
 8006574:	d10b      	bne.n	800658e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8006576:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800657a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800657e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800658a:	429a      	cmp	r2, r3
 800658c:	d001      	beq.n	8006592 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40021000 	.word	0x40021000

080065a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b09e      	sub	sp, #120	; 0x78
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e162      	b.n	8006882 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065bc:	4b90      	ldr	r3, [pc, #576]	; (8006800 <HAL_RCC_ClockConfig+0x25c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0307 	and.w	r3, r3, #7
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d910      	bls.n	80065ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ca:	4b8d      	ldr	r3, [pc, #564]	; (8006800 <HAL_RCC_ClockConfig+0x25c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f023 0207 	bic.w	r2, r3, #7
 80065d2:	498b      	ldr	r1, [pc, #556]	; (8006800 <HAL_RCC_ClockConfig+0x25c>)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065da:	4b89      	ldr	r3, [pc, #548]	; (8006800 <HAL_RCC_ClockConfig+0x25c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d001      	beq.n	80065ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e14a      	b.n	8006882 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d008      	beq.n	800660a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065f8:	4b82      	ldr	r3, [pc, #520]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	497f      	ldr	r1, [pc, #508]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 8006606:	4313      	orrs	r3, r2
 8006608:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 80dc 	beq.w	80067d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d13c      	bne.n	800669a <HAL_RCC_ClockConfig+0xf6>
 8006620:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006624:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006628:	fa93 f3a3 	rbit	r3, r3
 800662c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800662e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006630:	fab3 f383 	clz	r3, r3
 8006634:	b2db      	uxtb	r3, r3
 8006636:	095b      	lsrs	r3, r3, #5
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b01      	cmp	r3, #1
 8006642:	d102      	bne.n	800664a <HAL_RCC_ClockConfig+0xa6>
 8006644:	4b6f      	ldr	r3, [pc, #444]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	e00f      	b.n	800666a <HAL_RCC_ClockConfig+0xc6>
 800664a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800664e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006652:	fa93 f3a3 	rbit	r3, r3
 8006656:	667b      	str	r3, [r7, #100]	; 0x64
 8006658:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800665c:	663b      	str	r3, [r7, #96]	; 0x60
 800665e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006660:	fa93 f3a3 	rbit	r3, r3
 8006664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006666:	4b67      	ldr	r3, [pc, #412]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800666e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006672:	fa92 f2a2 	rbit	r2, r2
 8006676:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006678:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800667a:	fab2 f282 	clz	r2, r2
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	f042 0220 	orr.w	r2, r2, #32
 8006684:	b2d2      	uxtb	r2, r2
 8006686:	f002 021f 	and.w	r2, r2, #31
 800668a:	2101      	movs	r1, #1
 800668c:	fa01 f202 	lsl.w	r2, r1, r2
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d17b      	bne.n	800678e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e0f3      	b.n	8006882 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d13c      	bne.n	800671c <HAL_RCC_ClockConfig+0x178>
 80066a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066aa:	fa93 f3a3 	rbit	r3, r3
 80066ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80066b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066b2:	fab3 f383 	clz	r3, r3
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d102      	bne.n	80066cc <HAL_RCC_ClockConfig+0x128>
 80066c6:	4b4f      	ldr	r3, [pc, #316]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	e00f      	b.n	80066ec <HAL_RCC_ClockConfig+0x148>
 80066cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d4:	fa93 f3a3 	rbit	r3, r3
 80066d8:	647b      	str	r3, [r7, #68]	; 0x44
 80066da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066de:	643b      	str	r3, [r7, #64]	; 0x40
 80066e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e2:	fa93 f3a3 	rbit	r3, r3
 80066e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e8:	4b46      	ldr	r3, [pc, #280]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 80066ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80066f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80066f4:	fa92 f2a2 	rbit	r2, r2
 80066f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80066fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066fc:	fab2 f282 	clz	r2, r2
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	f042 0220 	orr.w	r2, r2, #32
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	f002 021f 	and.w	r2, r2, #31
 800670c:	2101      	movs	r1, #1
 800670e:	fa01 f202 	lsl.w	r2, r1, r2
 8006712:	4013      	ands	r3, r2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d13a      	bne.n	800678e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0b2      	b.n	8006882 <HAL_RCC_ClockConfig+0x2de>
 800671c:	2302      	movs	r3, #2
 800671e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	fa93 f3a3 	rbit	r3, r3
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672a:	fab3 f383 	clz	r3, r3
 800672e:	b2db      	uxtb	r3, r3
 8006730:	095b      	lsrs	r3, r3, #5
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f043 0301 	orr.w	r3, r3, #1
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b01      	cmp	r3, #1
 800673c:	d102      	bne.n	8006744 <HAL_RCC_ClockConfig+0x1a0>
 800673e:	4b31      	ldr	r3, [pc, #196]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	e00d      	b.n	8006760 <HAL_RCC_ClockConfig+0x1bc>
 8006744:	2302      	movs	r3, #2
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	fa93 f3a3 	rbit	r3, r3
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
 8006750:	2302      	movs	r3, #2
 8006752:	623b      	str	r3, [r7, #32]
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	fa93 f3a3 	rbit	r3, r3
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	4b29      	ldr	r3, [pc, #164]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	2202      	movs	r2, #2
 8006762:	61ba      	str	r2, [r7, #24]
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	fa92 f2a2 	rbit	r2, r2
 800676a:	617a      	str	r2, [r7, #20]
  return result;
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	fab2 f282 	clz	r2, r2
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	f042 0220 	orr.w	r2, r2, #32
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	f002 021f 	and.w	r2, r2, #31
 800677e:	2101      	movs	r1, #1
 8006780:	fa01 f202 	lsl.w	r2, r1, r2
 8006784:	4013      	ands	r3, r2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e079      	b.n	8006882 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800678e:	4b1d      	ldr	r3, [pc, #116]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f023 0203 	bic.w	r2, r3, #3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	491a      	ldr	r1, [pc, #104]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 800679c:	4313      	orrs	r3, r2
 800679e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067a0:	f7fd fcd4 	bl	800414c <HAL_GetTick>
 80067a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067a6:	e00a      	b.n	80067be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067a8:	f7fd fcd0 	bl	800414c <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e061      	b.n	8006882 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067be:	4b11      	ldr	r3, [pc, #68]	; (8006804 <HAL_RCC_ClockConfig+0x260>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f003 020c 	and.w	r2, r3, #12
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d1eb      	bne.n	80067a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067d0:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <HAL_RCC_ClockConfig+0x25c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d214      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_RCC_ClockConfig+0x25c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f023 0207 	bic.w	r2, r3, #7
 80067e6:	4906      	ldr	r1, [pc, #24]	; (8006800 <HAL_RCC_ClockConfig+0x25c>)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ee:	4b04      	ldr	r3, [pc, #16]	; (8006800 <HAL_RCC_ClockConfig+0x25c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d005      	beq.n	8006808 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e040      	b.n	8006882 <HAL_RCC_ClockConfig+0x2de>
 8006800:	40022000 	.word	0x40022000
 8006804:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006814:	4b1d      	ldr	r3, [pc, #116]	; (800688c <HAL_RCC_ClockConfig+0x2e8>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	491a      	ldr	r1, [pc, #104]	; (800688c <HAL_RCC_ClockConfig+0x2e8>)
 8006822:	4313      	orrs	r3, r2
 8006824:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006832:	4b16      	ldr	r3, [pc, #88]	; (800688c <HAL_RCC_ClockConfig+0x2e8>)
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4912      	ldr	r1, [pc, #72]	; (800688c <HAL_RCC_ClockConfig+0x2e8>)
 8006842:	4313      	orrs	r3, r2
 8006844:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006846:	f000 f829 	bl	800689c <HAL_RCC_GetSysClockFreq>
 800684a:	4601      	mov	r1, r0
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <HAL_RCC_ClockConfig+0x2e8>)
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006854:	22f0      	movs	r2, #240	; 0xf0
 8006856:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	fa92 f2a2 	rbit	r2, r2
 800685e:	60fa      	str	r2, [r7, #12]
  return result;
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	fab2 f282 	clz	r2, r2
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	40d3      	lsrs	r3, r2
 800686a:	4a09      	ldr	r2, [pc, #36]	; (8006890 <HAL_RCC_ClockConfig+0x2ec>)
 800686c:	5cd3      	ldrb	r3, [r2, r3]
 800686e:	fa21 f303 	lsr.w	r3, r1, r3
 8006872:	4a08      	ldr	r2, [pc, #32]	; (8006894 <HAL_RCC_ClockConfig+0x2f0>)
 8006874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <HAL_RCC_ClockConfig+0x2f4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f7fd fc22 	bl	80040c4 <HAL_InitTick>
  
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3778      	adds	r7, #120	; 0x78
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40021000 	.word	0x40021000
 8006890:	08011b3c 	.word	0x08011b3c
 8006894:	20000004 	.word	0x20000004
 8006898:	20000008 	.word	0x20000008

0800689c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800689c:	b480      	push	{r7}
 800689e:	b08b      	sub	sp, #44	; 0x2c
 80068a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61fb      	str	r3, [r7, #28]
 80068a6:	2300      	movs	r3, #0
 80068a8:	61bb      	str	r3, [r7, #24]
 80068aa:	2300      	movs	r3, #0
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
 80068ae:	2300      	movs	r3, #0
 80068b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80068b6:	4b29      	ldr	r3, [pc, #164]	; (800695c <HAL_RCC_GetSysClockFreq+0xc0>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f003 030c 	and.w	r3, r3, #12
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d002      	beq.n	80068cc <HAL_RCC_GetSysClockFreq+0x30>
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d003      	beq.n	80068d2 <HAL_RCC_GetSysClockFreq+0x36>
 80068ca:	e03c      	b.n	8006946 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80068cc:	4b24      	ldr	r3, [pc, #144]	; (8006960 <HAL_RCC_GetSysClockFreq+0xc4>)
 80068ce:	623b      	str	r3, [r7, #32]
      break;
 80068d0:	e03c      	b.n	800694c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80068d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80068dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	fa92 f2a2 	rbit	r2, r2
 80068e4:	607a      	str	r2, [r7, #4]
  return result;
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	fab2 f282 	clz	r2, r2
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	40d3      	lsrs	r3, r2
 80068f0:	4a1c      	ldr	r2, [pc, #112]	; (8006964 <HAL_RCC_GetSysClockFreq+0xc8>)
 80068f2:	5cd3      	ldrb	r3, [r2, r3]
 80068f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80068f6:	4b19      	ldr	r3, [pc, #100]	; (800695c <HAL_RCC_GetSysClockFreq+0xc0>)
 80068f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	220f      	movs	r2, #15
 8006900:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	fa92 f2a2 	rbit	r2, r2
 8006908:	60fa      	str	r2, [r7, #12]
  return result;
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	fab2 f282 	clz	r2, r2
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	40d3      	lsrs	r3, r2
 8006914:	4a14      	ldr	r2, [pc, #80]	; (8006968 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006916:	5cd3      	ldrb	r3, [r2, r3]
 8006918:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006924:	4a0e      	ldr	r2, [pc, #56]	; (8006960 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	fbb2 f2f3 	udiv	r2, r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	fb02 f303 	mul.w	r3, r2, r3
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
 8006934:	e004      	b.n	8006940 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	4a0c      	ldr	r2, [pc, #48]	; (800696c <HAL_RCC_GetSysClockFreq+0xd0>)
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006942:	623b      	str	r3, [r7, #32]
      break;
 8006944:	e002      	b.n	800694c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006946:	4b06      	ldr	r3, [pc, #24]	; (8006960 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006948:	623b      	str	r3, [r7, #32]
      break;
 800694a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800694c:	6a3b      	ldr	r3, [r7, #32]
}
 800694e:	4618      	mov	r0, r3
 8006950:	372c      	adds	r7, #44	; 0x2c
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40021000 	.word	0x40021000
 8006960:	007a1200 	.word	0x007a1200
 8006964:	08011b54 	.word	0x08011b54
 8006968:	08011b64 	.word	0x08011b64
 800696c:	003d0900 	.word	0x003d0900

08006970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006974:	4b03      	ldr	r3, [pc, #12]	; (8006984 <HAL_RCC_GetHCLKFreq+0x14>)
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	4618      	mov	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	20000004 	.word	0x20000004

08006988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800698e:	f7ff ffef 	bl	8006970 <HAL_RCC_GetHCLKFreq>
 8006992:	4601      	mov	r1, r0
 8006994:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800699c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80069a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	fa92 f2a2 	rbit	r2, r2
 80069a8:	603a      	str	r2, [r7, #0]
  return result;
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	fab2 f282 	clz	r2, r2
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	40d3      	lsrs	r3, r2
 80069b4:	4a04      	ldr	r2, [pc, #16]	; (80069c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80069b6:	5cd3      	ldrb	r3, [r2, r3]
 80069b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40021000 	.word	0x40021000
 80069c8:	08011b4c 	.word	0x08011b4c

080069cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80069d2:	f7ff ffcd 	bl	8006970 <HAL_RCC_GetHCLKFreq>
 80069d6:	4601      	mov	r1, r0
 80069d8:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80069e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80069e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	fa92 f2a2 	rbit	r2, r2
 80069ec:	603a      	str	r2, [r7, #0]
  return result;
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	fab2 f282 	clz	r2, r2
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	40d3      	lsrs	r3, r2
 80069f8:	4a04      	ldr	r2, [pc, #16]	; (8006a0c <HAL_RCC_GetPCLK2Freq+0x40>)
 80069fa:	5cd3      	ldrb	r3, [r2, r3]
 80069fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	08011b4c 	.word	0x08011b4c

08006a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b092      	sub	sp, #72	; 0x48
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 80d4 	beq.w	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a34:	4b4e      	ldr	r3, [pc, #312]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10e      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a40:	4b4b      	ldr	r3, [pc, #300]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	4a4a      	ldr	r2, [pc, #296]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4a:	61d3      	str	r3, [r2, #28]
 8006a4c:	4b48      	ldr	r3, [pc, #288]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a54:	60bb      	str	r3, [r7, #8]
 8006a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a5e:	4b45      	ldr	r3, [pc, #276]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d118      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a6a:	4b42      	ldr	r3, [pc, #264]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a41      	ldr	r2, [pc, #260]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a76:	f7fd fb69 	bl	800414c <HAL_GetTick>
 8006a7a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7c:	e008      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a7e:	f7fd fb65 	bl	800414c <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	2b64      	cmp	r3, #100	; 0x64
 8006a8a:	d901      	bls.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e169      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a90:	4b38      	ldr	r3, [pc, #224]	; (8006b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f0      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a9c:	4b34      	ldr	r3, [pc, #208]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8084 	beq.w	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ab6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d07c      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006abc:	4b2c      	ldr	r3, [pc, #176]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006aca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	fa93 f3a3 	rbit	r3, r3
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ad6:	fab3 f383 	clz	r3, r3
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	4b26      	ldr	r3, [pc, #152]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006aee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af2:	fa93 f3a3 	rbit	r3, r3
 8006af6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006afa:	fab3 f383 	clz	r3, r3
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	461a      	mov	r2, r3
 8006b02:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006b04:	4413      	add	r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	461a      	mov	r2, r3
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006b0e:	4a18      	ldr	r2, [pc, #96]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b12:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d04b      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b1e:	f7fd fb15 	bl	800414c <HAL_GetTick>
 8006b22:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b26:	f7fd fb11 	bl	800414c <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e113      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b42:	fa93 f3a3 	rbit	r3, r3
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
 8006b48:	2302      	movs	r3, #2
 8006b4a:	623b      	str	r3, [r7, #32]
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	fa93 f3a3 	rbit	r3, r3
 8006b52:	61fb      	str	r3, [r7, #28]
  return result;
 8006b54:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b56:	fab3 f383 	clz	r3, r3
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	095b      	lsrs	r3, r3, #5
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f043 0302 	orr.w	r3, r3, #2
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d108      	bne.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006b6a:	4b01      	ldr	r3, [pc, #4]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	e00d      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006b70:	40021000 	.word	0x40021000
 8006b74:	40007000 	.word	0x40007000
 8006b78:	10908100 	.word	0x10908100
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	fa93 f3a3 	rbit	r3, r3
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	4b78      	ldr	r3, [pc, #480]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	613a      	str	r2, [r7, #16]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	fa92 f2a2 	rbit	r2, r2
 8006b96:	60fa      	str	r2, [r7, #12]
  return result;
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	fab2 f282 	clz	r2, r2
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	f002 021f 	and.w	r2, r2, #31
 8006baa:	2101      	movs	r1, #1
 8006bac:	fa01 f202 	lsl.w	r2, r1, r2
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0b7      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006bb6:	4b6d      	ldr	r3, [pc, #436]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	496a      	ldr	r1, [pc, #424]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006bc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d105      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd0:	4b66      	ldr	r3, [pc, #408]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	4a65      	ldr	r2, [pc, #404]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d008      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006be8:	4b60      	ldr	r3, [pc, #384]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	f023 0203 	bic.w	r2, r3, #3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	495d      	ldr	r1, [pc, #372]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c06:	4b59      	ldr	r3, [pc, #356]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	4956      	ldr	r1, [pc, #344]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c24:	4b51      	ldr	r3, [pc, #324]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	494e      	ldr	r1, [pc, #312]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c42:	4b4a      	ldr	r3, [pc, #296]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	f023 0210 	bic.w	r2, r3, #16
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	4947      	ldr	r1, [pc, #284]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d008      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006c60:	4b42      	ldr	r3, [pc, #264]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	493f      	ldr	r1, [pc, #252]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c7e:	4b3b      	ldr	r3, [pc, #236]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	f023 0220 	bic.w	r2, r3, #32
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	4938      	ldr	r1, [pc, #224]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0308 	and.w	r3, r3, #8
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d008      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c9c:	4b33      	ldr	r3, [pc, #204]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	4930      	ldr	r1, [pc, #192]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d008      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cba:	4b2c      	ldr	r3, [pc, #176]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	4929      	ldr	r1, [pc, #164]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cd8:	4b24      	ldr	r3, [pc, #144]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	4921      	ldr	r1, [pc, #132]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006cf6:	4b1d      	ldr	r3, [pc, #116]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	491a      	ldr	r1, [pc, #104]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d008      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006d14:	4b15      	ldr	r3, [pc, #84]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	4912      	ldr	r1, [pc, #72]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d008      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006d32:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	490b      	ldr	r1, [pc, #44]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006d50:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5c:	4903      	ldr	r1, [pc, #12]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3748      	adds	r7, #72	; 0x48
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40021000 	.word	0x40021000

08006d70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e073      	b.n	8006e6e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	7f5b      	ldrb	r3, [r3, #29]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d105      	bne.n	8006d9c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fc fe64 	bl	8003a64 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d055      	beq.n	8006e5c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	22ca      	movs	r2, #202	; 0xca
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2253      	movs	r2, #83	; 0x53
 8006dbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 f9c5 	bl	8007150 <RTC_EnterInitMode>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d12c      	bne.n	8006e2a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	6812      	ldr	r2, [r2, #0]
 8006dda:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006de2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6899      	ldr	r1, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68d2      	ldr	r2, [r2, #12]
 8006e0a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6919      	ldr	r1, [r3, #16]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	041a      	lsls	r2, r3, #16
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f9cc 	bl	80071be <RTC_ExitInitMode>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d110      	bne.n	8006e52 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	22ff      	movs	r2, #255	; 0xff
 8006e58:	625a      	str	r2, [r3, #36]	; 0x24
 8006e5a:	e001      	b.n	8006e60 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006e76:	b590      	push	{r4, r7, lr}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	60f8      	str	r0, [r7, #12]
 8006e7e:	60b9      	str	r1, [r7, #8]
 8006e80:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	7f1b      	ldrb	r3, [r3, #28]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <HAL_RTC_SetTime+0x1c>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e087      	b.n	8006fa2 <HAL_RTC_SetTime+0x12c>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d126      	bne.n	8006ef2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 f9a3 	bl	8007208 <RTC_ByteToBcd2>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	785b      	ldrb	r3, [r3, #1]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f99c 	bl	8007208 <RTC_ByteToBcd2>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006ed4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	789b      	ldrb	r3, [r3, #2]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 f994 	bl	8007208 <RTC_ByteToBcd2>
 8006ee0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006ee2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	78db      	ldrb	r3, [r3, #3]
 8006eea:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	e018      	b.n	8006f24 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2200      	movs	r2, #0
 8006f04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f12:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006f18:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	78db      	ldrb	r3, [r3, #3]
 8006f1e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006f20:	4313      	orrs	r3, r2
 8006f22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	22ca      	movs	r2, #202	; 0xca
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2253      	movs	r2, #83	; 0x53
 8006f32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f90b 	bl	8007150 <RTC_EnterInitMode>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006f3e:	7cfb      	ldrb	r3, [r7, #19]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d120      	bne.n	8006f86 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006f4e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006f52:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f62:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6899      	ldr	r1, [r3, #8]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f91e 	bl	80071be <RTC_ExitInitMode>
 8006f82:	4603      	mov	r3, r0
 8006f84:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006f86:	7cfb      	ldrb	r3, [r7, #19]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d102      	bne.n	8006f92 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	22ff      	movs	r2, #255	; 0xff
 8006f98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	771a      	strb	r2, [r3, #28]

  return status;
 8006fa0:	7cfb      	ldrb	r3, [r7, #19]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd90      	pop	{r4, r7, pc}

08006faa <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b086      	sub	sp, #24
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006fdc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	0c1b      	lsrs	r3, r3, #16
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800700a:	b2da      	uxtb	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	0d9b      	lsrs	r3, r3, #22
 8007014:	b2db      	uxtb	r3, r3
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	b2da      	uxtb	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d11a      	bne.n	800705c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f90a 	bl	8007244 <RTC_Bcd2ToByte>
 8007030:	4603      	mov	r3, r0
 8007032:	461a      	mov	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	4618      	mov	r0, r3
 800703e:	f000 f901 	bl	8007244 <RTC_Bcd2ToByte>
 8007042:	4603      	mov	r3, r0
 8007044:	461a      	mov	r2, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	789b      	ldrb	r3, [r3, #2]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 f8f8 	bl	8007244 <RTC_Bcd2ToByte>
 8007054:	4603      	mov	r3, r0
 8007056:	461a      	mov	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b086      	sub	sp, #24
 800706a:	af00      	add	r7, sp, #0
 800706c:	60f8      	str	r0, [r7, #12]
 800706e:	60b9      	str	r1, [r7, #8]
 8007070:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007080:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007084:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	0c1b      	lsrs	r3, r3, #16
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	0a1b      	lsrs	r3, r3, #8
 8007094:	b2db      	uxtb	r3, r3
 8007096:	f003 031f 	and.w	r3, r3, #31
 800709a:	b2da      	uxtb	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	0b5b      	lsrs	r3, r3, #13
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11a      	bne.n	80070fa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	78db      	ldrb	r3, [r3, #3]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f8bb 	bl	8007244 <RTC_Bcd2ToByte>
 80070ce:	4603      	mov	r3, r0
 80070d0:	461a      	mov	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 f8b2 	bl	8007244 <RTC_Bcd2ToByte>
 80070e0:	4603      	mov	r3, r0
 80070e2:	461a      	mov	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	789b      	ldrb	r3, [r3, #2]
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 f8a9 	bl	8007244 <RTC_Bcd2ToByte>
 80070f2:	4603      	mov	r3, r0
 80070f4:	461a      	mov	r2, r3
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a0d      	ldr	r2, [pc, #52]	; (800714c <HAL_RTC_WaitForSynchro+0x48>)
 8007116:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007118:	f7fd f818 	bl	800414c <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800711e:	e009      	b.n	8007134 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007120:	f7fd f814 	bl	800414c <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712e:	d901      	bls.n	8007134 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e007      	b.n	8007144 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0ee      	beq.n	8007120 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	0001ff5f 	.word	0x0001ff5f

08007150 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800715c:	2300      	movs	r3, #0
 800715e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	d122      	bne.n	80071b4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800717c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800717e:	f7fc ffe5 	bl	800414c <HAL_GetTick>
 8007182:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007184:	e00c      	b.n	80071a0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007186:	f7fc ffe1 	bl	800414c <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007194:	d904      	bls.n	80071a0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2204      	movs	r2, #4
 800719a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <RTC_EnterInitMode+0x64>
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d1e8      	bne.n	8007186 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c6:	2300      	movs	r3, #0
 80071c8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071d8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f003 0320 	and.w	r3, r3, #32
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff ff8b 	bl	8007104 <HAL_RTC_WaitForSynchro>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2204      	movs	r2, #4
 80071f8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	4603      	mov	r3, r0
 8007210:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007212:	2300      	movs	r3, #0
 8007214:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007216:	e005      	b.n	8007224 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800721e:	79fb      	ldrb	r3, [r7, #7]
 8007220:	3b0a      	subs	r3, #10
 8007222:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b09      	cmp	r3, #9
 8007228:	d8f6      	bhi.n	8007218 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	b2db      	uxtb	r3, r3
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	b2da      	uxtb	r2, r3
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	4313      	orrs	r3, r2
 8007236:	b2db      	uxtb	r3, r3
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	091b      	lsrs	r3, r3, #4
 8007256:	b2db      	uxtb	r3, r3
 8007258:	461a      	mov	r2, r3
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	b2da      	uxtb	r2, r3
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	b2db      	uxtb	r3, r3
 8007270:	4413      	add	r3, r2
 8007272:	b2db      	uxtb	r3, r3
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e09d      	b.n	80073ce <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b00      	cmp	r3, #0
 8007298:	d108      	bne.n	80072ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072a2:	d009      	beq.n	80072b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	61da      	str	r2, [r3, #28]
 80072aa:	e005      	b.n	80072b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d106      	bne.n	80072d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fc fc68 	bl	8003ba8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072f8:	d902      	bls.n	8007300 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	e002      	b.n	8007306 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007304:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800730e:	d007      	beq.n	8007320 <HAL_SPI_Init+0xa0>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007318:	d002      	beq.n	8007320 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a1b      	ldr	r3, [r3, #32]
 800735e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007362:	ea42 0103 	orr.w	r1, r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	0c1b      	lsrs	r3, r3, #16
 800737c:	f003 0204 	and.w	r2, r3, #4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	f003 0310 	and.w	r3, r3, #16
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800739c:	ea42 0103 	orr.w	r1, r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b088      	sub	sp, #32
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_SPI_Transmit+0x22>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e15f      	b.n	80076b8 <HAL_SPI_Transmit+0x2e2>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007400:	f7fc fea4 	bl	800414c <HAL_GetTick>
 8007404:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b01      	cmp	r3, #1
 8007414:	d002      	beq.n	800741c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007416:	2302      	movs	r3, #2
 8007418:	77fb      	strb	r3, [r7, #31]
    goto error;
 800741a:	e148      	b.n	80076ae <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_SPI_Transmit+0x52>
 8007422:	88fb      	ldrh	r3, [r7, #6]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d102      	bne.n	800742e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800742c:	e13f      	b.n	80076ae <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2203      	movs	r2, #3
 8007432:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	88fa      	ldrh	r2, [r7, #6]
 8007446:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	88fa      	ldrh	r2, [r7, #6]
 800744c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007478:	d10f      	bne.n	800749a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007488:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007498:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a4:	2b40      	cmp	r3, #64	; 0x40
 80074a6:	d007      	beq.n	80074b8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074c0:	d94f      	bls.n	8007562 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_SPI_Transmit+0xfa>
 80074ca:	8afb      	ldrh	r3, [r7, #22]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d142      	bne.n	8007556 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	881a      	ldrh	r2, [r3, #0]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	1c9a      	adds	r2, r3, #2
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074f4:	e02f      	b.n	8007556 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b02      	cmp	r3, #2
 8007502:	d112      	bne.n	800752a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007508:	881a      	ldrh	r2, [r3, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	1c9a      	adds	r2, r3, #2
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751e:	b29b      	uxth	r3, r3
 8007520:	3b01      	subs	r3, #1
 8007522:	b29a      	uxth	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007528:	e015      	b.n	8007556 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800752a:	f7fc fe0f 	bl	800414c <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d803      	bhi.n	8007542 <HAL_SPI_Transmit+0x16c>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d102      	bne.n	8007548 <HAL_SPI_Transmit+0x172>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d106      	bne.n	8007556 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007554:	e0ab      	b.n	80076ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800755a:	b29b      	uxth	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1ca      	bne.n	80074f6 <HAL_SPI_Transmit+0x120>
 8007560:	e080      	b.n	8007664 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <HAL_SPI_Transmit+0x19a>
 800756a:	8afb      	ldrh	r3, [r7, #22]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d174      	bne.n	800765a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b01      	cmp	r3, #1
 8007578:	d912      	bls.n	80075a0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	881a      	ldrh	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	1c9a      	adds	r2, r3, #2
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007594:	b29b      	uxth	r3, r3
 8007596:	3b02      	subs	r3, #2
 8007598:	b29a      	uxth	r2, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800759e:	e05c      	b.n	800765a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	7812      	ldrb	r2, [r2, #0]
 80075ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80075c6:	e048      	b.n	800765a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d12b      	bne.n	800762e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075da:	b29b      	uxth	r3, r3
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d912      	bls.n	8007606 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	881a      	ldrh	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	1c9a      	adds	r2, r3, #2
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	3b02      	subs	r3, #2
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007604:	e029      	b.n	800765a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	330c      	adds	r3, #12
 8007610:	7812      	ldrb	r2, [r2, #0]
 8007612:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007618:	1c5a      	adds	r2, r3, #1
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007622:	b29b      	uxth	r3, r3
 8007624:	3b01      	subs	r3, #1
 8007626:	b29a      	uxth	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800762c:	e015      	b.n	800765a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800762e:	f7fc fd8d 	bl	800414c <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d803      	bhi.n	8007646 <HAL_SPI_Transmit+0x270>
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d102      	bne.n	800764c <HAL_SPI_Transmit+0x276>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d106      	bne.n	800765a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007658:	e029      	b.n	80076ae <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1b1      	bne.n	80075c8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	6839      	ldr	r1, [r7, #0]
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 fd07 	bl	800807c <SPI_EndRxTxTransaction>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d002      	beq.n	800767a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007682:	2300      	movs	r3, #0
 8007684:	613b      	str	r3, [r7, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	77fb      	strb	r3, [r7, #31]
 80076a4:	e003      	b.n	80076ae <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80076b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3720      	adds	r7, #32
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	603b      	str	r3, [r7, #0]
 80076cc:	4613      	mov	r3, r2
 80076ce:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d002      	beq.n	80076e6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80076e0:	2302      	movs	r3, #2
 80076e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076e4:	e11a      	b.n	800791c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ee:	d112      	bne.n	8007716 <HAL_SPI_Receive+0x56>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10e      	bne.n	8007716 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2204      	movs	r2, #4
 80076fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007700:	88fa      	ldrh	r2, [r7, #6]
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	4613      	mov	r3, r2
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	68b9      	ldr	r1, [r7, #8]
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f90e 	bl	800792e <HAL_SPI_TransmitReceive>
 8007712:	4603      	mov	r3, r0
 8007714:	e107      	b.n	8007926 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_SPI_Receive+0x64>
 8007720:	2302      	movs	r3, #2
 8007722:	e100      	b.n	8007926 <HAL_SPI_Receive+0x266>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800772c:	f7fc fd0e 	bl	800414c <HAL_GetTick>
 8007730:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <HAL_SPI_Receive+0x7e>
 8007738:	88fb      	ldrh	r3, [r7, #6]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007742:	e0eb      	b.n	800791c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2204      	movs	r2, #4
 8007748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	88fa      	ldrh	r2, [r7, #6]
 800775c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	88fa      	ldrh	r2, [r7, #6]
 8007764:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800778e:	d908      	bls.n	80077a2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800779e:	605a      	str	r2, [r3, #4]
 80077a0:	e007      	b.n	80077b2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077b0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077ba:	d10f      	bne.n	80077dc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077da:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d007      	beq.n	80077fa <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077f8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007802:	d86f      	bhi.n	80078e4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007804:	e034      	b.n	8007870 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b01      	cmp	r3, #1
 8007812:	d117      	bne.n	8007844 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f103 020c 	add.w	r2, r3, #12
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007820:	7812      	ldrb	r2, [r2, #0]
 8007822:	b2d2      	uxtb	r2, r2
 8007824:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	1c5a      	adds	r2, r3, #1
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b29a      	uxth	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007842:	e015      	b.n	8007870 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007844:	f7fc fc82 	bl	800414c <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d803      	bhi.n	800785c <HAL_SPI_Receive+0x19c>
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785a:	d102      	bne.n	8007862 <HAL_SPI_Receive+0x1a2>
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800786e:	e055      	b.n	800791c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007876:	b29b      	uxth	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1c4      	bne.n	8007806 <HAL_SPI_Receive+0x146>
 800787c:	e038      	b.n	80078f0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b01      	cmp	r3, #1
 800788a:	d115      	bne.n	80078b8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	b292      	uxth	r2, r2
 8007898:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	1c9a      	adds	r2, r3, #2
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	b29a      	uxth	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80078b6:	e015      	b.n	80078e4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078b8:	f7fc fc48 	bl	800414c <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d803      	bhi.n	80078d0 <HAL_SPI_Receive+0x210>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ce:	d102      	bne.n	80078d6 <HAL_SPI_Receive+0x216>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80078e2:	e01b      	b.n	800791c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1c6      	bne.n	800787e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fb69 	bl	8007fcc <SPI_EndRxTransaction>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	75fb      	strb	r3, [r7, #23]
 8007912:	e003      	b.n	800791c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007924:	7dfb      	ldrb	r3, [r7, #23]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b08a      	sub	sp, #40	; 0x28
 8007932:	af00      	add	r7, sp, #0
 8007934:	60f8      	str	r0, [r7, #12]
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	607a      	str	r2, [r7, #4]
 800793a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800793c:	2301      	movs	r3, #1
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007940:	2300      	movs	r3, #0
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_SPI_TransmitReceive+0x26>
 8007950:	2302      	movs	r3, #2
 8007952:	e20a      	b.n	8007d6a <HAL_SPI_TransmitReceive+0x43c>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800795c:	f7fc fbf6 	bl	800414c <HAL_GetTick>
 8007960:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007968:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007970:	887b      	ldrh	r3, [r7, #2]
 8007972:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007974:	887b      	ldrh	r3, [r7, #2]
 8007976:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007978:	7efb      	ldrb	r3, [r7, #27]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d00e      	beq.n	800799c <HAL_SPI_TransmitReceive+0x6e>
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007984:	d106      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <HAL_SPI_TransmitReceive+0x66>
 800798e:	7efb      	ldrb	r3, [r7, #27]
 8007990:	2b04      	cmp	r3, #4
 8007992:	d003      	beq.n	800799c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007994:	2302      	movs	r3, #2
 8007996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800799a:	e1e0      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d005      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x80>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x80>
 80079a8:	887b      	ldrh	r3, [r7, #2]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d103      	bne.n	80079b6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80079b4:	e1d3      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b04      	cmp	r3, #4
 80079c0:	d003      	beq.n	80079ca <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2205      	movs	r2, #5
 80079c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	887a      	ldrh	r2, [r7, #2]
 80079da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	887a      	ldrh	r2, [r7, #2]
 80079e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	887a      	ldrh	r2, [r7, #2]
 80079f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	887a      	ldrh	r2, [r7, #2]
 80079f6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a0c:	d802      	bhi.n	8007a14 <HAL_SPI_TransmitReceive+0xe6>
 8007a0e:	8a3b      	ldrh	r3, [r7, #16]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d908      	bls.n	8007a26 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007a22:	605a      	str	r2, [r3, #4]
 8007a24:	e007      	b.n	8007a36 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a34:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a40:	2b40      	cmp	r3, #64	; 0x40
 8007a42:	d007      	beq.n	8007a54 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a5c:	f240 8081 	bls.w	8007b62 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_SPI_TransmitReceive+0x140>
 8007a68:	8a7b      	ldrh	r3, [r7, #18]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d16d      	bne.n	8007b4a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	881a      	ldrh	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	1c9a      	adds	r2, r3, #2
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a92:	e05a      	b.n	8007b4a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d11b      	bne.n	8007ada <HAL_SPI_TransmitReceive+0x1ac>
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d016      	beq.n	8007ada <HAL_SPI_TransmitReceive+0x1ac>
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d113      	bne.n	8007ada <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	881a      	ldrh	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	1c9a      	adds	r2, r3, #2
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d11c      	bne.n	8007b22 <HAL_SPI_TransmitReceive+0x1f4>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d016      	beq.n	8007b22 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	b292      	uxth	r2, r2
 8007b00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	1c9a      	adds	r2, r3, #2
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b22:	f7fc fb13 	bl	800414c <HAL_GetTick>
 8007b26:	4602      	mov	r2, r0
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d80b      	bhi.n	8007b4a <HAL_SPI_TransmitReceive+0x21c>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b38:	d007      	beq.n	8007b4a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007b48:	e109      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d19f      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x166>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d199      	bne.n	8007a94 <HAL_SPI_TransmitReceive+0x166>
 8007b60:	e0e3      	b.n	8007d2a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_SPI_TransmitReceive+0x244>
 8007b6a:	8a7b      	ldrh	r3, [r7, #18]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	f040 80cf 	bne.w	8007d10 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d912      	bls.n	8007ba2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	881a      	ldrh	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	1c9a      	adds	r2, r3, #2
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b02      	subs	r3, #2
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ba0:	e0b6      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	7812      	ldrb	r2, [r2, #0]
 8007bae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bc8:	e0a2      	b.n	8007d10 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d134      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x314>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d02f      	beq.n	8007c42 <HAL_SPI_TransmitReceive+0x314>
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d12c      	bne.n	8007c42 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d912      	bls.n	8007c18 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	881a      	ldrh	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	1c9a      	adds	r2, r3, #2
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b02      	subs	r3, #2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c16:	e012      	b.n	8007c3e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	330c      	adds	r3, #12
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	1c5a      	adds	r2, r3, #1
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	3b01      	subs	r3, #1
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d148      	bne.n	8007ce2 <HAL_SPI_TransmitReceive+0x3b4>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d042      	beq.n	8007ce2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d923      	bls.n	8007cb0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c72:	b292      	uxth	r2, r2
 8007c74:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7a:	1c9a      	adds	r2, r3, #2
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	3b02      	subs	r3, #2
 8007c8a:	b29a      	uxth	r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d81f      	bhi.n	8007cde <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cac:	605a      	str	r2, [r3, #4]
 8007cae:	e016      	b.n	8007cde <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f103 020c 	add.w	r2, r3, #12
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	7812      	ldrb	r2, [r2, #0]
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ce2:	f7fc fa33 	bl	800414c <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d803      	bhi.n	8007cfa <HAL_SPI_TransmitReceive+0x3cc>
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf8:	d102      	bne.n	8007d00 <HAL_SPI_TransmitReceive+0x3d2>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d107      	bne.n	8007d10 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007d0e:	e026      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f47f af57 	bne.w	8007bca <HAL_SPI_TransmitReceive+0x29c>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f47f af50 	bne.w	8007bca <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d2a:	69fa      	ldr	r2, [r7, #28]
 8007d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f9a4 	bl	800807c <SPI_EndRxTxTransaction>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d005      	beq.n	8007d46 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2220      	movs	r2, #32
 8007d44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d54:	e003      	b.n	8007d5e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007d66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3728      	adds	r7, #40	; 0x28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d80:	b2db      	uxtb	r3, r3
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
	...

08007d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	603b      	str	r3, [r7, #0]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007da0:	f7fc f9d4 	bl	800414c <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da8:	1a9b      	subs	r3, r3, r2
 8007daa:	683a      	ldr	r2, [r7, #0]
 8007dac:	4413      	add	r3, r2
 8007dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007db0:	f7fc f9cc 	bl	800414c <HAL_GetTick>
 8007db4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007db6:	4b39      	ldr	r3, [pc, #228]	; (8007e9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	015b      	lsls	r3, r3, #5
 8007dbc:	0d1b      	lsrs	r3, r3, #20
 8007dbe:	69fa      	ldr	r2, [r7, #28]
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dc6:	e054      	b.n	8007e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dce:	d050      	beq.n	8007e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007dd0:	f7fc f9bc 	bl	800414c <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d902      	bls.n	8007de6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d13d      	bne.n	8007e62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dfe:	d111      	bne.n	8007e24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e08:	d004      	beq.n	8007e14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e12:	d107      	bne.n	8007e24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e2c:	d10f      	bne.n	8007e4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e017      	b.n	8007e92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	bf0c      	ite	eq
 8007e82:	2301      	moveq	r3, #1
 8007e84:	2300      	movne	r3, #0
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	79fb      	ldrb	r3, [r7, #7]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d19b      	bne.n	8007dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20000004 	.word	0x20000004

08007ea0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b08a      	sub	sp, #40	; 0x28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007eb2:	f7fc f94b 	bl	800414c <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eba:	1a9b      	subs	r3, r3, r2
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007ec2:	f7fc f943 	bl	800414c <HAL_GetTick>
 8007ec6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	330c      	adds	r3, #12
 8007ece:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007ed0:	4b3d      	ldr	r3, [pc, #244]	; (8007fc8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	00da      	lsls	r2, r3, #3
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	0d1b      	lsrs	r3, r3, #20
 8007ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ee2:	fb02 f303 	mul.w	r3, r2, r3
 8007ee6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007ee8:	e060      	b.n	8007fac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ef0:	d107      	bne.n	8007f02 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d104      	bne.n	8007f02 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007f00:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f08:	d050      	beq.n	8007fac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f0a:	f7fc f91f 	bl	800414c <HAL_GetTick>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d902      	bls.n	8007f20 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d13d      	bne.n	8007f9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f38:	d111      	bne.n	8007f5e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f42:	d004      	beq.n	8007f4e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f4c:	d107      	bne.n	8007f5e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f66:	d10f      	bne.n	8007f88 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e010      	b.n	8007fbe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689a      	ldr	r2, [r3, #8]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d196      	bne.n	8007eea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3728      	adds	r7, #40	; 0x28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000004 	.word	0x20000004

08007fcc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fe0:	d111      	bne.n	8008006 <SPI_EndRxTransaction+0x3a>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fea:	d004      	beq.n	8007ff6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ff4:	d107      	bne.n	8008006 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008004:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2200      	movs	r2, #0
 800800e:	2180      	movs	r1, #128	; 0x80
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f7ff febd 	bl	8007d90 <SPI_WaitFlagStateUntilTimeout>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d007      	beq.n	800802c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008020:	f043 0220 	orr.w	r2, r3, #32
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e023      	b.n	8008074 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008034:	d11d      	bne.n	8008072 <SPI_EndRxTransaction+0xa6>
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800803e:	d004      	beq.n	800804a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008048:	d113      	bne.n	8008072 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2200      	movs	r2, #0
 8008052:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f7ff ff22 	bl	8007ea0 <SPI_WaitFifoStateUntilTimeout>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008066:	f043 0220 	orr.w	r2, r3, #32
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e000      	b.n	8008074 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af02      	add	r7, sp, #8
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2200      	movs	r2, #0
 8008090:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7ff ff03 	bl	8007ea0 <SPI_WaitFifoStateUntilTimeout>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d007      	beq.n	80080b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a4:	f043 0220 	orr.w	r2, r3, #32
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e027      	b.n	8008100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2200      	movs	r2, #0
 80080b8:	2180      	movs	r1, #128	; 0x80
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fe68 	bl	8007d90 <SPI_WaitFlagStateUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ca:	f043 0220 	orr.w	r2, r3, #32
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e014      	b.n	8008100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2200      	movs	r2, #0
 80080de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f7ff fedc 	bl	8007ea0 <SPI_WaitFifoStateUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d007      	beq.n	80080fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080f2:	f043 0220 	orr.w	r2, r3, #32
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e000      	b.n	8008100 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e040      	b.n	800819c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fb ff46 	bl	8003fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2224      	movs	r2, #36	; 0x24
 8008134:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f022 0201 	bic.w	r2, r2, #1
 8008144:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f8b6 	bl	80082b8 <UART_SetConfig>
 800814c:	4603      	mov	r3, r0
 800814e:	2b01      	cmp	r3, #1
 8008150:	d101      	bne.n	8008156 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e022      	b.n	800819c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	2b00      	cmp	r3, #0
 800815c:	d002      	beq.n	8008164 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fa7e 	bl	8008660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0201 	orr.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fb05 	bl	80087a4 <UART_CheckIdleState>
 800819a:	4603      	mov	r3, r0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08a      	sub	sp, #40	; 0x28
 80081a8:	af02      	add	r7, sp, #8
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	603b      	str	r3, [r7, #0]
 80081b0:	4613      	mov	r3, r2
 80081b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081b8:	2b20      	cmp	r3, #32
 80081ba:	d178      	bne.n	80082ae <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <HAL_UART_Transmit+0x24>
 80081c2:	88fb      	ldrh	r3, [r7, #6]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e071      	b.n	80082b0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2221      	movs	r2, #33	; 0x21
 80081d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081da:	f7fb ffb7 	bl	800414c <HAL_GetTick>
 80081de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	88fa      	ldrh	r2, [r7, #6]
 80081e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	88fa      	ldrh	r2, [r7, #6]
 80081ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f8:	d108      	bne.n	800820c <HAL_UART_Transmit+0x68>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d104      	bne.n	800820c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008202:	2300      	movs	r3, #0
 8008204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	61bb      	str	r3, [r7, #24]
 800820a:	e003      	b.n	8008214 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008210:	2300      	movs	r3, #0
 8008212:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008214:	e030      	b.n	8008278 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2200      	movs	r2, #0
 800821e:	2180      	movs	r1, #128	; 0x80
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 fb67 	bl	80088f4 <UART_WaitOnFlagUntilTimeout>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e03c      	b.n	80082b0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10b      	bne.n	8008254 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	881a      	ldrh	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008248:	b292      	uxth	r2, r2
 800824a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800824c:	69bb      	ldr	r3, [r7, #24]
 800824e:	3302      	adds	r3, #2
 8008250:	61bb      	str	r3, [r7, #24]
 8008252:	e008      	b.n	8008266 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	b292      	uxth	r2, r2
 800825e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	3301      	adds	r3, #1
 8008264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800826c:	b29b      	uxth	r3, r3
 800826e:	3b01      	subs	r3, #1
 8008270:	b29a      	uxth	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800827e:	b29b      	uxth	r3, r3
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1c8      	bne.n	8008216 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2200      	movs	r2, #0
 800828c:	2140      	movs	r1, #64	; 0x40
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 fb30 	bl	80088f4 <UART_WaitOnFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d004      	beq.n	80082a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2220      	movs	r2, #32
 800829e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e005      	b.n	80082b0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e000      	b.n	80082b0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80082ae:	2302      	movs	r3, #2
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3720      	adds	r7, #32
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80082e6:	f023 030c 	bic.w	r3, r3, #12
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	6979      	ldr	r1, [r7, #20]
 80082f0:	430b      	orrs	r3, r1
 80082f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68da      	ldr	r2, [r3, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	430a      	orrs	r2, r1
 8008308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	430a      	orrs	r2, r1
 800832c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4aa7      	ldr	r2, [pc, #668]	; (80085d0 <UART_SetConfig+0x318>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d120      	bne.n	800837a <UART_SetConfig+0xc2>
 8008338:	4ba6      	ldr	r3, [pc, #664]	; (80085d4 <UART_SetConfig+0x31c>)
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	f003 0303 	and.w	r3, r3, #3
 8008340:	2b03      	cmp	r3, #3
 8008342:	d817      	bhi.n	8008374 <UART_SetConfig+0xbc>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <UART_SetConfig+0x94>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	0800835d 	.word	0x0800835d
 8008350:	08008369 	.word	0x08008369
 8008354:	0800836f 	.word	0x0800836f
 8008358:	08008363 	.word	0x08008363
 800835c:	2301      	movs	r3, #1
 800835e:	77fb      	strb	r3, [r7, #31]
 8008360:	e0b5      	b.n	80084ce <UART_SetConfig+0x216>
 8008362:	2302      	movs	r3, #2
 8008364:	77fb      	strb	r3, [r7, #31]
 8008366:	e0b2      	b.n	80084ce <UART_SetConfig+0x216>
 8008368:	2304      	movs	r3, #4
 800836a:	77fb      	strb	r3, [r7, #31]
 800836c:	e0af      	b.n	80084ce <UART_SetConfig+0x216>
 800836e:	2308      	movs	r3, #8
 8008370:	77fb      	strb	r3, [r7, #31]
 8008372:	e0ac      	b.n	80084ce <UART_SetConfig+0x216>
 8008374:	2310      	movs	r3, #16
 8008376:	77fb      	strb	r3, [r7, #31]
 8008378:	e0a9      	b.n	80084ce <UART_SetConfig+0x216>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a96      	ldr	r2, [pc, #600]	; (80085d8 <UART_SetConfig+0x320>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d124      	bne.n	80083ce <UART_SetConfig+0x116>
 8008384:	4b93      	ldr	r3, [pc, #588]	; (80085d4 <UART_SetConfig+0x31c>)
 8008386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800838c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008390:	d011      	beq.n	80083b6 <UART_SetConfig+0xfe>
 8008392:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008396:	d817      	bhi.n	80083c8 <UART_SetConfig+0x110>
 8008398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800839c:	d011      	beq.n	80083c2 <UART_SetConfig+0x10a>
 800839e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083a2:	d811      	bhi.n	80083c8 <UART_SetConfig+0x110>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <UART_SetConfig+0xf8>
 80083a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ac:	d006      	beq.n	80083bc <UART_SetConfig+0x104>
 80083ae:	e00b      	b.n	80083c8 <UART_SetConfig+0x110>
 80083b0:	2300      	movs	r3, #0
 80083b2:	77fb      	strb	r3, [r7, #31]
 80083b4:	e08b      	b.n	80084ce <UART_SetConfig+0x216>
 80083b6:	2302      	movs	r3, #2
 80083b8:	77fb      	strb	r3, [r7, #31]
 80083ba:	e088      	b.n	80084ce <UART_SetConfig+0x216>
 80083bc:	2304      	movs	r3, #4
 80083be:	77fb      	strb	r3, [r7, #31]
 80083c0:	e085      	b.n	80084ce <UART_SetConfig+0x216>
 80083c2:	2308      	movs	r3, #8
 80083c4:	77fb      	strb	r3, [r7, #31]
 80083c6:	e082      	b.n	80084ce <UART_SetConfig+0x216>
 80083c8:	2310      	movs	r3, #16
 80083ca:	77fb      	strb	r3, [r7, #31]
 80083cc:	e07f      	b.n	80084ce <UART_SetConfig+0x216>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a82      	ldr	r2, [pc, #520]	; (80085dc <UART_SetConfig+0x324>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d124      	bne.n	8008422 <UART_SetConfig+0x16a>
 80083d8:	4b7e      	ldr	r3, [pc, #504]	; (80085d4 <UART_SetConfig+0x31c>)
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80083e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80083e4:	d011      	beq.n	800840a <UART_SetConfig+0x152>
 80083e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80083ea:	d817      	bhi.n	800841c <UART_SetConfig+0x164>
 80083ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083f0:	d011      	beq.n	8008416 <UART_SetConfig+0x15e>
 80083f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083f6:	d811      	bhi.n	800841c <UART_SetConfig+0x164>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <UART_SetConfig+0x14c>
 80083fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008400:	d006      	beq.n	8008410 <UART_SetConfig+0x158>
 8008402:	e00b      	b.n	800841c <UART_SetConfig+0x164>
 8008404:	2300      	movs	r3, #0
 8008406:	77fb      	strb	r3, [r7, #31]
 8008408:	e061      	b.n	80084ce <UART_SetConfig+0x216>
 800840a:	2302      	movs	r3, #2
 800840c:	77fb      	strb	r3, [r7, #31]
 800840e:	e05e      	b.n	80084ce <UART_SetConfig+0x216>
 8008410:	2304      	movs	r3, #4
 8008412:	77fb      	strb	r3, [r7, #31]
 8008414:	e05b      	b.n	80084ce <UART_SetConfig+0x216>
 8008416:	2308      	movs	r3, #8
 8008418:	77fb      	strb	r3, [r7, #31]
 800841a:	e058      	b.n	80084ce <UART_SetConfig+0x216>
 800841c:	2310      	movs	r3, #16
 800841e:	77fb      	strb	r3, [r7, #31]
 8008420:	e055      	b.n	80084ce <UART_SetConfig+0x216>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a6e      	ldr	r2, [pc, #440]	; (80085e0 <UART_SetConfig+0x328>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d124      	bne.n	8008476 <UART_SetConfig+0x1be>
 800842c:	4b69      	ldr	r3, [pc, #420]	; (80085d4 <UART_SetConfig+0x31c>)
 800842e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008430:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008434:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008438:	d011      	beq.n	800845e <UART_SetConfig+0x1a6>
 800843a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800843e:	d817      	bhi.n	8008470 <UART_SetConfig+0x1b8>
 8008440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008444:	d011      	beq.n	800846a <UART_SetConfig+0x1b2>
 8008446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800844a:	d811      	bhi.n	8008470 <UART_SetConfig+0x1b8>
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <UART_SetConfig+0x1a0>
 8008450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008454:	d006      	beq.n	8008464 <UART_SetConfig+0x1ac>
 8008456:	e00b      	b.n	8008470 <UART_SetConfig+0x1b8>
 8008458:	2300      	movs	r3, #0
 800845a:	77fb      	strb	r3, [r7, #31]
 800845c:	e037      	b.n	80084ce <UART_SetConfig+0x216>
 800845e:	2302      	movs	r3, #2
 8008460:	77fb      	strb	r3, [r7, #31]
 8008462:	e034      	b.n	80084ce <UART_SetConfig+0x216>
 8008464:	2304      	movs	r3, #4
 8008466:	77fb      	strb	r3, [r7, #31]
 8008468:	e031      	b.n	80084ce <UART_SetConfig+0x216>
 800846a:	2308      	movs	r3, #8
 800846c:	77fb      	strb	r3, [r7, #31]
 800846e:	e02e      	b.n	80084ce <UART_SetConfig+0x216>
 8008470:	2310      	movs	r3, #16
 8008472:	77fb      	strb	r3, [r7, #31]
 8008474:	e02b      	b.n	80084ce <UART_SetConfig+0x216>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a5a      	ldr	r2, [pc, #360]	; (80085e4 <UART_SetConfig+0x32c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d124      	bne.n	80084ca <UART_SetConfig+0x212>
 8008480:	4b54      	ldr	r3, [pc, #336]	; (80085d4 <UART_SetConfig+0x31c>)
 8008482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008484:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008488:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800848c:	d011      	beq.n	80084b2 <UART_SetConfig+0x1fa>
 800848e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008492:	d817      	bhi.n	80084c4 <UART_SetConfig+0x20c>
 8008494:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008498:	d011      	beq.n	80084be <UART_SetConfig+0x206>
 800849a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800849e:	d811      	bhi.n	80084c4 <UART_SetConfig+0x20c>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d003      	beq.n	80084ac <UART_SetConfig+0x1f4>
 80084a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084a8:	d006      	beq.n	80084b8 <UART_SetConfig+0x200>
 80084aa:	e00b      	b.n	80084c4 <UART_SetConfig+0x20c>
 80084ac:	2300      	movs	r3, #0
 80084ae:	77fb      	strb	r3, [r7, #31]
 80084b0:	e00d      	b.n	80084ce <UART_SetConfig+0x216>
 80084b2:	2302      	movs	r3, #2
 80084b4:	77fb      	strb	r3, [r7, #31]
 80084b6:	e00a      	b.n	80084ce <UART_SetConfig+0x216>
 80084b8:	2304      	movs	r3, #4
 80084ba:	77fb      	strb	r3, [r7, #31]
 80084bc:	e007      	b.n	80084ce <UART_SetConfig+0x216>
 80084be:	2308      	movs	r3, #8
 80084c0:	77fb      	strb	r3, [r7, #31]
 80084c2:	e004      	b.n	80084ce <UART_SetConfig+0x216>
 80084c4:	2310      	movs	r3, #16
 80084c6:	77fb      	strb	r3, [r7, #31]
 80084c8:	e001      	b.n	80084ce <UART_SetConfig+0x216>
 80084ca:	2310      	movs	r3, #16
 80084cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084d6:	d15b      	bne.n	8008590 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 80084d8:	7ffb      	ldrb	r3, [r7, #31]
 80084da:	2b08      	cmp	r3, #8
 80084dc:	d827      	bhi.n	800852e <UART_SetConfig+0x276>
 80084de:	a201      	add	r2, pc, #4	; (adr r2, 80084e4 <UART_SetConfig+0x22c>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008509 	.word	0x08008509
 80084e8:	08008511 	.word	0x08008511
 80084ec:	08008519 	.word	0x08008519
 80084f0:	0800852f 	.word	0x0800852f
 80084f4:	0800851f 	.word	0x0800851f
 80084f8:	0800852f 	.word	0x0800852f
 80084fc:	0800852f 	.word	0x0800852f
 8008500:	0800852f 	.word	0x0800852f
 8008504:	08008527 	.word	0x08008527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008508:	f7fe fa3e 	bl	8006988 <HAL_RCC_GetPCLK1Freq>
 800850c:	61b8      	str	r0, [r7, #24]
        break;
 800850e:	e013      	b.n	8008538 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008510:	f7fe fa5c 	bl	80069cc <HAL_RCC_GetPCLK2Freq>
 8008514:	61b8      	str	r0, [r7, #24]
        break;
 8008516:	e00f      	b.n	8008538 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008518:	4b33      	ldr	r3, [pc, #204]	; (80085e8 <UART_SetConfig+0x330>)
 800851a:	61bb      	str	r3, [r7, #24]
        break;
 800851c:	e00c      	b.n	8008538 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800851e:	f7fe f9bd 	bl	800689c <HAL_RCC_GetSysClockFreq>
 8008522:	61b8      	str	r0, [r7, #24]
        break;
 8008524:	e008      	b.n	8008538 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800852a:	61bb      	str	r3, [r7, #24]
        break;
 800852c:	e004      	b.n	8008538 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	77bb      	strb	r3, [r7, #30]
        break;
 8008536:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	2b00      	cmp	r3, #0
 800853c:	f000 8082 	beq.w	8008644 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	005a      	lsls	r2, r3, #1
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	085b      	lsrs	r3, r3, #1
 800854a:	441a      	add	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	fbb2 f3f3 	udiv	r3, r2, r3
 8008554:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b0f      	cmp	r3, #15
 800855a:	d916      	bls.n	800858a <UART_SetConfig+0x2d2>
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008562:	d212      	bcs.n	800858a <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	b29b      	uxth	r3, r3
 8008568:	f023 030f 	bic.w	r3, r3, #15
 800856c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	085b      	lsrs	r3, r3, #1
 8008572:	b29b      	uxth	r3, r3
 8008574:	f003 0307 	and.w	r3, r3, #7
 8008578:	b29a      	uxth	r2, r3
 800857a:	89fb      	ldrh	r3, [r7, #14]
 800857c:	4313      	orrs	r3, r2
 800857e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	89fa      	ldrh	r2, [r7, #14]
 8008586:	60da      	str	r2, [r3, #12]
 8008588:	e05c      	b.n	8008644 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	77bb      	strb	r3, [r7, #30]
 800858e:	e059      	b.n	8008644 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008590:	7ffb      	ldrb	r3, [r7, #31]
 8008592:	2b08      	cmp	r3, #8
 8008594:	d835      	bhi.n	8008602 <UART_SetConfig+0x34a>
 8008596:	a201      	add	r2, pc, #4	; (adr r2, 800859c <UART_SetConfig+0x2e4>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	080085c1 	.word	0x080085c1
 80085a0:	080085c9 	.word	0x080085c9
 80085a4:	080085ed 	.word	0x080085ed
 80085a8:	08008603 	.word	0x08008603
 80085ac:	080085f3 	.word	0x080085f3
 80085b0:	08008603 	.word	0x08008603
 80085b4:	08008603 	.word	0x08008603
 80085b8:	08008603 	.word	0x08008603
 80085bc:	080085fb 	.word	0x080085fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085c0:	f7fe f9e2 	bl	8006988 <HAL_RCC_GetPCLK1Freq>
 80085c4:	61b8      	str	r0, [r7, #24]
        break;
 80085c6:	e021      	b.n	800860c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085c8:	f7fe fa00 	bl	80069cc <HAL_RCC_GetPCLK2Freq>
 80085cc:	61b8      	str	r0, [r7, #24]
        break;
 80085ce:	e01d      	b.n	800860c <UART_SetConfig+0x354>
 80085d0:	40013800 	.word	0x40013800
 80085d4:	40021000 	.word	0x40021000
 80085d8:	40004400 	.word	0x40004400
 80085dc:	40004800 	.word	0x40004800
 80085e0:	40004c00 	.word	0x40004c00
 80085e4:	40005000 	.word	0x40005000
 80085e8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085ec:	4b1b      	ldr	r3, [pc, #108]	; (800865c <UART_SetConfig+0x3a4>)
 80085ee:	61bb      	str	r3, [r7, #24]
        break;
 80085f0:	e00c      	b.n	800860c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085f2:	f7fe f953 	bl	800689c <HAL_RCC_GetSysClockFreq>
 80085f6:	61b8      	str	r0, [r7, #24]
        break;
 80085f8:	e008      	b.n	800860c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085fe:	61bb      	str	r3, [r7, #24]
        break;
 8008600:	e004      	b.n	800860c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	77bb      	strb	r3, [r7, #30]
        break;
 800860a:	bf00      	nop
    }

    if (pclk != 0U)
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d018      	beq.n	8008644 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	085a      	lsrs	r2, r3, #1
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	441a      	add	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	fbb2 f3f3 	udiv	r3, r2, r3
 8008624:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	2b0f      	cmp	r3, #15
 800862a:	d909      	bls.n	8008640 <UART_SetConfig+0x388>
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008632:	d205      	bcs.n	8008640 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	60da      	str	r2, [r3, #12]
 800863e:	e001      	b.n	8008644 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008650:	7fbb      	ldrb	r3, [r7, #30]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3720      	adds	r7, #32
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	007a1200 	.word	0x007a1200

08008660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	430a      	orrs	r2, r1
 8008732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01a      	beq.n	8008776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	430a      	orrs	r2, r1
 8008754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875e:	d10a      	bne.n	8008776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	430a      	orrs	r2, r1
 8008774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	430a      	orrs	r2, r1
 8008796:	605a      	str	r2, [r3, #4]
  }
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b098      	sub	sp, #96	; 0x60
 80087a8:	af02      	add	r7, sp, #8
 80087aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087b4:	f7fb fcca 	bl	800414c <HAL_GetTick>
 80087b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0308 	and.w	r3, r3, #8
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d12e      	bne.n	8008826 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087d0:	2200      	movs	r2, #0
 80087d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f88c 	bl	80088f4 <UART_WaitOnFlagUntilTimeout>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d021      	beq.n	8008826 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087f6:	653b      	str	r3, [r7, #80]	; 0x50
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008800:	647b      	str	r3, [r7, #68]	; 0x44
 8008802:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800880e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e6      	bne.n	80087e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2220      	movs	r2, #32
 8008818:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e062      	b.n	80088ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b04      	cmp	r3, #4
 8008832:	d149      	bne.n	80088c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800883c:	2200      	movs	r2, #0
 800883e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 f856 	bl	80088f4 <UART_WaitOnFlagUntilTimeout>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d03c      	beq.n	80088c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	623b      	str	r3, [r7, #32]
   return(result);
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886c:	633b      	str	r3, [r7, #48]	; 0x30
 800886e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800887a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e6      	bne.n	800884e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3308      	adds	r3, #8
 8008886:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	e853 3f00 	ldrex	r3, [r3]
 800888e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f023 0301 	bic.w	r3, r3, #1
 8008896:	64bb      	str	r3, [r7, #72]	; 0x48
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3308      	adds	r3, #8
 800889e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088a0:	61fa      	str	r2, [r7, #28]
 80088a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a4:	69b9      	ldr	r1, [r7, #24]
 80088a6:	69fa      	ldr	r2, [r7, #28]
 80088a8:	e841 2300 	strex	r3, r2, [r1]
 80088ac:	617b      	str	r3, [r7, #20]
   return(result);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e5      	bne.n	8008880 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2220      	movs	r2, #32
 80088b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e011      	b.n	80088ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2220      	movs	r2, #32
 80088cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3758      	adds	r7, #88	; 0x58
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	60f8      	str	r0, [r7, #12]
 80088fc:	60b9      	str	r1, [r7, #8]
 80088fe:	603b      	str	r3, [r7, #0]
 8008900:	4613      	mov	r3, r2
 8008902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008904:	e049      	b.n	800899a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890c:	d045      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800890e:	f7fb fc1d 	bl	800414c <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	429a      	cmp	r2, r3
 800891c:	d302      	bcc.n	8008924 <UART_WaitOnFlagUntilTimeout+0x30>
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e048      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d031      	beq.n	800899a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	f003 0308 	and.w	r3, r3, #8
 8008940:	2b08      	cmp	r3, #8
 8008942:	d110      	bne.n	8008966 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2208      	movs	r2, #8
 800894a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f838 	bl	80089c2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2208      	movs	r2, #8
 8008956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e029      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69db      	ldr	r3, [r3, #28]
 800896c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008974:	d111      	bne.n	800899a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800897e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f81e 	bl	80089c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2220      	movs	r2, #32
 800898a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e00f      	b.n	80089ba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69da      	ldr	r2, [r3, #28]
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4013      	ands	r3, r2
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	bf0c      	ite	eq
 80089aa:	2301      	moveq	r3, #1
 80089ac:	2300      	movne	r3, #0
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d0a6      	beq.n	8008906 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089c2:	b480      	push	{r7}
 80089c4:	b095      	sub	sp, #84	; 0x54
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	461a      	mov	r2, r3
 80089e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e8:	643b      	str	r3, [r7, #64]	; 0x40
 80089ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e6      	bne.n	80089ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3308      	adds	r3, #8
 8008a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a04:	6a3b      	ldr	r3, [r7, #32]
 8008a06:	e853 3f00 	ldrex	r3, [r3]
 8008a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3308      	adds	r3, #8
 8008a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a24:	e841 2300 	strex	r3, r2, [r1]
 8008a28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1e5      	bne.n	80089fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d118      	bne.n	8008a6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f023 0310 	bic.w	r3, r3, #16
 8008a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a56:	61bb      	str	r3, [r7, #24]
 8008a58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6979      	ldr	r1, [r7, #20]
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	613b      	str	r3, [r7, #16]
   return(result);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e6      	bne.n	8008a38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008a7e:	bf00      	nop
 8008a80:	3754      	adds	r7, #84	; 0x54
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr
	...

08008a8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008a90:	4904      	ldr	r1, [pc, #16]	; (8008aa4 <MX_FATFS_Init+0x18>)
 8008a92:	4805      	ldr	r0, [pc, #20]	; (8008aa8 <MX_FATFS_Init+0x1c>)
 8008a94:	f003 feb4 	bl	800c800 <FATFS_LinkDriver>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4b03      	ldr	r3, [pc, #12]	; (8008aac <MX_FATFS_Init+0x20>)
 8008a9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008aa0:	bf00      	nop
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20002600 	.word	0x20002600
 8008aa8:	20000010 	.word	0x20000010
 8008aac:	200025fc 	.word	0x200025fc

08008ab0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008ab4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = SD_disk_initialize(pdrv);
 8008aca:	79fb      	ldrb	r3, [r7, #7]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7f9 fe31 	bl	8002734 <SD_disk_initialize>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b04      	ldr	r3, [pc, #16]	; (8008ae8 <USER_initialize+0x28>)
 8008ad8:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008ada:	4b03      	ldr	r3, [pc, #12]	; (8008ae8 <USER_initialize+0x28>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	2000000d 	.word	0x2000000d

08008aec <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	4603      	mov	r3, r0
 8008af4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7f9 ff05 	bl	8002908 <SD_disk_status>
 8008afe:	4603      	mov	r3, r0
    return Stat;
  /* USER CODE END STATUS */
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	603b      	str	r3, [r7, #0]
 8008b14:	4603      	mov	r3, r0
 8008b16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8008b18:	7bf8      	ldrb	r0, [r7, #15]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	f7f9 ff08 	bl	8002934 <SD_disk_read>
 8008b24:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	603b      	str	r3, [r7, #0]
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 8008b3e:	7bf8      	ldrb	r0, [r7, #15]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	68b9      	ldr	r1, [r7, #8]
 8008b46:	f7f9 ff5f 	bl	8002a08 <SD_disk_write>
 8008b4a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	603a      	str	r2, [r7, #0]
 8008b5e:	71fb      	strb	r3, [r7, #7]
 8008b60:	460b      	mov	r3, r1
 8008b62:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl (pdrv, cmd, buff);
 8008b64:	79b9      	ldrb	r1, [r7, #6]
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	683a      	ldr	r2, [r7, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7f9 ffd0 	bl	8002b10 <SD_disk_ioctl>
 8008b70:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
	...

08008b7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	4a08      	ldr	r2, [pc, #32]	; (8008bac <disk_status+0x30>)
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	4413      	add	r3, r2
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	79fa      	ldrb	r2, [r7, #7]
 8008b94:	4905      	ldr	r1, [pc, #20]	; (8008bac <disk_status+0x30>)
 8008b96:	440a      	add	r2, r1
 8008b98:	7a12      	ldrb	r2, [r2, #8]
 8008b9a:	4610      	mov	r0, r2
 8008b9c:	4798      	blx	r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3710      	adds	r7, #16
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20002824 	.word	0x20002824

08008bb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	4a0d      	ldr	r2, [pc, #52]	; (8008bf8 <disk_initialize+0x48>)
 8008bc2:	5cd3      	ldrb	r3, [r2, r3]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d111      	bne.n	8008bec <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	4a0b      	ldr	r2, [pc, #44]	; (8008bf8 <disk_initialize+0x48>)
 8008bcc:	2101      	movs	r1, #1
 8008bce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <disk_initialize+0x48>)
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	4413      	add	r3, r2
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	79fa      	ldrb	r2, [r7, #7]
 8008bde:	4906      	ldr	r1, [pc, #24]	; (8008bf8 <disk_initialize+0x48>)
 8008be0:	440a      	add	r2, r1
 8008be2:	7a12      	ldrb	r2, [r2, #8]
 8008be4:	4610      	mov	r0, r2
 8008be6:	4798      	blx	r3
 8008be8:	4603      	mov	r3, r0
 8008bea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20002824 	.word	0x20002824

08008bfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008bfc:	b590      	push	{r4, r7, lr}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	607a      	str	r2, [r7, #4]
 8008c06:	603b      	str	r3, [r7, #0]
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <disk_read+0x3c>)
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	689c      	ldr	r4, [r3, #8]
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	4a07      	ldr	r2, [pc, #28]	; (8008c38 <disk_read+0x3c>)
 8008c1c:	4413      	add	r3, r2
 8008c1e:	7a18      	ldrb	r0, [r3, #8]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	68b9      	ldr	r1, [r7, #8]
 8008c26:	47a0      	blx	r4
 8008c28:	4603      	mov	r3, r0
 8008c2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd90      	pop	{r4, r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20002824 	.word	0x20002824

08008c3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008c3c:	b590      	push	{r4, r7, lr}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	4a0a      	ldr	r2, [pc, #40]	; (8008c78 <disk_write+0x3c>)
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	68dc      	ldr	r4, [r3, #12]
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
 8008c5a:	4a07      	ldr	r2, [pc, #28]	; (8008c78 <disk_write+0x3c>)
 8008c5c:	4413      	add	r3, r2
 8008c5e:	7a18      	ldrb	r0, [r3, #8]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	68b9      	ldr	r1, [r7, #8]
 8008c66:	47a0      	blx	r4
 8008c68:	4603      	mov	r3, r0
 8008c6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	371c      	adds	r7, #28
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd90      	pop	{r4, r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20002824 	.word	0x20002824

08008c7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	4603      	mov	r3, r0
 8008c84:	603a      	str	r2, [r7, #0]
 8008c86:	71fb      	strb	r3, [r7, #7]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008c8c:	79fb      	ldrb	r3, [r7, #7]
 8008c8e:	4a09      	ldr	r2, [pc, #36]	; (8008cb4 <disk_ioctl+0x38>)
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	79fa      	ldrb	r2, [r7, #7]
 8008c9a:	4906      	ldr	r1, [pc, #24]	; (8008cb4 <disk_ioctl+0x38>)
 8008c9c:	440a      	add	r2, r1
 8008c9e:	7a10      	ldrb	r0, [r2, #8]
 8008ca0:	79b9      	ldrb	r1, [r7, #6]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	4798      	blx	r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
  return res;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20002824 	.word	0x20002824

08008cb8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008cb8:	b480      	push	{r7}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8008ccc:	e007      	b.n	8008cde <mem_cpy+0x26>
		*d++ = *s++;
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	1c53      	adds	r3, r2, #1
 8008cd2:	613b      	str	r3, [r7, #16]
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	1c59      	adds	r1, r3, #1
 8008cd8:	6179      	str	r1, [r7, #20]
 8008cda:	7812      	ldrb	r2, [r2, #0]
 8008cdc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	1e5a      	subs	r2, r3, #1
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1f2      	bne.n	8008cce <mem_cpy+0x16>
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008cf6:	b480      	push	{r7}
 8008cf8:	b087      	sub	sp, #28
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	60f8      	str	r0, [r7, #12]
 8008cfe:	60b9      	str	r1, [r7, #8]
 8008d00:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008d06:	e005      	b.n	8008d14 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	617a      	str	r2, [r7, #20]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	b2d2      	uxtb	r2, r2
 8008d12:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	1e5a      	subs	r2, r3, #1
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1f4      	bne.n	8008d08 <mem_set+0x12>
}
 8008d1e:	bf00      	nop
 8008d20:	bf00      	nop
 8008d22:	371c      	adds	r7, #28
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008d2c:	b480      	push	{r7}
 8008d2e:	b089      	sub	sp, #36	; 0x24
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008d40:	2300      	movs	r3, #0
 8008d42:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008d44:	bf00      	nop
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	1e5a      	subs	r2, r3, #1
 8008d4a:	607a      	str	r2, [r7, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00d      	beq.n	8008d6c <mem_cmp+0x40>
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	61fa      	str	r2, [r7, #28]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	61ba      	str	r2, [r7, #24]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	1acb      	subs	r3, r1, r3
 8008d64:	617b      	str	r3, [r7, #20]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0ec      	beq.n	8008d46 <mem_cmp+0x1a>
	return r;
 8008d6c:	697b      	ldr	r3, [r7, #20]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3724      	adds	r7, #36	; 0x24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8008d7a:	b480      	push	{r7}
 8008d7c:	b083      	sub	sp, #12
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008d84:	e002      	b.n	8008d8c <chk_chr+0x12>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	607b      	str	r3, [r7, #4]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	781b      	ldrb	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <chk_chr+0x26>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d1f2      	bne.n	8008d86 <chk_chr+0xc>
	return *str;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	781b      	ldrb	r3, [r3, #0]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60bb      	str	r3, [r7, #8]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	60fb      	str	r3, [r7, #12]
 8008dc2:	e03b      	b.n	8008e3c <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 8008dc4:	4931      	ldr	r1, [pc, #196]	; (8008e8c <chk_lock+0xdc>)
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	440b      	add	r3, r1
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d02c      	beq.n	8008e32 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008dd8:	492c      	ldr	r1, [pc, #176]	; (8008e8c <chk_lock+0xdc>)
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	005b      	lsls	r3, r3, #1
 8008de0:	4413      	add	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d120      	bne.n	8008e36 <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8008df4:	4925      	ldr	r1, [pc, #148]	; (8008e8c <chk_lock+0xdc>)
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	440b      	add	r3, r1
 8008e02:	3304      	adds	r3, #4
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e0c:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d111      	bne.n	8008e36 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8008e12:	491e      	ldr	r1, [pc, #120]	; (8008e8c <chk_lock+0xdc>)
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4613      	mov	r3, r2
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	440b      	add	r3, r1
 8008e20:	3308      	adds	r3, #8
 8008e22:	881a      	ldrh	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e2a:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d102      	bne.n	8008e36 <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8008e30:	e007      	b.n	8008e42 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8008e32:	2301      	movs	r3, #1
 8008e34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d9c0      	bls.n	8008dc4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d109      	bne.n	8008e5c <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <chk_lock+0xa4>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d101      	bne.n	8008e58 <chk_lock+0xa8>
 8008e54:	2300      	movs	r3, #0
 8008e56:	e013      	b.n	8008e80 <chk_lock+0xd0>
 8008e58:	2312      	movs	r3, #18
 8008e5a:	e011      	b.n	8008e80 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d10b      	bne.n	8008e7a <chk_lock+0xca>
 8008e62:	490a      	ldr	r1, [pc, #40]	; (8008e8c <chk_lock+0xdc>)
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	4613      	mov	r3, r2
 8008e68:	005b      	lsls	r3, r3, #1
 8008e6a:	4413      	add	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	440b      	add	r3, r1
 8008e70:	330a      	adds	r3, #10
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e78:	d101      	bne.n	8008e7e <chk_lock+0xce>
 8008e7a:	2310      	movs	r3, #16
 8008e7c:	e000      	b.n	8008e80 <chk_lock+0xd0>
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	2000260c 	.word	0x2000260c

08008e90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e96:	2300      	movs	r3, #0
 8008e98:	607b      	str	r3, [r7, #4]
 8008e9a:	e002      	b.n	8008ea2 <enq_lock+0x12>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	607b      	str	r3, [r7, #4]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d809      	bhi.n	8008ebc <enq_lock+0x2c>
 8008ea8:	490a      	ldr	r1, [pc, #40]	; (8008ed4 <enq_lock+0x44>)
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4613      	mov	r3, r2
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1ef      	bne.n	8008e9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	bf14      	ite	ne
 8008ec2:	2301      	movne	r3, #1
 8008ec4:	2300      	moveq	r3, #0
 8008ec6:	b2db      	uxtb	r3, r3
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	2000260c 	.word	0x2000260c

08008ed8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	e02e      	b.n	8008f46 <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 8008ee8:	4959      	ldr	r1, [pc, #356]	; (8009050 <inc_lock+0x178>)
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	4613      	mov	r3, r2
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	4413      	add	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	440b      	add	r3, r1
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d11d      	bne.n	8008f40 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8008f04:	4952      	ldr	r1, [pc, #328]	; (8009050 <inc_lock+0x178>)
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	440b      	add	r3, r1
 8008f12:	3304      	adds	r3, #4
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f1c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d10e      	bne.n	8008f40 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8008f22:	494b      	ldr	r1, [pc, #300]	; (8009050 <inc_lock+0x178>)
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4613      	mov	r3, r2
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	3308      	adds	r3, #8
 8008f32:	881a      	ldrh	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f3a:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d006      	beq.n	8008f4e <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d9cd      	bls.n	8008ee8 <inc_lock+0x10>
 8008f4c:	e000      	b.n	8008f50 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8008f4e:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d148      	bne.n	8008fe8 <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008f56:	2300      	movs	r3, #0
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	e002      	b.n	8008f62 <inc_lock+0x8a>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d809      	bhi.n	8008f7c <inc_lock+0xa4>
 8008f68:	4939      	ldr	r1, [pc, #228]	; (8009050 <inc_lock+0x178>)
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	005b      	lsls	r3, r3, #1
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	440b      	add	r3, r1
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1ef      	bne.n	8008f5c <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d101      	bne.n	8008f86 <inc_lock+0xae>
 8008f82:	2300      	movs	r3, #0
 8008f84:	e05d      	b.n	8009042 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f8c:	6819      	ldr	r1, [r3, #0]
 8008f8e:	4830      	ldr	r0, [pc, #192]	; (8009050 <inc_lock+0x178>)
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	4613      	mov	r3, r2
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4403      	add	r3, r0
 8008f9c:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa4:	6899      	ldr	r1, [r3, #8]
 8008fa6:	482a      	ldr	r0, [pc, #168]	; (8009050 <inc_lock+0x178>)
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4613      	mov	r3, r2
 8008fac:	005b      	lsls	r3, r3, #1
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4403      	add	r3, r0
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fbe:	88d8      	ldrh	r0, [r3, #6]
 8008fc0:	4923      	ldr	r1, [pc, #140]	; (8009050 <inc_lock+0x178>)
 8008fc2:	68fa      	ldr	r2, [r7, #12]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	005b      	lsls	r3, r3, #1
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	440b      	add	r3, r1
 8008fce:	3308      	adds	r3, #8
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8008fd4:	491e      	ldr	r1, [pc, #120]	; (8009050 <inc_lock+0x178>)
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	4613      	mov	r3, r2
 8008fda:	005b      	lsls	r3, r3, #1
 8008fdc:	4413      	add	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	440b      	add	r3, r1
 8008fe2:	330a      	adds	r3, #10
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00c      	beq.n	8009008 <inc_lock+0x130>
 8008fee:	4918      	ldr	r1, [pc, #96]	; (8009050 <inc_lock+0x178>)
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	4413      	add	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	440b      	add	r3, r1
 8008ffc:	330a      	adds	r3, #10
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d001      	beq.n	8009008 <inc_lock+0x130>
 8009004:	2300      	movs	r3, #0
 8009006:	e01c      	b.n	8009042 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10b      	bne.n	8009026 <inc_lock+0x14e>
 800900e:	4910      	ldr	r1, [pc, #64]	; (8009050 <inc_lock+0x178>)
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	4613      	mov	r3, r2
 8009014:	005b      	lsls	r3, r3, #1
 8009016:	4413      	add	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	440b      	add	r3, r1
 800901c:	330a      	adds	r3, #10
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	3301      	adds	r3, #1
 8009022:	b299      	uxth	r1, r3
 8009024:	e001      	b.n	800902a <inc_lock+0x152>
 8009026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800902a:	4809      	ldr	r0, [pc, #36]	; (8009050 <inc_lock+0x178>)
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4613      	mov	r3, r2
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	4413      	add	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4403      	add	r3, r0
 8009038:	330a      	adds	r3, #10
 800903a:	460a      	mov	r2, r1
 800903c:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3301      	adds	r3, #1
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	2000260c 	.word	0x2000260c

08009054 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	3b01      	subs	r3, #1
 8009060:	607b      	str	r3, [r7, #4]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d82e      	bhi.n	80090c6 <dec_lock+0x72>
		n = Files[i].ctr;
 8009068:	491b      	ldr	r1, [pc, #108]	; (80090d8 <dec_lock+0x84>)
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	330a      	adds	r3, #10
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800907c:	89fb      	ldrh	r3, [r7, #14]
 800907e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009082:	d101      	bne.n	8009088 <dec_lock+0x34>
 8009084:	2300      	movs	r3, #0
 8009086:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009088:	89fb      	ldrh	r3, [r7, #14]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d002      	beq.n	8009094 <dec_lock+0x40>
 800908e:	89fb      	ldrh	r3, [r7, #14]
 8009090:	3b01      	subs	r3, #1
 8009092:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009094:	4910      	ldr	r1, [pc, #64]	; (80090d8 <dec_lock+0x84>)
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	330a      	adds	r3, #10
 80090a4:	89fa      	ldrh	r2, [r7, #14]
 80090a6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80090a8:	89fb      	ldrh	r3, [r7, #14]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d108      	bne.n	80090c0 <dec_lock+0x6c>
 80090ae:	490a      	ldr	r1, [pc, #40]	; (80090d8 <dec_lock+0x84>)
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	4613      	mov	r3, r2
 80090b4:	005b      	lsls	r3, r3, #1
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	440b      	add	r3, r1
 80090bc:	2200      	movs	r2, #0
 80090be:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	737b      	strb	r3, [r7, #13]
 80090c4:	e001      	b.n	80090ca <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80090c6:	2302      	movs	r3, #2
 80090c8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80090ca:	7b7b      	ldrb	r3, [r7, #13]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	2000260c 	.word	0x2000260c

080090dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80090e4:	2300      	movs	r3, #0
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	e016      	b.n	8009118 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80090ea:	4910      	ldr	r1, [pc, #64]	; (800912c <clear_lock+0x50>)
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4613      	mov	r3, r2
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	4413      	add	r3, r2
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	440b      	add	r3, r1
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d108      	bne.n	8009112 <clear_lock+0x36>
 8009100:	490a      	ldr	r1, [pc, #40]	; (800912c <clear_lock+0x50>)
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	4613      	mov	r3, r2
 8009106:	005b      	lsls	r3, r3, #1
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	440b      	add	r3, r1
 800910e:	2200      	movs	r2, #0
 8009110:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	3301      	adds	r3, #1
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d9e5      	bls.n	80090ea <clear_lock+0xe>
	}
}
 800911e:	bf00      	nop
 8009120:	bf00      	nop
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	2000260c 	.word	0x2000260c

08009130 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009142:	791b      	ldrb	r3, [r3, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d040      	beq.n	80091ca <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009158:	7858      	ldrb	r0, [r3, #1]
 800915a:	6879      	ldr	r1, [r7, #4]
 800915c:	2301      	movs	r3, #1
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	f7ff fd6c 	bl	8008c3c <disk_write>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d002      	beq.n	8009170 <sync_window+0x40>
			res = FR_DISK_ERR;
 800916a:	2301      	movs	r3, #1
 800916c:	73fb      	strb	r3, [r7, #15]
 800916e:	e02c      	b.n	80091ca <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009176:	2200      	movs	r2, #0
 8009178:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	1ad2      	subs	r2, r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	429a      	cmp	r2, r3
 8009190:	d21b      	bcs.n	80091ca <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009198:	78db      	ldrb	r3, [r3, #3]
 800919a:	613b      	str	r3, [r7, #16]
 800919c:	e012      	b.n	80091c4 <sync_window+0x94>
					wsect += fs->fsize;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	4413      	add	r3, r2
 80091aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b2:	7858      	ldrb	r0, [r3, #1]
 80091b4:	6879      	ldr	r1, [r7, #4]
 80091b6:	2301      	movs	r3, #1
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	f7ff fd3f 	bl	8008c3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	613b      	str	r3, [r7, #16]
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d8e9      	bhi.n	800919e <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d01e      	beq.n	800922e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7ff ff9d 	bl	8009130 <sync_window>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d116      	bne.n	800922e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009206:	7858      	ldrb	r0, [r3, #1]
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	2301      	movs	r3, #1
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	f7ff fcf5 	bl	8008bfc <disk_read>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d004      	beq.n	8009222 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009218:	f04f 33ff 	mov.w	r3, #4294967295
 800921c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800921e:	2301      	movs	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009228:	461a      	mov	r2, r3
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800922e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff ff75 	bl	8009130 <sync_window>
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	2b00      	cmp	r3, #0
 800924e:	f040 80ad 	bne.w	80093ac <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	2b03      	cmp	r3, #3
 800925c:	f040 8098 	bne.w	8009390 <sync_fs+0x158>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009266:	795b      	ldrb	r3, [r3, #5]
 8009268:	2b01      	cmp	r3, #1
 800926a:	f040 8091 	bne.w	8009390 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009276:	895b      	ldrh	r3, [r3, #10]
 8009278:	461a      	mov	r2, r3
 800927a:	2100      	movs	r1, #0
 800927c:	f7ff fd3b 	bl	8008cf6 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2255      	movs	r2, #85	; 0x55
 8009284:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	22aa      	movs	r2, #170	; 0xaa
 800928c:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2252      	movs	r2, #82	; 0x52
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2252      	movs	r2, #82	; 0x52
 800929a:	705a      	strb	r2, [r3, #1]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2261      	movs	r2, #97	; 0x61
 80092a0:	709a      	strb	r2, [r3, #2]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2241      	movs	r2, #65	; 0x41
 80092a6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2272      	movs	r2, #114	; 0x72
 80092ac:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2272      	movs	r2, #114	; 0x72
 80092b4:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2241      	movs	r2, #65	; 0x41
 80092bc:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2261      	movs	r2, #97	; 0x61
 80092c4:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092de:	691b      	ldr	r3, [r3, #16]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	0c1b      	lsrs	r3, r3, #16
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	0e1b      	lsrs	r3, r3, #24
 800930a:	b2da      	uxtb	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	b2da      	uxtb	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	b29b      	uxth	r3, r3
 800932c:	0a1b      	lsrs	r3, r3, #8
 800932e:	b29b      	uxth	r3, r3
 8009330:	b2da      	uxtb	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	0c1b      	lsrs	r3, r3, #16
 8009342:	b2da      	uxtb	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	0e1b      	lsrs	r3, r3, #24
 8009354:	b2da      	uxtb	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	3301      	adds	r3, #1
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800936c:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009374:	7858      	ldrb	r0, [r3, #1]
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800937e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009380:	2301      	movs	r3, #1
 8009382:	f7ff fc5b 	bl	8008c3c <disk_write>
			fs->fsi_flag = 0;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800938c:	2200      	movs	r2, #0
 800938e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	2200      	movs	r2, #0
 800939a:	2100      	movs	r1, #0
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff fc6d 	bl	8008c7c <disk_ioctl>
 80093a2:	4603      	mov	r3, r0
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <sync_fs+0x174>
			res = FR_DISK_ERR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	3b02      	subs	r3, #2
 80093c4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	3b02      	subs	r3, #2
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d301      	bcc.n	80093da <clust2sect+0x24>
 80093d6:	2300      	movs	r3, #0
 80093d8:	e00c      	b.n	80093f4 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e0:	789b      	ldrb	r3, [r3, #2]
 80093e2:	461a      	mov	r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	fb03 f202 	mul.w	r2, r3, r2
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f2:	4413      	add	r3, r2
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d906      	bls.n	800941e <get_fat+0x1e>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	429a      	cmp	r2, r3
 800941c:	d302      	bcc.n	8009424 <get_fat+0x24>
		val = 1;	/* Internal error */
 800941e:	2301      	movs	r3, #1
 8009420:	617b      	str	r3, [r7, #20]
 8009422:	e0e4      	b.n	80095ee <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009424:	f04f 33ff 	mov.w	r3, #4294967295
 8009428:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b03      	cmp	r3, #3
 8009434:	f000 8098 	beq.w	8009568 <get_fat+0x168>
 8009438:	2b03      	cmp	r3, #3
 800943a:	f300 80ce 	bgt.w	80095da <get_fat+0x1da>
 800943e:	2b01      	cmp	r3, #1
 8009440:	d002      	beq.n	8009448 <get_fat+0x48>
 8009442:	2b02      	cmp	r3, #2
 8009444:	d05f      	beq.n	8009506 <get_fat+0x106>
 8009446:	e0c8      	b.n	80095da <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	60fb      	str	r3, [r7, #12]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	085b      	lsrs	r3, r3, #1
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4413      	add	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800945c:	6a1a      	ldr	r2, [r3, #32]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009464:	895b      	ldrh	r3, [r3, #10]
 8009466:	4619      	mov	r1, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	fbb3 f3f1 	udiv	r3, r3, r1
 800946e:	4413      	add	r3, r2
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7ff feae 	bl	80091d4 <move_window>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	f040 80b0 	bne.w	80095e0 <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	60fa      	str	r2, [r7, #12]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800948c:	8952      	ldrh	r2, [r2, #10]
 800948e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009492:	fb01 f202 	mul.w	r2, r1, r2
 8009496:	1a9b      	subs	r3, r3, r2
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	5cd3      	ldrb	r3, [r2, r3]
 800949c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a4:	6a1a      	ldr	r2, [r3, #32]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ac:	895b      	ldrh	r3, [r3, #10]
 80094ae:	4619      	mov	r1, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80094b6:	4413      	add	r3, r2
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7ff fe8a 	bl	80091d4 <move_window>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f040 808e 	bne.w	80095e4 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ce:	895b      	ldrh	r3, [r3, #10]
 80094d0:	461a      	mov	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80094d8:	fb01 f202 	mul.w	r2, r1, r2
 80094dc:	1a9b      	subs	r3, r3, r2
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	5cd3      	ldrb	r3, [r2, r3]
 80094e2:	021b      	lsls	r3, r3, #8
 80094e4:	461a      	mov	r2, r3
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <get_fat+0xfc>
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	091b      	lsrs	r3, r3, #4
 80094fa:	e002      	b.n	8009502 <get_fat+0x102>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009502:	617b      	str	r3, [r7, #20]
			break;
 8009504:	e073      	b.n	80095ee <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800950c:	6a1a      	ldr	r2, [r3, #32]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009514:	895b      	ldrh	r3, [r3, #10]
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	b29b      	uxth	r3, r3
 800951a:	4619      	mov	r1, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009522:	4413      	add	r3, r2
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7ff fe54 	bl	80091d4 <move_window>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d15a      	bne.n	80095e8 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800953c:	8952      	ldrh	r2, [r2, #10]
 800953e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009542:	fb01 f202 	mul.w	r2, r1, r2
 8009546:	1a9b      	subs	r3, r3, r2
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	4413      	add	r3, r2
 800954c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	3301      	adds	r3, #1
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	021b      	lsls	r3, r3, #8
 8009556:	b21a      	sxth	r2, r3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	b21b      	sxth	r3, r3
 800955e:	4313      	orrs	r3, r2
 8009560:	b21b      	sxth	r3, r3
 8009562:	b29b      	uxth	r3, r3
 8009564:	617b      	str	r3, [r7, #20]
			break;
 8009566:	e042      	b.n	80095ee <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800956e:	6a1a      	ldr	r2, [r3, #32]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009576:	895b      	ldrh	r3, [r3, #10]
 8009578:	089b      	lsrs	r3, r3, #2
 800957a:	b29b      	uxth	r3, r3
 800957c:	4619      	mov	r1, r3
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	fbb3 f3f1 	udiv	r3, r3, r1
 8009584:	4413      	add	r3, r2
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff fe23 	bl	80091d4 <move_window>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d12b      	bne.n	80095ec <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800959e:	8952      	ldrh	r2, [r2, #10]
 80095a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80095a4:	fb01 f202 	mul.w	r2, r1, r2
 80095a8:	1a9b      	subs	r3, r3, r2
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	4413      	add	r3, r2
 80095ae:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	3303      	adds	r3, #3
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	061a      	lsls	r2, r3, #24
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	3302      	adds	r3, #2
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	041b      	lsls	r3, r3, #16
 80095c0:	4313      	orrs	r3, r2
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	3201      	adds	r2, #1
 80095c6:	7812      	ldrb	r2, [r2, #0]
 80095c8:	0212      	lsls	r2, r2, #8
 80095ca:	4313      	orrs	r3, r2
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	7812      	ldrb	r2, [r2, #0]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80095d6:	617b      	str	r3, [r7, #20]
			break;
 80095d8:	e009      	b.n	80095ee <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 80095da:	2301      	movs	r3, #1
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	e006      	b.n	80095ee <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095e0:	bf00      	nop
 80095e2:	e004      	b.n	80095ee <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80095e4:	bf00      	nop
 80095e6:	e002      	b.n	80095ee <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80095e8:	bf00      	nop
 80095ea:	e000      	b.n	80095ee <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80095ec:	bf00      	nop
		}
	}

	return val;
 80095ee:	697b      	ldr	r3, [r7, #20]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d906      	bls.n	8009618 <put_fat+0x20>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009610:	695b      	ldr	r3, [r3, #20]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	429a      	cmp	r2, r3
 8009616:	d302      	bcc.n	800961e <put_fat+0x26>
		res = FR_INT_ERR;
 8009618:	2302      	movs	r3, #2
 800961a:	77fb      	strb	r3, [r7, #31]
 800961c:	e13a      	b.n	8009894 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2b03      	cmp	r3, #3
 8009628:	f000 80d0 	beq.w	80097cc <put_fat+0x1d4>
 800962c:	2b03      	cmp	r3, #3
 800962e:	f300 8127 	bgt.w	8009880 <put_fat+0x288>
 8009632:	2b01      	cmp	r3, #1
 8009634:	d003      	beq.n	800963e <put_fat+0x46>
 8009636:	2b02      	cmp	r3, #2
 8009638:	f000 808f 	beq.w	800975a <put_fat+0x162>
 800963c:	e120      	b.n	8009880 <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	617b      	str	r3, [r7, #20]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	085b      	lsrs	r3, r3, #1
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	4413      	add	r3, r2
 800964a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009652:	6a1a      	ldr	r2, [r3, #32]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800965a:	895b      	ldrh	r3, [r3, #10]
 800965c:	4619      	mov	r1, r3
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	fbb3 f3f1 	udiv	r3, r3, r1
 8009664:	4413      	add	r3, r2
 8009666:	4619      	mov	r1, r3
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7ff fdb3 	bl	80091d4 <move_window>
 800966e:	4603      	mov	r3, r0
 8009670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009672:	7ffb      	ldrb	r3, [r7, #31]
 8009674:	2b00      	cmp	r3, #0
 8009676:	f040 8106 	bne.w	8009886 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	1c5a      	adds	r2, r3, #1
 800967e:	617a      	str	r2, [r7, #20]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009686:	8952      	ldrh	r2, [r2, #10]
 8009688:	fbb3 f1f2 	udiv	r1, r3, r2
 800968c:	fb01 f202 	mul.w	r2, r1, r2
 8009690:	1a9b      	subs	r3, r3, r2
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4413      	add	r3, r2
 8009696:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00d      	beq.n	80096be <put_fat+0xc6>
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	b25b      	sxtb	r3, r3
 80096a8:	f003 030f 	and.w	r3, r3, #15
 80096ac:	b25a      	sxtb	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	b25b      	sxtb	r3, r3
 80096b6:	4313      	orrs	r3, r2
 80096b8:	b25b      	sxtb	r3, r3
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	e001      	b.n	80096c2 <put_fat+0xca>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096cc:	2201      	movs	r2, #1
 80096ce:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d6:	6a1a      	ldr	r2, [r3, #32]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096de:	895b      	ldrh	r3, [r3, #10]
 80096e0:	4619      	mov	r1, r3
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80096e8:	4413      	add	r3, r2
 80096ea:	4619      	mov	r1, r3
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f7ff fd71 	bl	80091d4 <move_window>
 80096f2:	4603      	mov	r3, r0
 80096f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096f6:	7ffb      	ldrb	r3, [r7, #31]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f040 80c6 	bne.w	800988a <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009704:	895b      	ldrh	r3, [r3, #10]
 8009706:	461a      	mov	r2, r3
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	fbb3 f1f2 	udiv	r1, r3, r2
 800970e:	fb01 f202 	mul.w	r2, r1, r2
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	2b00      	cmp	r3, #0
 8009722:	d003      	beq.n	800972c <put_fat+0x134>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	091b      	lsrs	r3, r3, #4
 8009728:	b2db      	uxtb	r3, r3
 800972a:	e00e      	b.n	800974a <put_fat+0x152>
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	b25b      	sxtb	r3, r3
 8009732:	f023 030f 	bic.w	r3, r3, #15
 8009736:	b25a      	sxtb	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	0a1b      	lsrs	r3, r3, #8
 800973c:	b25b      	sxtb	r3, r3
 800973e:	f003 030f 	and.w	r3, r3, #15
 8009742:	b25b      	sxtb	r3, r3
 8009744:	4313      	orrs	r3, r2
 8009746:	b25b      	sxtb	r3, r3
 8009748:	b2db      	uxtb	r3, r3
 800974a:	69ba      	ldr	r2, [r7, #24]
 800974c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009754:	2201      	movs	r2, #1
 8009756:	711a      	strb	r2, [r3, #4]
			break;
 8009758:	e09c      	b.n	8009894 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009760:	6a1a      	ldr	r2, [r3, #32]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009768:	895b      	ldrh	r3, [r3, #10]
 800976a:	085b      	lsrs	r3, r3, #1
 800976c:	b29b      	uxth	r3, r3
 800976e:	4619      	mov	r1, r3
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	fbb3 f3f1 	udiv	r3, r3, r1
 8009776:	4413      	add	r3, r2
 8009778:	4619      	mov	r1, r3
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f7ff fd2a 	bl	80091d4 <move_window>
 8009780:	4603      	mov	r3, r0
 8009782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009784:	7ffb      	ldrb	r3, [r7, #31]
 8009786:	2b00      	cmp	r3, #0
 8009788:	f040 8081 	bne.w	800988e <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009796:	8952      	ldrh	r2, [r2, #10]
 8009798:	fbb3 f1f2 	udiv	r1, r3, r2
 800979c:	fb01 f202 	mul.w	r2, r1, r2
 80097a0:	1a9b      	subs	r3, r3, r2
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	701a      	strb	r2, [r3, #0]
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	0a1b      	lsrs	r3, r3, #8
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	3301      	adds	r3, #1
 80097bc:	b2d2      	uxtb	r2, r2
 80097be:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c6:	2201      	movs	r2, #1
 80097c8:	711a      	strb	r2, [r3, #4]
			break;
 80097ca:	e063      	b.n	8009894 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097d2:	6a1a      	ldr	r2, [r3, #32]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097da:	895b      	ldrh	r3, [r3, #10]
 80097dc:	089b      	lsrs	r3, r3, #2
 80097de:	b29b      	uxth	r3, r3
 80097e0:	4619      	mov	r1, r3
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80097e8:	4413      	add	r3, r2
 80097ea:	4619      	mov	r1, r3
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f7ff fcf1 	bl	80091d4 <move_window>
 80097f2:	4603      	mov	r3, r0
 80097f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097f6:	7ffb      	ldrb	r3, [r7, #31]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d14a      	bne.n	8009892 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009806:	8952      	ldrh	r2, [r2, #10]
 8009808:	fbb3 f1f2 	udiv	r1, r3, r2
 800980c:	fb01 f202 	mul.w	r2, r1, r2
 8009810:	1a9b      	subs	r3, r3, r2
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	4413      	add	r3, r2
 8009816:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	3303      	adds	r3, #3
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	061a      	lsls	r2, r3, #24
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	3302      	adds	r3, #2
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	041b      	lsls	r3, r3, #16
 8009828:	4313      	orrs	r3, r2
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	3201      	adds	r2, #1
 800982e:	7812      	ldrb	r2, [r2, #0]
 8009830:	0212      	lsls	r2, r2, #8
 8009832:	4313      	orrs	r3, r2
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	7812      	ldrb	r2, [r2, #0]
 8009838:	4313      	orrs	r3, r2
 800983a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	4313      	orrs	r3, r2
 8009842:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	b2da      	uxtb	r2, r3
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	b29b      	uxth	r3, r3
 8009850:	0a1b      	lsrs	r3, r3, #8
 8009852:	b29a      	uxth	r2, r3
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	3301      	adds	r3, #1
 8009858:	b2d2      	uxtb	r2, r2
 800985a:	701a      	strb	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	0c1a      	lsrs	r2, r3, #16
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	3302      	adds	r3, #2
 8009864:	b2d2      	uxtb	r2, r2
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	0e1a      	lsrs	r2, r3, #24
 800986c:	69bb      	ldr	r3, [r7, #24]
 800986e:	3303      	adds	r3, #3
 8009870:	b2d2      	uxtb	r2, r2
 8009872:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800987a:	2201      	movs	r2, #1
 800987c:	711a      	strb	r2, [r3, #4]
			break;
 800987e:	e009      	b.n	8009894 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8009880:	2302      	movs	r3, #2
 8009882:	77fb      	strb	r3, [r7, #31]
 8009884:	e006      	b.n	8009894 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009886:	bf00      	nop
 8009888:	e004      	b.n	8009894 <put_fat+0x29c>
			if (res != FR_OK) break;
 800988a:	bf00      	nop
 800988c:	e002      	b.n	8009894 <put_fat+0x29c>
			if (res != FR_OK) break;
 800988e:	bf00      	nop
 8009890:	e000      	b.n	8009894 <put_fat+0x29c>
			if (res != FR_OK) break;
 8009892:	bf00      	nop
		}
	}

	return res;
 8009894:	7ffb      	ldrb	r3, [r7, #31]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3720      	adds	r7, #32
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d906      	bls.n	80098bc <remove_chain+0x1e>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d302      	bcc.n	80098c2 <remove_chain+0x24>
		res = FR_INT_ERR;
 80098bc:	2302      	movs	r3, #2
 80098be:	73fb      	strb	r3, [r7, #15]
 80098c0:	e049      	b.n	8009956 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80098c6:	e03b      	b.n	8009940 <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 80098c8:	6839      	ldr	r1, [r7, #0]
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7ff fd98 	bl	8009400 <get_fat>
 80098d0:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d03b      	beq.n	8009950 <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d102      	bne.n	80098e4 <remove_chain+0x46>
 80098de:	2302      	movs	r3, #2
 80098e0:	73fb      	strb	r3, [r7, #15]
 80098e2:	e038      	b.n	8009956 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ea:	d102      	bne.n	80098f2 <remove_chain+0x54>
 80098ec:	2301      	movs	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	e031      	b.n	8009956 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80098f2:	2200      	movs	r2, #0
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f7ff fe7e 	bl	80095f8 <put_fat>
 80098fc:	4603      	mov	r3, r0
 80098fe:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d126      	bne.n	8009954 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d013      	beq.n	800993c <remove_chain+0x9e>
				fs->free_clust++;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	3301      	adds	r3, #1
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009924:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800992c:	795b      	ldrb	r3, [r3, #5]
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	b2da      	uxtb	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800993a:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d3bc      	bcc.n	80098c8 <remove_chain+0x2a>
 800994e:	e002      	b.n	8009956 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8009950:	bf00      	nop
 8009952:	e000      	b.n	8009956 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8009954:	bf00      	nop
		}
	}

	return res;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d111      	bne.n	8009994 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <create_chain+0x2e>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	429a      	cmp	r2, r3
 800998c:	d31d      	bcc.n	80099ca <create_chain+0x6a>
 800998e:	2301      	movs	r3, #1
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	e01a      	b.n	80099ca <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7ff fd32 	bl	8009400 <get_fat>
 800999c:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d801      	bhi.n	80099a8 <create_chain+0x48>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e07f      	b.n	8009aa8 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ae:	d101      	bne.n	80099b4 <create_chain+0x54>
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	e079      	b.n	8009aa8 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d201      	bcs.n	80099c6 <create_chain+0x66>
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	e070      	b.n	8009aa8 <create_chain+0x148>
		scl = clst;
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	3301      	adds	r3, #1
 80099d2:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099da:	695b      	ldr	r3, [r3, #20]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d307      	bcc.n	80099f2 <create_chain+0x92>
			ncl = 2;
 80099e2:	2302      	movs	r3, #2
 80099e4:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d901      	bls.n	80099f2 <create_chain+0x92>
 80099ee:	2300      	movs	r3, #0
 80099f0:	e05a      	b.n	8009aa8 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80099f2:	6979      	ldr	r1, [r7, #20]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff fd03 	bl	8009400 <get_fat>
 80099fa:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00e      	beq.n	8009a20 <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a08:	d002      	beq.n	8009a10 <create_chain+0xb0>
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d101      	bne.n	8009a14 <create_chain+0xb4>
			return cs;
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	e049      	b.n	8009aa8 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d1d8      	bne.n	80099ce <create_chain+0x6e>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	e043      	b.n	8009aa8 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8009a20:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009a22:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8009a26:	6979      	ldr	r1, [r7, #20]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7ff fde5 	bl	80095f8 <put_fat>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d109      	bne.n	8009a4c <create_chain+0xec>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d006      	beq.n	8009a4c <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fdd8 	bl	80095f8 <put_fat>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d121      	bne.n	8009a96 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a58:	461a      	mov	r2, r3
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6a:	d01c      	beq.n	8009aa6 <create_chain+0x146>
			fs->free_clust--;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a7c:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a84:	795b      	ldrb	r3, [r3, #5]
 8009a86:	f043 0301 	orr.w	r3, r3, #1
 8009a8a:	b2da      	uxtb	r2, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a92:	715a      	strb	r2, [r3, #5]
 8009a94:	e007      	b.n	8009aa6 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8009a96:	7bfb      	ldrb	r3, [r7, #15]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d102      	bne.n	8009aa2 <create_chain+0x142>
 8009a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa0:	e000      	b.n	8009aa4 <create_chain+0x144>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8009aa6:	697b      	ldr	r3, [r7, #20]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad2:	895b      	ldrh	r3, [r3, #10]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ae2:	6812      	ldr	r2, [r2, #0]
 8009ae4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ae8:	7892      	ldrb	r2, [r2, #2]
 8009aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	1d1a      	adds	r2, r3, #4
 8009af4:	613a      	str	r2, [r7, #16]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d101      	bne.n	8009b04 <clmt_clust+0x54>
 8009b00:	2300      	movs	r3, #0
 8009b02:	e010      	b.n	8009b26 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d307      	bcc.n	8009b1c <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	3304      	adds	r3, #4
 8009b18:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009b1a:	e7e9      	b.n	8009af0 <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8009b1c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	4413      	add	r3, r2
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b086      	sub	sp, #24
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
 8009b3a:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b46:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d009      	beq.n	8009b6c <dir_sdi+0x3a>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d301      	bcc.n	8009b70 <dir_sdi+0x3e>
		return FR_INT_ERR;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	e0aa      	b.n	8009cc6 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d110      	bne.n	8009b98 <dir_sdi+0x66>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d107      	bne.n	8009b98 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b96:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d115      	bne.n	8009bca <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009baa:	891b      	ldrh	r3, [r3, #8]
 8009bac:	461a      	mov	r2, r3
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d301      	bcc.n	8009bb8 <dir_sdi+0x86>
			return FR_INT_ERR;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e086      	b.n	8009cc6 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc6:	613b      	str	r3, [r7, #16]
 8009bc8:	e043      	b.n	8009c52 <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd6:	895b      	ldrh	r3, [r3, #10]
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bea:	789b      	ldrb	r3, [r3, #2]
 8009bec:	fb02 f303 	mul.w	r3, r2, r3
 8009bf0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8009bf2:	e021      	b.n	8009c38 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6979      	ldr	r1, [r7, #20]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7ff fbfe 	bl	8009400 <get_fat>
 8009c04:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0c:	d101      	bne.n	8009c12 <dir_sdi+0xe0>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e059      	b.n	8009cc6 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d909      	bls.n	8009c2c <dir_sdi+0xfa>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d301      	bcc.n	8009c30 <dir_sdi+0xfe>
				return FR_INT_ERR;
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	e04a      	b.n	8009cc6 <dir_sdi+0x194>
			idx -= ic;
 8009c30:	683a      	ldr	r2, [r7, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d2d9      	bcs.n	8009bf4 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6979      	ldr	r1, [r7, #20]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7ff fbb3 	bl	80093b6 <clust2sect>
 8009c50:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c58:	461a      	mov	r2, r3
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <dir_sdi+0x136>
 8009c64:	2302      	movs	r3, #2
 8009c66:	e02e      	b.n	8009cc6 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c74:	895b      	ldrh	r3, [r3, #10]
 8009c76:	095b      	lsrs	r3, r3, #5
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	4413      	add	r3, r2
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009c8c:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4618      	mov	r0, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ca4:	895b      	ldrh	r3, [r3, #10]
 8009ca6:	095b      	lsrs	r3, r3, #5
 8009ca8:	b29b      	uxth	r3, r3
 8009caa:	461a      	mov	r2, r3
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cb2:	fb01 f202 	mul.w	r2, r1, r2
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	015b      	lsls	r3, r3, #5
 8009cba:	4403      	add	r3, r0
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009cc2:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009cce:	b590      	push	{r4, r7, lr}
 8009cd0:	b087      	sub	sp, #28
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cde:	88db      	ldrh	r3, [r3, #6]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <dir_next+0x2a>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <dir_next+0x2e>
		return FR_NO_FILE;
 8009cf8:	2304      	movs	r3, #4
 8009cfa:	e12e      	b.n	8009f5a <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d08:	895b      	ldrh	r3, [r3, #10]
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d16:	fb01 f202 	mul.w	r2, r1, r2
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f040 80fa 	bne.w	8009f16 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d32:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10d      	bne.n	8009d5c <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4c:	891b      	ldrh	r3, [r3, #8]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4293      	cmp	r3, r2
 8009d54:	f0c0 80df 	bcc.w	8009f16 <dir_next+0x248>
				return FR_NO_FILE;
 8009d58:	2304      	movs	r3, #4
 8009d5a:	e0fe      	b.n	8009f5a <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d68:	895b      	ldrh	r3, [r3, #10]
 8009d6a:	095b      	lsrs	r3, r3, #5
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	461a      	mov	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d7c:	6812      	ldr	r2, [r2, #0]
 8009d7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009d82:	7892      	ldrb	r2, [r2, #2]
 8009d84:	3a01      	subs	r2, #1
 8009d86:	4013      	ands	r3, r2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f040 80c4 	bne.w	8009f16 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	4619      	mov	r1, r3
 8009da0:	4610      	mov	r0, r2
 8009da2:	f7ff fb2d 	bl	8009400 <get_fat>
 8009da6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d801      	bhi.n	8009db2 <dir_next+0xe4>
 8009dae:	2302      	movs	r3, #2
 8009db0:	e0d3      	b.n	8009f5a <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db8:	d101      	bne.n	8009dbe <dir_next+0xf0>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e0cd      	b.n	8009f5a <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	f0c0 808e 	bcc.w	8009ef0 <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <dir_next+0x110>
 8009dda:	2304      	movs	r3, #4
 8009ddc:	e0bd      	b.n	8009f5a <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	4619      	mov	r1, r3
 8009df0:	4610      	mov	r0, r2
 8009df2:	f7ff fdb5 	bl	8009960 <create_chain>
 8009df6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <dir_next+0x134>
 8009dfe:	2307      	movs	r3, #7
 8009e00:	e0ab      	b.n	8009f5a <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d101      	bne.n	8009e0c <dir_next+0x13e>
 8009e08:	2302      	movs	r3, #2
 8009e0a:	e0a6      	b.n	8009f5a <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e12:	d101      	bne.n	8009e18 <dir_next+0x14a>
 8009e14:	2301      	movs	r3, #1
 8009e16:	e0a0      	b.n	8009f5a <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff f985 	bl	8009130 <sync_window>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <dir_next+0x162>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e094      	b.n	8009f5a <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e46:	895b      	ldrh	r3, [r3, #10]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	f7fe ff53 	bl	8008cf6 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e5e:	681c      	ldr	r4, [r3, #0]
 8009e60:	6979      	ldr	r1, [r7, #20]
 8009e62:	4610      	mov	r0, r2
 8009e64:	f7ff faa7 	bl	80093b6 <clust2sect>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8009e6e:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009e70:	2300      	movs	r3, #0
 8009e72:	613b      	str	r3, [r7, #16]
 8009e74:	e021      	b.n	8009eba <dir_next+0x1ec>
						dp->fs->wflag = 1;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e82:	2201      	movs	r2, #1
 8009e84:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff f94e 	bl	8009130 <sync_window>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <dir_next+0x1d0>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e05d      	b.n	8009f5a <dir_next+0x28c>
						dp->fs->winsect++;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8009eaa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009eac:	3201      	adds	r2, #1
 8009eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eb2:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	613b      	str	r3, [r7, #16]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ec6:	789b      	ldrb	r3, [r3, #2]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d3d2      	bcc.n	8009e76 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009edc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	1acb      	subs	r3, r1, r3
 8009eea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009eee:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6979      	ldr	r1, [r7, #20]
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff fa55 	bl	80093b6 <clust2sect>
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f14:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f20:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f38:	895b      	ldrh	r3, [r3, #10]
 8009f3a:	095b      	lsrs	r3, r3, #5
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	461a      	mov	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f46:	fb01 f202 	mul.w	r2, r1, r2
 8009f4a:	1a9b      	subs	r3, r3, r2
 8009f4c:	015b      	lsls	r3, r3, #5
 8009f4e:	4403      	add	r3, r0
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f56:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd90      	pop	{r4, r7, pc}

08009f62 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8009f6c:	2100      	movs	r1, #0
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7ff fddf 	bl	8009b32 <dir_sdi>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d135      	bne.n	8009fea <dir_alloc+0x88>
		n = 0;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	4619      	mov	r1, r3
 8009f94:	4610      	mov	r0, r2
 8009f96:	f7ff f91d 	bl	80091d4 <move_window>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d121      	bne.n	8009fe8 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009faa:	695b      	ldr	r3, [r3, #20]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	2be5      	cmp	r3, #229	; 0xe5
 8009fb0:	d006      	beq.n	8009fc0 <dir_alloc+0x5e>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	781b      	ldrb	r3, [r3, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d107      	bne.n	8009fd0 <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	60bb      	str	r3, [r7, #8]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d102      	bne.n	8009fd4 <dir_alloc+0x72>
 8009fce:	e00c      	b.n	8009fea <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009fd4:	2101      	movs	r1, #1
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7ff fe79 	bl	8009cce <dir_next>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d0cd      	beq.n	8009f82 <dir_alloc+0x20>
 8009fe6:	e000      	b.n	8009fea <dir_alloc+0x88>
			if (res != FR_OK) break;
 8009fe8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	d101      	bne.n	8009ff4 <dir_alloc+0x92>
 8009ff0:	2307      	movs	r3, #7
 8009ff2:	73fb      	strb	r3, [r7, #15]
	return res;
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8009ffe:	b480      	push	{r7}
 800a000:	b085      	sub	sp, #20
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	331b      	adds	r3, #27
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	b21a      	sxth	r2, r3
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	331a      	adds	r3, #26
 800a016:	781b      	ldrb	r3, [r3, #0]
 800a018:	b21b      	sxth	r3, r3
 800a01a:	4313      	orrs	r3, r2
 800a01c:	b21b      	sxth	r3, r3
 800a01e:	b29b      	uxth	r3, r3
 800a020:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d10f      	bne.n	800a04e <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	3315      	adds	r3, #21
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	021b      	lsls	r3, r3, #8
 800a036:	b21a      	sxth	r2, r3
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	3314      	adds	r3, #20
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	b21b      	sxth	r3, r3
 800a040:	4313      	orrs	r3, r2
 800a042:	b21b      	sxth	r3, r3
 800a044:	b29b      	uxth	r3, r3
 800a046:	041b      	lsls	r3, r3, #16
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	4313      	orrs	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]

	return cl;
 800a04e:	68fb      	ldr	r3, [r7, #12]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	331a      	adds	r3, #26
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	701a      	strb	r2, [r3, #0]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	b29b      	uxth	r3, r3
 800a074:	0a1b      	lsrs	r3, r3, #8
 800a076:	b29a      	uxth	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	331b      	adds	r3, #27
 800a07c:	b2d2      	uxtb	r2, r2
 800a07e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	0c1a      	lsrs	r2, r3, #16
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	3314      	adds	r3, #20
 800a088:	b2d2      	uxtb	r2, r2
 800a08a:	701a      	strb	r2, [r3, #0]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	0c1b      	lsrs	r3, r3, #16
 800a090:	b29b      	uxth	r3, r3
 800a092:	0a1b      	lsrs	r3, r3, #8
 800a094:	b29a      	uxth	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3315      	adds	r3, #21
 800a09a:	b2d2      	uxtb	r2, r2
 800a09c:	701a      	strb	r2, [r3, #0]
}
 800a09e:	bf00      	nop
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
	...

0800a0ac <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b086      	sub	sp, #24
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0be:	1e5a      	subs	r2, r3, #1
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	4413      	add	r3, r2
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	4413      	add	r3, r2
 800a0ca:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	613b      	str	r3, [r7, #16]
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 800a0d4:	4a2b      	ldr	r2, [pc, #172]	; (800a184 <cmp_lfn+0xd8>)
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	4413      	add	r3, r2
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	021b      	lsls	r3, r3, #8
 800a0e6:	b21a      	sxth	r2, r3
 800a0e8:	4926      	ldr	r1, [pc, #152]	; (800a184 <cmp_lfn+0xd8>)
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	440b      	add	r3, r1
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	440b      	add	r3, r1
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	b21b      	sxth	r3, r3
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	b21b      	sxth	r3, r3
 800a0fe:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 800a100:	89fb      	ldrh	r3, [r7, #14]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d019      	beq.n	800a13a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800a106:	89bb      	ldrh	r3, [r7, #12]
 800a108:	4618      	mov	r0, r3
 800a10a:	f002 fbc5 	bl	800c898 <ff_wtoupper>
 800a10e:	4603      	mov	r3, r0
 800a110:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2bfe      	cmp	r3, #254	; 0xfe
 800a116:	d80e      	bhi.n	800a136 <cmp_lfn+0x8a>
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	1c5a      	adds	r2, r3, #1
 800a11c:	617a      	str	r2, [r7, #20]
 800a11e:	005b      	lsls	r3, r3, #1
 800a120:	687a      	ldr	r2, [r7, #4]
 800a122:	4413      	add	r3, r2
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	4618      	mov	r0, r3
 800a128:	f002 fbb6 	bl	800c898 <ff_wtoupper>
 800a12c:	4603      	mov	r3, r0
 800a12e:	461a      	mov	r2, r3
 800a130:	89fb      	ldrh	r3, [r7, #14]
 800a132:	4293      	cmp	r3, r2
 800a134:	d008      	beq.n	800a148 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800a136:	2300      	movs	r3, #0
 800a138:	e01f      	b.n	800a17a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 800a13a:	89bb      	ldrh	r3, [r7, #12]
 800a13c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a140:	4293      	cmp	r3, r2
 800a142:	d001      	beq.n	800a148 <cmp_lfn+0x9c>
 800a144:	2300      	movs	r3, #0
 800a146:	e018      	b.n	800a17a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	3301      	adds	r3, #1
 800a14c:	613b      	str	r3, [r7, #16]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	2b0c      	cmp	r3, #12
 800a152:	d9bf      	bls.n	800a0d4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00b      	beq.n	800a178 <cmp_lfn+0xcc>
 800a160:	89fb      	ldrh	r3, [r7, #14]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d008      	beq.n	800a178 <cmp_lfn+0xcc>
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <cmp_lfn+0xcc>
		return 0;
 800a174:	2300      	movs	r3, #0
 800a176:	e000      	b.n	800a17a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 800a178:	2301      	movs	r3, #1
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	08011bf4 	.word	0x08011bf4

0800a188 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 800a188:	b480      	push	{r7}
 800a18a:	b089      	sub	sp, #36	; 0x24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	4611      	mov	r1, r2
 800a194:	461a      	mov	r2, r3
 800a196:	460b      	mov	r3, r1
 800a198:	71fb      	strb	r3, [r7, #7]
 800a19a:	4613      	mov	r3, r2
 800a19c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	330d      	adds	r3, #13
 800a1a2:	79ba      	ldrb	r2, [r7, #6]
 800a1a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	330b      	adds	r3, #11
 800a1aa:	220f      	movs	r2, #15
 800a1ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	330c      	adds	r3, #12
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	331a      	adds	r3, #26
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	701a      	strb	r2, [r3, #0]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	331b      	adds	r3, #27
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	1e5a      	subs	r2, r3, #1
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	4413      	add	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	82fb      	strh	r3, [r7, #22]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 800a1de:	8afb      	ldrh	r3, [r7, #22]
 800a1e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d007      	beq.n	800a1f8 <fit_lfn+0x70>
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	61fa      	str	r2, [r7, #28]
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	4413      	add	r3, r2
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 800a1f8:	4a1d      	ldr	r2, [pc, #116]	; (800a270 <fit_lfn+0xe8>)
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	461a      	mov	r2, r3
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4413      	add	r3, r2
 800a206:	8afa      	ldrh	r2, [r7, #22]
 800a208:	b2d2      	uxtb	r2, r2
 800a20a:	701a      	strb	r2, [r3, #0]
 800a20c:	8afb      	ldrh	r3, [r7, #22]
 800a20e:	0a1b      	lsrs	r3, r3, #8
 800a210:	b299      	uxth	r1, r3
 800a212:	4a17      	ldr	r2, [pc, #92]	; (800a270 <fit_lfn+0xe8>)
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	4413      	add	r3, r2
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	3301      	adds	r3, #1
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	4413      	add	r3, r2
 800a220:	b2ca      	uxtb	r2, r1
 800a222:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800a224:	8afb      	ldrh	r3, [r7, #22]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d102      	bne.n	800a230 <fit_lfn+0xa8>
 800a22a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a22e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	3301      	adds	r3, #1
 800a234:	61bb      	str	r3, [r7, #24]
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	2b0c      	cmp	r3, #12
 800a23a:	d9d0      	bls.n	800a1de <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 800a23c:	8afb      	ldrh	r3, [r7, #22]
 800a23e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a242:	4293      	cmp	r3, r2
 800a244:	d006      	beq.n	800a254 <fit_lfn+0xcc>
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	005b      	lsls	r3, r3, #1
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d103      	bne.n	800a25c <fit_lfn+0xd4>
 800a254:	79fb      	ldrb	r3, [r7, #7]
 800a256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a25a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	79fa      	ldrb	r2, [r7, #7]
 800a260:	701a      	strb	r2, [r3, #0]
}
 800a262:	bf00      	nop
 800a264:	3724      	adds	r7, #36	; 0x24
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	08011bf4 	.word	0x08011bf4

0800a274 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08c      	sub	sp, #48	; 0x30
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800a282:	220b      	movs	r2, #11
 800a284:	68b9      	ldr	r1, [r7, #8]
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f7fe fd16 	bl	8008cb8 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	2b05      	cmp	r3, #5
 800a290:	d92b      	bls.n	800a2ea <gen_numname+0x76>
		sr = seq;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800a296:	e022      	b.n	800a2de <gen_numname+0x6a>
			wc = *lfn++;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	1c9a      	adds	r2, r3, #2
 800a29c:	607a      	str	r2, [r7, #4]
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2a6:	e017      	b.n	800a2d8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	005a      	lsls	r2, r3, #1
 800a2ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	4413      	add	r3, r2
 800a2b4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800a2b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a2b8:	085b      	lsrs	r3, r3, #1
 800a2ba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d005      	beq.n	800a2d2 <gen_numname+0x5e>
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800a2cc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800a2d0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800a2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	2b0f      	cmp	r3, #15
 800a2dc:	d9e4      	bls.n	800a2a8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1d8      	bne.n	800a298 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800a2ea:	2307      	movs	r3, #7
 800a2ec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	f003 030f 	and.w	r3, r3, #15
 800a2f6:	b2db      	uxtb	r3, r3
 800a2f8:	3330      	adds	r3, #48	; 0x30
 800a2fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800a2fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a302:	2b39      	cmp	r3, #57	; 0x39
 800a304:	d904      	bls.n	800a310 <gen_numname+0x9c>
 800a306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a30a:	3307      	adds	r3, #7
 800a30c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	1e5a      	subs	r2, r3, #1
 800a314:	62ba      	str	r2, [r7, #40]	; 0x28
 800a316:	3330      	adds	r3, #48	; 0x30
 800a318:	443b      	add	r3, r7
 800a31a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a31e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	091b      	lsrs	r3, r3, #4
 800a326:	603b      	str	r3, [r7, #0]
	} while (seq);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1df      	bne.n	800a2ee <gen_numname+0x7a>
	ns[i] = '~';
 800a32e:	f107 0214 	add.w	r2, r7, #20
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	4413      	add	r3, r2
 800a336:	227e      	movs	r2, #126	; 0x7e
 800a338:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800a33a:	2300      	movs	r3, #0
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
 800a33e:	e002      	b.n	800a346 <gen_numname+0xd2>
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	3301      	adds	r3, #1
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
 800a346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d205      	bcs.n	800a35a <gen_numname+0xe6>
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	4413      	add	r3, r2
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b20      	cmp	r3, #32
 800a358:	d1f2      	bne.n	800a340 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	2b07      	cmp	r3, #7
 800a35e:	d807      	bhi.n	800a370 <gen_numname+0xfc>
 800a360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a362:	1c5a      	adds	r2, r3, #1
 800a364:	62ba      	str	r2, [r7, #40]	; 0x28
 800a366:	3330      	adds	r3, #48	; 0x30
 800a368:	443b      	add	r3, r7
 800a36a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800a36e:	e000      	b.n	800a372 <gen_numname+0xfe>
 800a370:	2120      	movs	r1, #32
 800a372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a374:	1c5a      	adds	r2, r3, #1
 800a376:	627a      	str	r2, [r7, #36]	; 0x24
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4413      	add	r3, r2
 800a37c:	460a      	mov	r2, r1
 800a37e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800a380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a382:	2b07      	cmp	r3, #7
 800a384:	d9e9      	bls.n	800a35a <gen_numname+0xe6>
}
 800a386:	bf00      	nop
 800a388:	bf00      	nop
 800a38a:	3730      	adds	r7, #48	; 0x30
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800a39c:	230b      	movs	r3, #11
 800a39e:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	0852      	lsrs	r2, r2, #1
 800a3a6:	01db      	lsls	r3, r3, #7
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	1c59      	adds	r1, r3, #1
 800a3b0:	6079      	str	r1, [r7, #4]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	73fb      	strb	r3, [r7, #15]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	3b01      	subs	r3, #1
 800a3bc:	60bb      	str	r3, [r7, #8]
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d1ed      	bne.n	800a3a0 <sum_sfn+0x10>
	return sum;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a3da:	2100      	movs	r1, #0
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff fba8 	bl	8009b32 <dir_sdi>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d001      	beq.n	800a3f0 <dir_find+0x1e>
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	e0b8      	b.n	800a562 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a3f0:	23ff      	movs	r3, #255	; 0xff
 800a3f2:	753b      	strb	r3, [r7, #20]
 800a3f4:	7d3b      	ldrb	r3, [r7, #20]
 800a3f6:	757b      	strb	r3, [r7, #21]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a402:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	4619      	mov	r1, r3
 800a416:	4610      	mov	r0, r2
 800a418:	f7fe fedc 	bl	80091d4 <move_window>
 800a41c:	4603      	mov	r3, r0
 800a41e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	2b00      	cmp	r3, #0
 800a424:	f040 8097 	bne.w	800a556 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a438:	7dbb      	ldrb	r3, [r7, #22]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <dir_find+0x72>
 800a43e:	2304      	movs	r3, #4
 800a440:	75fb      	strb	r3, [r7, #23]
 800a442:	e08d      	b.n	800a560 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	330b      	adds	r3, #11
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a44e:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800a450:	7dbb      	ldrb	r3, [r7, #22]
 800a452:	2be5      	cmp	r3, #229	; 0xe5
 800a454:	d007      	beq.n	800a466 <dir_find+0x94>
 800a456:	7bfb      	ldrb	r3, [r7, #15]
 800a458:	f003 0308 	and.w	r3, r3, #8
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00b      	beq.n	800a478 <dir_find+0xa6>
 800a460:	7bfb      	ldrb	r3, [r7, #15]
 800a462:	2b0f      	cmp	r3, #15
 800a464:	d008      	beq.n	800a478 <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a466:	23ff      	movs	r3, #255	; 0xff
 800a468:	757b      	strb	r3, [r7, #21]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a474:	849a      	strh	r2, [r3, #36]	; 0x24
 800a476:	e063      	b.n	800a540 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800a478:	7bfb      	ldrb	r3, [r7, #15]
 800a47a:	2b0f      	cmp	r3, #15
 800a47c:	d137      	bne.n	800a4ee <dir_find+0x11c>
				if (dp->lfn) {
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d05a      	beq.n	800a540 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800a48a:	7dbb      	ldrb	r3, [r7, #22]
 800a48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d010      	beq.n	800a4b6 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	7b5b      	ldrb	r3, [r3, #13]
 800a498:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 800a49a:	7dbb      	ldrb	r3, [r7, #22]
 800a49c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4a0:	75bb      	strb	r3, [r7, #22]
 800a4a2:	7dbb      	ldrb	r3, [r7, #22]
 800a4a4:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ac:	88da      	ldrh	r2, [r3, #6]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4b4:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 800a4b6:	7dba      	ldrb	r2, [r7, #22]
 800a4b8:	7d7b      	ldrb	r3, [r7, #21]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d114      	bne.n	800a4e8 <dir_find+0x116>
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	330d      	adds	r3, #13
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	7d3a      	ldrb	r2, [r7, #20]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d10e      	bne.n	800a4e8 <dir_find+0x116>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	6939      	ldr	r1, [r7, #16]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff fde9 	bl	800a0ac <cmp_lfn>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d003      	beq.n	800a4e8 <dir_find+0x116>
 800a4e0:	7d7b      	ldrb	r3, [r7, #21]
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	e000      	b.n	800a4ea <dir_find+0x118>
 800a4e8:	23ff      	movs	r3, #255	; 0xff
 800a4ea:	757b      	strb	r3, [r7, #21]
 800a4ec:	e028      	b.n	800a540 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a4ee:	7d7b      	ldrb	r3, [r7, #21]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d107      	bne.n	800a504 <dir_find+0x132>
 800a4f4:	6938      	ldr	r0, [r7, #16]
 800a4f6:	f7ff ff4b 	bl	800a390 <sum_sfn>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	7d3b      	ldrb	r3, [r7, #20]
 800a500:	4293      	cmp	r3, r2
 800a502:	d02a      	beq.n	800a55a <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a50a:	699b      	ldr	r3, [r3, #24]
 800a50c:	330b      	adds	r3, #11
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	f003 0301 	and.w	r3, r3, #1
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10b      	bne.n	800a530 <dir_find+0x15e>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a51e:	699b      	ldr	r3, [r3, #24]
 800a520:	220b      	movs	r2, #11
 800a522:	4619      	mov	r1, r3
 800a524:	6938      	ldr	r0, [r7, #16]
 800a526:	f7fe fc01 	bl	8008d2c <mem_cmp>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d016      	beq.n	800a55e <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800a530:	23ff      	movs	r3, #255	; 0xff
 800a532:	757b      	strb	r3, [r7, #21]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a53e:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800a540:	2100      	movs	r1, #0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7ff fbc3 	bl	8009cce <dir_next>
 800a548:	4603      	mov	r3, r0
 800a54a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a54c:	7dfb      	ldrb	r3, [r7, #23]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f43f af58 	beq.w	800a404 <dir_find+0x32>
 800a554:	e004      	b.n	800a560 <dir_find+0x18e>
		if (res != FR_OK) break;
 800a556:	bf00      	nop
 800a558:	e002      	b.n	800a560 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800a55a:	bf00      	nop
 800a55c:	e000      	b.n	800a560 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800a55e:	bf00      	nop

	return res;
 800a560:	7dfb      	ldrb	r3, [r7, #23]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
	...

0800a56c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08c      	sub	sp, #48	; 0x30
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a57a:	699b      	ldr	r3, [r3, #24]
 800a57c:	623b      	str	r3, [r7, #32]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800a588:	f107 030c 	add.w	r3, r7, #12
 800a58c:	220c      	movs	r2, #12
 800a58e:	6a39      	ldr	r1, [r7, #32]
 800a590:	4618      	mov	r0, r3
 800a592:	f7fe fb91 	bl	8008cb8 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d03b      	beq.n	800a618 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	330b      	adds	r3, #11
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	701a      	strb	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5b8:	e013      	b.n	800a5e2 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800a5ba:	f107 010c 	add.w	r1, r7, #12
 800a5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c0:	69fa      	ldr	r2, [r7, #28]
 800a5c2:	6a38      	ldr	r0, [r7, #32]
 800a5c4:	f7ff fe56 	bl	800a274 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff ff02 	bl	800a3d2 <dir_find>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800a5d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d106      	bne.n	800a5ea <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 800a5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5de:	3301      	adds	r3, #1
 800a5e0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	2b63      	cmp	r3, #99	; 0x63
 800a5e6:	d9e8      	bls.n	800a5ba <dir_register+0x4e>
 800a5e8:	e000      	b.n	800a5ec <dir_register+0x80>
			if (res != FR_OK) break;
 800a5ea:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800a5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ee:	2b64      	cmp	r3, #100	; 0x64
 800a5f0:	d101      	bne.n	800a5f6 <dir_register+0x8a>
 800a5f2:	2307      	movs	r3, #7
 800a5f4:	e0d8      	b.n	800a7a8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800a5f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d002      	beq.n	800a604 <dir_register+0x98>
 800a5fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a602:	e0d1      	b.n	800a7a8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 800a604:	6a3b      	ldr	r3, [r7, #32]
 800a606:	330b      	adds	r3, #11
 800a608:	7dfa      	ldrb	r2, [r7, #23]
 800a60a:	701a      	strb	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a612:	461a      	mov	r2, r3
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 800a618:	7dfb      	ldrb	r3, [r7, #23]
 800a61a:	f003 0302 	and.w	r3, r3, #2
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d014      	beq.n	800a64c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 800a622:	2300      	movs	r3, #0
 800a624:	62bb      	str	r3, [r7, #40]	; 0x28
 800a626:	e002      	b.n	800a62e <dir_register+0xc2>
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	3301      	adds	r3, #1
 800a62c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	69fa      	ldr	r2, [r7, #28]
 800a634:	4413      	add	r3, r2
 800a636:	881b      	ldrh	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1f5      	bne.n	800a628 <dir_register+0xbc>
		nent = (n + 25) / 13;
 800a63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63e:	3319      	adds	r3, #25
 800a640:	4a5b      	ldr	r2, [pc, #364]	; (800a7b0 <dir_register+0x244>)
 800a642:	fba2 2303 	umull	r2, r3, r2, r3
 800a646:	089b      	lsrs	r3, r3, #2
 800a648:	627b      	str	r3, [r7, #36]	; 0x24
 800a64a:	e001      	b.n	800a650 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800a64c:	2301      	movs	r3, #1
 800a64e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800a650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff fc85 	bl	8009f62 <dir_alloc>
 800a658:	4603      	mov	r3, r0
 800a65a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800a65e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a662:	2b00      	cmp	r3, #0
 800a664:	d15b      	bne.n	800a71e <dir_register+0x1b2>
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	3b01      	subs	r3, #1
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
 800a66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d055      	beq.n	800a71e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a678:	88db      	ldrh	r3, [r3, #6]
 800a67a:	461a      	mov	r2, r3
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	1ad3      	subs	r3, r2, r3
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff fa55 	bl	8009b32 <dir_sdi>
 800a688:	4603      	mov	r3, r0
 800a68a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a68e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a692:	2b00      	cmp	r3, #0
 800a694:	d143      	bne.n	800a71e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7ff fe76 	bl	800a390 <sum_sfn>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	f7fe fd8a 	bl	80091d4 <move_window>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800a6c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d126      	bne.n	800a71c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6d4:	6a18      	ldr	r0, [r3, #32]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6dc:	6959      	ldr	r1, [r3, #20]
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	b2da      	uxtb	r2, r3
 800a6e2:	7efb      	ldrb	r3, [r7, #27]
 800a6e4:	f7ff fd50 	bl	800a188 <fit_lfn>
				dp->fs->wflag = 1;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7ff fae7 	bl	8009cce <dir_next>
 800a700:	4603      	mov	r3, r0
 800a702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800a706:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d107      	bne.n	800a71e <dir_register+0x1b2>
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	3b01      	subs	r3, #1
 800a712:	627b      	str	r3, [r7, #36]	; 0x24
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1c6      	bne.n	800a6a8 <dir_register+0x13c>
 800a71a:	e000      	b.n	800a71e <dir_register+0x1b2>
				if (res != FR_OK) break;
 800a71c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800a71e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a722:	2b00      	cmp	r3, #0
 800a724:	d13e      	bne.n	800a7a4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a734:	691b      	ldr	r3, [r3, #16]
 800a736:	4619      	mov	r1, r3
 800a738:	4610      	mov	r0, r2
 800a73a:	f7fe fd4b 	bl	80091d4 <move_window>
 800a73e:	4603      	mov	r3, r0
 800a740:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800a744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d12b      	bne.n	800a7a4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a752:	695b      	ldr	r3, [r3, #20]
 800a754:	2220      	movs	r2, #32
 800a756:	2100      	movs	r1, #0
 800a758:	4618      	mov	r0, r3
 800a75a:	f7fe facc 	bl	8008cf6 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a764:	6958      	ldr	r0, [r3, #20]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	220b      	movs	r2, #11
 800a770:	4619      	mov	r1, r3
 800a772:	f7fe faa1 	bl	8008cb8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	330b      	adds	r3, #11
 800a780:	781a      	ldrb	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	330c      	adds	r3, #12
 800a78c:	f002 0218 	and.w	r2, r2, #24
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 800a7a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3730      	adds	r7, #48	; 0x30
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	4ec4ec4f 	.word	0x4ec4ec4f

0800a7b4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08a      	sub	sp, #40	; 0x28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	613b      	str	r3, [r7, #16]
 800a7c4:	e002      	b.n	800a7cc <create_name+0x18>
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	613b      	str	r3, [r7, #16]
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	781b      	ldrb	r3, [r3, #0]
 800a7d0:	2b2f      	cmp	r3, #47	; 0x2f
 800a7d2:	d0f8      	beq.n	800a7c6 <create_name+0x12>
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	2b5c      	cmp	r3, #92	; 0x5c
 800a7da:	d0f4      	beq.n	800a7c6 <create_name+0x12>
	lfn = dp->lfn;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	617b      	str	r3, [r7, #20]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	1c5a      	adds	r2, r3, #1
 800a7f2:	61ba      	str	r2, [r7, #24]
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 800a7fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a7fe:	2b1f      	cmp	r3, #31
 800a800:	d92f      	bls.n	800a862 <create_name+0xae>
 800a802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a804:	2b2f      	cmp	r3, #47	; 0x2f
 800a806:	d02c      	beq.n	800a862 <create_name+0xae>
 800a808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a80a:	2b5c      	cmp	r3, #92	; 0x5c
 800a80c:	d029      	beq.n	800a862 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2bfe      	cmp	r3, #254	; 0xfe
 800a812:	d901      	bls.n	800a818 <create_name+0x64>
			return FR_INVALID_NAME;
 800a814:	2306      	movs	r3, #6
 800a816:	e186      	b.n	800ab26 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a818:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a81e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a820:	2101      	movs	r1, #1
 800a822:	4618      	mov	r0, r3
 800a824:	f001 fffc 	bl	800c820 <ff_convert>
 800a828:	4603      	mov	r3, r0
 800a82a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <create_name+0x82>
 800a832:	2306      	movs	r3, #6
 800a834:	e177      	b.n	800ab26 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 800a836:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a838:	2b7f      	cmp	r3, #127	; 0x7f
 800a83a:	d809      	bhi.n	800a850 <create_name+0x9c>
 800a83c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a83e:	4619      	mov	r1, r3
 800a840:	488e      	ldr	r0, [pc, #568]	; (800aa7c <create_name+0x2c8>)
 800a842:	f7fe fa9a 	bl	8008d7a <chk_chr>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <create_name+0x9c>
			return FR_INVALID_NAME;
 800a84c:	2306      	movs	r3, #6
 800a84e:	e16a      	b.n	800ab26 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	1c5a      	adds	r2, r3, #1
 800a854:	617a      	str	r2, [r7, #20]
 800a856:	005b      	lsls	r3, r3, #1
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4413      	add	r3, r2
 800a85c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a85e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a860:	e7c5      	b.n	800a7ee <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a862:	693a      	ldr	r2, [r7, #16]
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	441a      	add	r2, r3
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800a86c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a86e:	2b1f      	cmp	r3, #31
 800a870:	d801      	bhi.n	800a876 <create_name+0xc2>
 800a872:	2304      	movs	r3, #4
 800a874:	e000      	b.n	800a878 <create_name+0xc4>
 800a876:	2300      	movs	r3, #0
 800a878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800a87c:	e011      	b.n	800a8a2 <create_name+0xee>
		w = lfn[di - 1];
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a884:	3b01      	subs	r3, #1
 800a886:	005b      	lsls	r3, r3, #1
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	4413      	add	r3, r2
 800a88c:	881b      	ldrh	r3, [r3, #0]
 800a88e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800a890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a892:	2b20      	cmp	r3, #32
 800a894:	d002      	beq.n	800a89c <create_name+0xe8>
 800a896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a898:	2b2e      	cmp	r3, #46	; 0x2e
 800a89a:	d106      	bne.n	800a8aa <create_name+0xf6>
		di--;
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1ea      	bne.n	800a87e <create_name+0xca>
 800a8a8:	e000      	b.n	800a8ac <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 800a8aa:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d101      	bne.n	800a8b6 <create_name+0x102>
 800a8b2:	2306      	movs	r3, #6
 800a8b4:	e137      	b.n	800ab26 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	005b      	lsls	r3, r3, #1
 800a8ba:	68fa      	ldr	r2, [r7, #12]
 800a8bc:	4413      	add	r3, r2
 800a8be:	2200      	movs	r2, #0
 800a8c0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	220b      	movs	r2, #11
 800a8cc:	2120      	movs	r1, #32
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fa11 	bl	8008cf6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	61bb      	str	r3, [r7, #24]
 800a8d8:	e002      	b.n	800a8e0 <create_name+0x12c>
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	61bb      	str	r3, [r7, #24]
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	d0f5      	beq.n	800a8da <create_name+0x126>
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	005b      	lsls	r3, r3, #1
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a8fa:	d0ee      	beq.n	800a8da <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d009      	beq.n	800a916 <create_name+0x162>
 800a902:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a906:	f043 0303 	orr.w	r3, r3, #3
 800a90a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a90e:	e002      	b.n	800a916 <create_name+0x162>
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	3b01      	subs	r3, #1
 800a914:	617b      	str	r3, [r7, #20]
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d009      	beq.n	800a930 <create_name+0x17c>
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a922:	3b01      	subs	r3, #1
 800a924:	005b      	lsls	r3, r3, #1
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	4413      	add	r3, r2
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	2b2e      	cmp	r3, #46	; 0x2e
 800a92e:	d1ef      	bne.n	800a910 <create_name+0x15c>

	b = i = 0; ni = 8;
 800a930:	2300      	movs	r3, #0
 800a932:	623b      	str	r3, [r7, #32]
 800a934:	2300      	movs	r3, #0
 800a936:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a93a:	2308      	movs	r3, #8
 800a93c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	1c5a      	adds	r2, r3, #1
 800a942:	61ba      	str	r2, [r7, #24]
 800a944:	005b      	lsls	r3, r3, #1
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	4413      	add	r3, r2
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a94e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 8091 	beq.w	800aa78 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a958:	2b20      	cmp	r3, #32
 800a95a:	d006      	beq.n	800a96a <create_name+0x1b6>
 800a95c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a95e:	2b2e      	cmp	r3, #46	; 0x2e
 800a960:	d10a      	bne.n	800a978 <create_name+0x1c4>
 800a962:	69ba      	ldr	r2, [r7, #24]
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	429a      	cmp	r2, r3
 800a968:	d006      	beq.n	800a978 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 800a96a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a96e:	f043 0303 	orr.w	r3, r3, #3
 800a972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a976:	e07e      	b.n	800aa76 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a978:	6a3a      	ldr	r2, [r7, #32]
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d203      	bcs.n	800a988 <create_name+0x1d4>
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	429a      	cmp	r2, r3
 800a986:	d123      	bne.n	800a9d0 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	2b0b      	cmp	r3, #11
 800a98c:	d106      	bne.n	800a99c <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 800a98e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a992:	f043 0303 	orr.w	r3, r3, #3
 800a996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a99a:	e076      	b.n	800aa8a <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a99c:	69ba      	ldr	r2, [r7, #24]
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d005      	beq.n	800a9b0 <create_name+0x1fc>
 800a9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9a8:	f043 0303 	orr.w	r3, r3, #3
 800a9ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800a9b0:	69ba      	ldr	r2, [r7, #24]
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d867      	bhi.n	800aa88 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	61bb      	str	r3, [r7, #24]
 800a9bc:	2308      	movs	r3, #8
 800a9be:	623b      	str	r3, [r7, #32]
 800a9c0:	230b      	movs	r3, #11
 800a9c2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a9c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a9ce:	e052      	b.n	800aa76 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a9d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9d2:	2b7f      	cmp	r3, #127	; 0x7f
 800a9d4:	d914      	bls.n	800aa00 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a9d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9d8:	2100      	movs	r1, #0
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f001 ff20 	bl	800c820 <ff_convert>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a9e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d004      	beq.n	800a9f4 <create_name+0x240>
 800a9ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a9ec:	3b80      	subs	r3, #128	; 0x80
 800a9ee:	4a24      	ldr	r2, [pc, #144]	; (800aa80 <create_name+0x2cc>)
 800a9f0:	5cd3      	ldrb	r3, [r2, r3]
 800a9f2:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9f8:	f043 0302 	orr.w	r3, r3, #2
 800a9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800aa00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d007      	beq.n	800aa16 <create_name+0x262>
 800aa06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa08:	4619      	mov	r1, r3
 800aa0a:	481e      	ldr	r0, [pc, #120]	; (800aa84 <create_name+0x2d0>)
 800aa0c:	f7fe f9b5 	bl	8008d7a <chk_chr>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d008      	beq.n	800aa28 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800aa16:	235f      	movs	r3, #95	; 0x5f
 800aa18:	84bb      	strh	r3, [r7, #36]	; 0x24
 800aa1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa1e:	f043 0303 	orr.w	r3, r3, #3
 800aa22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa26:	e01b      	b.n	800aa60 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800aa28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa2a:	2b40      	cmp	r3, #64	; 0x40
 800aa2c:	d909      	bls.n	800aa42 <create_name+0x28e>
 800aa2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa30:	2b5a      	cmp	r3, #90	; 0x5a
 800aa32:	d806      	bhi.n	800aa42 <create_name+0x28e>
					b |= 2;
 800aa34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa38:	f043 0302 	orr.w	r3, r3, #2
 800aa3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aa40:	e00e      	b.n	800aa60 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800aa42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa44:	2b60      	cmp	r3, #96	; 0x60
 800aa46:	d90b      	bls.n	800aa60 <create_name+0x2ac>
 800aa48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa4a:	2b7a      	cmp	r3, #122	; 0x7a
 800aa4c:	d808      	bhi.n	800aa60 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 800aa4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa52:	f043 0301 	orr.w	r3, r3, #1
 800aa56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aa5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa5c:	3b20      	subs	r3, #32
 800aa5e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa66:	699a      	ldr	r2, [r3, #24]
 800aa68:	6a3b      	ldr	r3, [r7, #32]
 800aa6a:	1c59      	adds	r1, r3, #1
 800aa6c:	6239      	str	r1, [r7, #32]
 800aa6e:	4413      	add	r3, r2
 800aa70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aa72:	b2d2      	uxtb	r2, r2
 800aa74:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800aa76:	e762      	b.n	800a93e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 800aa78:	bf00      	nop
 800aa7a:	e006      	b.n	800aa8a <create_name+0x2d6>
 800aa7c:	08011af4 	.word	0x08011af4
 800aa80:	08011b74 	.word	0x08011b74
 800aa84:	08011b00 	.word	0x08011b00
			if (si > di) break;			/* No extension */
 800aa88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	2be5      	cmp	r3, #229	; 0xe5
 800aa96:	d105      	bne.n	800aaa4 <create_name+0x2f0>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa9e:	699b      	ldr	r3, [r3, #24]
 800aaa0:	2205      	movs	r2, #5
 800aaa2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	2b08      	cmp	r3, #8
 800aaa8:	d104      	bne.n	800aab4 <create_name+0x300>
 800aaaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800aab4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aab8:	f003 030c 	and.w	r3, r3, #12
 800aabc:	2b0c      	cmp	r3, #12
 800aabe:	d005      	beq.n	800aacc <create_name+0x318>
 800aac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aac4:	f003 0303 	and.w	r3, r3, #3
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d105      	bne.n	800aad8 <create_name+0x324>
		cf |= NS_LFN;
 800aacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aad0:	f043 0302 	orr.w	r3, r3, #2
 800aad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800aad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aadc:	f003 0302 	and.w	r3, r3, #2
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d117      	bne.n	800ab14 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800aae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aae8:	f003 0303 	and.w	r3, r3, #3
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d105      	bne.n	800aafc <create_name+0x348>
 800aaf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aaf4:	f043 0310 	orr.w	r3, r3, #16
 800aaf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800aafc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab00:	f003 030c 	and.w	r3, r3, #12
 800ab04:	2b04      	cmp	r3, #4
 800ab06:	d105      	bne.n	800ab14 <create_name+0x360>
 800ab08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab0c:	f043 0308 	orr.w	r3, r3, #8
 800ab10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	330b      	adds	r3, #11
 800ab1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ab22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ab24:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3728      	adds	r7, #40	; 0x28
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop

0800ab30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	2b2f      	cmp	r3, #47	; 0x2f
 800ab40:	d003      	beq.n	800ab4a <follow_path+0x1a>
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b5c      	cmp	r3, #92	; 0x5c
 800ab48:	d102      	bne.n	800ab50 <follow_path+0x20>
		path++;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab56:	461a      	mov	r2, r3
 800ab58:	2300      	movs	r3, #0
 800ab5a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b1f      	cmp	r3, #31
 800ab62:	d80c      	bhi.n	800ab7e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 800ab64:	2100      	movs	r1, #0
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f7fe ffe3 	bl	8009b32 <dir_sdi>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab76:	461a      	mov	r2, r3
 800ab78:	2300      	movs	r3, #0
 800ab7a:	6153      	str	r3, [r2, #20]
 800ab7c:	e049      	b.n	800ac12 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ab7e:	463b      	mov	r3, r7
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f7ff fe16 	bl	800a7b4 <create_name>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ab8c:	7bfb      	ldrb	r3, [r7, #15]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d13a      	bne.n	800ac08 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f7ff fc1d 	bl	800a3d2 <dir_find>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	7adb      	ldrb	r3, [r3, #11]
 800aba6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00a      	beq.n	800abc4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d12b      	bne.n	800ac0c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
 800abb6:	f003 0304 	and.w	r3, r3, #4
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d126      	bne.n	800ac0c <follow_path+0xdc>
 800abbe:	2305      	movs	r3, #5
 800abc0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800abc2:	e023      	b.n	800ac0c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	f003 0304 	and.w	r3, r3, #4
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d120      	bne.n	800ac10 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abd4:	695b      	ldr	r3, [r3, #20]
 800abd6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	330b      	adds	r3, #11
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	f003 0310 	and.w	r3, r3, #16
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <follow_path+0xbc>
				res = FR_NO_PATH; break;
 800abe6:	2305      	movs	r3, #5
 800abe8:	73fb      	strb	r3, [r7, #15]
 800abea:	e012      	b.n	800ac12 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	68b9      	ldr	r1, [r7, #8]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7ff fa01 	bl	8009ffe <ld_clust>
 800abfc:	4602      	mov	r2, r0
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac04:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac06:	e7ba      	b.n	800ab7e <follow_path+0x4e>
			if (res != FR_OK) break;
 800ac08:	bf00      	nop
 800ac0a:	e002      	b.n	800ac12 <follow_path+0xe2>
				break;
 800ac0c:	bf00      	nop
 800ac0e:	e000      	b.n	800ac12 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac10:	bf00      	nop
		}
	}

	return res;
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b087      	sub	sp, #28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ac24:	f04f 33ff 	mov.w	r3, #4294967295
 800ac28:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d031      	beq.n	800ac96 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	617b      	str	r3, [r7, #20]
 800ac38:	e002      	b.n	800ac40 <get_ldnumber+0x24>
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	617b      	str	r3, [r7, #20]
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b1f      	cmp	r3, #31
 800ac46:	d903      	bls.n	800ac50 <get_ldnumber+0x34>
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	2b3a      	cmp	r3, #58	; 0x3a
 800ac4e:	d1f4      	bne.n	800ac3a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	2b3a      	cmp	r3, #58	; 0x3a
 800ac56:	d11c      	bne.n	800ac92 <get_ldnumber+0x76>
			tp = *path;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	1c5a      	adds	r2, r3, #1
 800ac62:	60fa      	str	r2, [r7, #12]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	3b30      	subs	r3, #48	; 0x30
 800ac68:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2b09      	cmp	r3, #9
 800ac6e:	d80e      	bhi.n	800ac8e <get_ldnumber+0x72>
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d10a      	bne.n	800ac8e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d107      	bne.n	800ac8e <get_ldnumber+0x72>
					vol = (int)i;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	3301      	adds	r3, #1
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	697a      	ldr	r2, [r7, #20]
 800ac8c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	e002      	b.n	800ac98 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ac92:	2300      	movs	r3, #0
 800ac94:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ac96:	693b      	ldr	r3, [r7, #16]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	371c      	adds	r7, #28
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acb4:	2200      	movs	r2, #0
 800acb6:	711a      	strb	r2, [r3, #4]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800acbe:	461a      	mov	r2, r3
 800acc0:	f04f 33ff 	mov.w	r3, #4294967295
 800acc4:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800acc6:	6839      	ldr	r1, [r7, #0]
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7fe fa83 	bl	80091d4 <move_window>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d001      	beq.n	800acd8 <check_fs+0x34>
		return 3;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e04a      	b.n	800ad6e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800acde:	3301      	adds	r3, #1
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	021b      	lsls	r3, r3, #8
 800ace4:	b21a      	sxth	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800acec:	b21b      	sxth	r3, r3
 800acee:	4313      	orrs	r3, r2
 800acf0:	b21b      	sxth	r3, r3
 800acf2:	4a21      	ldr	r2, [pc, #132]	; (800ad78 <check_fs+0xd4>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d001      	beq.n	800acfc <check_fs+0x58>
		return 2;
 800acf8:	2302      	movs	r3, #2
 800acfa:	e038      	b.n	800ad6e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3336      	adds	r3, #54	; 0x36
 800ad00:	3303      	adds	r3, #3
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	061a      	lsls	r2, r3, #24
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	3336      	adds	r3, #54	; 0x36
 800ad0a:	3302      	adds	r3, #2
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	041b      	lsls	r3, r3, #16
 800ad10:	4313      	orrs	r3, r2
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	3236      	adds	r2, #54	; 0x36
 800ad16:	3201      	adds	r2, #1
 800ad18:	7812      	ldrb	r2, [r2, #0]
 800ad1a:	0212      	lsls	r2, r2, #8
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800ad24:	4313      	orrs	r3, r2
 800ad26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad2a:	4a14      	ldr	r2, [pc, #80]	; (800ad7c <check_fs+0xd8>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d101      	bne.n	800ad34 <check_fs+0x90>
		return 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	e01c      	b.n	800ad6e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	3352      	adds	r3, #82	; 0x52
 800ad38:	3303      	adds	r3, #3
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	061a      	lsls	r2, r3, #24
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	3352      	adds	r3, #82	; 0x52
 800ad42:	3302      	adds	r3, #2
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	041b      	lsls	r3, r3, #16
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	3252      	adds	r2, #82	; 0x52
 800ad4e:	3201      	adds	r2, #1
 800ad50:	7812      	ldrb	r2, [r2, #0]
 800ad52:	0212      	lsls	r2, r2, #8
 800ad54:	4313      	orrs	r3, r2
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad62:	4a06      	ldr	r2, [pc, #24]	; (800ad7c <check_fs+0xd8>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d101      	bne.n	800ad6c <check_fs+0xc8>
		return 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e000      	b.n	800ad6e <check_fs+0xca>

	return 1;
 800ad6c:	2301      	movs	r3, #1
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	ffffaa55 	.word	0xffffaa55
 800ad7c:	00544146 	.word	0x00544146

0800ad80 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b096      	sub	sp, #88	; 0x58
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	4613      	mov	r3, r2
 800ad8c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ad94:	68b8      	ldr	r0, [r7, #8]
 800ad96:	f7ff ff41 	bl	800ac1c <get_ldnumber>
 800ad9a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	da01      	bge.n	800ada6 <find_volume+0x26>
 800ada2:	230b      	movs	r3, #11
 800ada4:	e311      	b.n	800b3ca <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ada6:	4a98      	ldr	r2, [pc, #608]	; (800b008 <find_volume+0x288>)
 800ada8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adae:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800adb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <find_volume+0x3a>
 800adb6:	230c      	movs	r3, #12
 800adb8:	e307      	b.n	800b3ca <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adbe:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800adc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d01c      	beq.n	800ae06 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800adcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800add2:	785b      	ldrb	r3, [r3, #1]
 800add4:	4618      	mov	r0, r3
 800add6:	f7fd fed1 	bl	8008b7c <disk_status>
 800adda:	4603      	mov	r3, r0
 800addc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ade0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ade4:	f003 0301 	and.w	r3, r3, #1
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10c      	bne.n	800ae06 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800adec:	79fb      	ldrb	r3, [r7, #7]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d007      	beq.n	800ae02 <find_volume+0x82>
 800adf2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800adf6:	f003 0304 	and.w	r3, r3, #4
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800adfe:	230a      	movs	r3, #10
 800ae00:	e2e3      	b.n	800b3ca <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 800ae02:	2300      	movs	r3, #0
 800ae04:	e2e1      	b.n	800b3ca <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ae06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ae10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae12:	b2da      	uxtb	r2, r3
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae22:	785b      	ldrb	r3, [r3, #1]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fd fec3 	bl	8008bb0 <disk_initialize>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800ae30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e2c4      	b.n	800b3ca <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800ae40:	79fb      	ldrb	r3, [r7, #7]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d007      	beq.n	800ae56 <find_volume+0xd6>
 800ae46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae4a:	f003 0304 	and.w	r3, r3, #4
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 800ae52:	230a      	movs	r3, #10
 800ae54:	e2b9      	b.n	800b3ca <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 800ae56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae5c:	7858      	ldrb	r0, [r3, #1]
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae64:	330a      	adds	r3, #10
 800ae66:	461a      	mov	r2, r3
 800ae68:	2102      	movs	r1, #2
 800ae6a:	f7fd ff07 	bl	8008c7c <disk_ioctl>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10d      	bne.n	800ae90 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 800ae74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae7a:	895b      	ldrh	r3, [r3, #10]
 800ae7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae80:	d306      	bcc.n	800ae90 <find_volume+0x110>
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae88:	895b      	ldrh	r3, [r3, #10]
 800ae8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae8e:	d901      	bls.n	800ae94 <find_volume+0x114>
 800ae90:	2301      	movs	r3, #1
 800ae92:	e29a      	b.n	800b3ca <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800ae98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ae9a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae9c:	f7ff ff02 	bl	800aca4 <check_fs>
 800aea0:	4603      	mov	r3, r0
 800aea2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800aea6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d153      	bne.n	800af56 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800aeae:	2300      	movs	r3, #0
 800aeb0:	643b      	str	r3, [r7, #64]	; 0x40
 800aeb2:	e028      	b.n	800af06 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800aeb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aeb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeb8:	011b      	lsls	r3, r3, #4
 800aeba:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800aebe:	4413      	add	r3, r2
 800aec0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	3304      	adds	r3, #4
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d012      	beq.n	800aef2 <find_volume+0x172>
 800aecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aece:	330b      	adds	r3, #11
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	061a      	lsls	r2, r3, #24
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	330a      	adds	r3, #10
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	041b      	lsls	r3, r3, #16
 800aedc:	4313      	orrs	r3, r2
 800aede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aee0:	3209      	adds	r2, #9
 800aee2:	7812      	ldrb	r2, [r2, #0]
 800aee4:	0212      	lsls	r2, r2, #8
 800aee6:	4313      	orrs	r3, r2
 800aee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aeea:	3208      	adds	r2, #8
 800aeec:	7812      	ldrb	r2, [r2, #0]
 800aeee:	431a      	orrs	r2, r3
 800aef0:	e000      	b.n	800aef4 <find_volume+0x174>
 800aef2:	2200      	movs	r2, #0
 800aef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	3358      	adds	r3, #88	; 0x58
 800aefa:	443b      	add	r3, r7
 800aefc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800af00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af02:	3301      	adds	r3, #1
 800af04:	643b      	str	r3, [r7, #64]	; 0x40
 800af06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d9d3      	bls.n	800aeb4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800af0c:	2300      	movs	r3, #0
 800af0e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800af10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	d002      	beq.n	800af1c <find_volume+0x19c>
 800af16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af18:	3b01      	subs	r3, #1
 800af1a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800af1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	3358      	adds	r3, #88	; 0x58
 800af22:	443b      	add	r3, r7
 800af24:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800af28:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800af2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d005      	beq.n	800af3c <find_volume+0x1bc>
 800af30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af34:	f7ff feb6 	bl	800aca4 <check_fs>
 800af38:	4603      	mov	r3, r0
 800af3a:	e000      	b.n	800af3e <find_volume+0x1be>
 800af3c:	2302      	movs	r3, #2
 800af3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800af42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af46:	2b00      	cmp	r3, #0
 800af48:	d005      	beq.n	800af56 <find_volume+0x1d6>
 800af4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af4c:	3301      	adds	r3, #1
 800af4e:	643b      	str	r3, [r7, #64]	; 0x40
 800af50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af52:	2b03      	cmp	r3, #3
 800af54:	d9e2      	bls.n	800af1c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800af56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af5a:	2b03      	cmp	r3, #3
 800af5c:	d101      	bne.n	800af62 <find_volume+0x1e2>
 800af5e:	2301      	movs	r3, #1
 800af60:	e233      	b.n	800b3ca <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800af62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <find_volume+0x1ee>
 800af6a:	230d      	movs	r3, #13
 800af6c:	e22d      	b.n	800b3ca <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	7b1b      	ldrb	r3, [r3, #12]
 800af72:	021b      	lsls	r3, r3, #8
 800af74:	b21a      	sxth	r2, r3
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	7adb      	ldrb	r3, [r3, #11]
 800af7a:	b21b      	sxth	r3, r3
 800af7c:	4313      	orrs	r3, r2
 800af7e:	b21a      	sxth	r2, r3
 800af80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af86:	895b      	ldrh	r3, [r3, #10]
 800af88:	b21b      	sxth	r3, r3
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d001      	beq.n	800af92 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 800af8e:	230d      	movs	r3, #13
 800af90:	e21b      	b.n	800b3ca <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800af92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af94:	7ddb      	ldrb	r3, [r3, #23]
 800af96:	021b      	lsls	r3, r3, #8
 800af98:	b21a      	sxth	r2, r3
 800af9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9c:	7d9b      	ldrb	r3, [r3, #22]
 800af9e:	b21b      	sxth	r3, r3
 800afa0:	4313      	orrs	r3, r2
 800afa2:	b21b      	sxth	r3, r3
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800afa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d112      	bne.n	800afd4 <find_volume+0x254>
 800afae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800afb4:	061a      	lsls	r2, r3, #24
 800afb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800afbc:	041b      	lsls	r3, r3, #16
 800afbe:	4313      	orrs	r3, r2
 800afc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afc2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800afc6:	0212      	lsls	r2, r2, #8
 800afc8:	4313      	orrs	r3, r2
 800afca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afcc:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800afd0:	4313      	orrs	r3, r2
 800afd2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afda:	461a      	mov	r2, r3
 800afdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afde:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800afe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe2:	7c1a      	ldrb	r2, [r3, #16]
 800afe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afea:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800afec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aff2:	78db      	ldrb	r3, [r3, #3]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d009      	beq.n	800b00c <find_volume+0x28c>
 800aff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800affe:	78db      	ldrb	r3, [r3, #3]
 800b000:	2b02      	cmp	r3, #2
 800b002:	d003      	beq.n	800b00c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 800b004:	230d      	movs	r3, #13
 800b006:	e1e0      	b.n	800b3ca <find_volume+0x64a>
 800b008:	20002604 	.word	0x20002604
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b012:	78db      	ldrb	r3, [r3, #3]
 800b014:	461a      	mov	r2, r3
 800b016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b018:	fb02 f303 	mul.w	r3, r2, r3
 800b01c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b020:	7b5a      	ldrb	r2, [r3, #13]
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b028:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b030:	789b      	ldrb	r3, [r3, #2]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00c      	beq.n	800b050 <find_volume+0x2d0>
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b03c:	789b      	ldrb	r3, [r3, #2]
 800b03e:	461a      	mov	r2, r3
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b046:	789b      	ldrb	r3, [r3, #2]
 800b048:	3b01      	subs	r3, #1
 800b04a:	4013      	ands	r3, r2
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 800b050:	230d      	movs	r3, #13
 800b052:	e1ba      	b.n	800b3ca <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	7c9b      	ldrb	r3, [r3, #18]
 800b058:	021b      	lsls	r3, r3, #8
 800b05a:	b21a      	sxth	r2, r3
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	7c5b      	ldrb	r3, [r3, #17]
 800b060:	b21b      	sxth	r3, r3
 800b062:	4313      	orrs	r3, r2
 800b064:	b21b      	sxth	r3, r3
 800b066:	b29a      	uxth	r2, r3
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b06e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b076:	891b      	ldrh	r3, [r3, #8]
 800b078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b07a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b07e:	8952      	ldrh	r2, [r2, #10]
 800b080:	0952      	lsrs	r2, r2, #5
 800b082:	b292      	uxth	r2, r2
 800b084:	fbb3 f1f2 	udiv	r1, r3, r2
 800b088:	fb01 f202 	mul.w	r2, r1, r2
 800b08c:	1a9b      	subs	r3, r3, r2
 800b08e:	b29b      	uxth	r3, r3
 800b090:	2b00      	cmp	r3, #0
 800b092:	d001      	beq.n	800b098 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 800b094:	230d      	movs	r3, #13
 800b096:	e198      	b.n	800b3ca <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09a:	7d1b      	ldrb	r3, [r3, #20]
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	b21a      	sxth	r2, r3
 800b0a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a2:	7cdb      	ldrb	r3, [r3, #19]
 800b0a4:	b21b      	sxth	r3, r3
 800b0a6:	4313      	orrs	r3, r2
 800b0a8:	b21b      	sxth	r3, r3
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b0ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d112      	bne.n	800b0da <find_volume+0x35a>
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b0ba:	061a      	lsls	r2, r3, #24
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b0c2:	041b      	lsls	r3, r3, #16
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0c8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b0cc:	0212      	lsls	r2, r2, #8
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	7bdb      	ldrb	r3, [r3, #15]
 800b0de:	021b      	lsls	r3, r3, #8
 800b0e0:	b21a      	sxth	r2, r3
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e4:	7b9b      	ldrb	r3, [r3, #14]
 800b0e6:	b21b      	sxth	r3, r3
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	b21b      	sxth	r3, r3
 800b0ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b0ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d101      	bne.n	800b0f8 <find_volume+0x378>
 800b0f4:	230d      	movs	r3, #13
 800b0f6:	e168      	b.n	800b3ca <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b0f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fc:	4413      	add	r3, r2
 800b0fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b100:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b104:	8911      	ldrh	r1, [r2, #8]
 800b106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b108:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b10c:	8952      	ldrh	r2, [r2, #10]
 800b10e:	0952      	lsrs	r2, r2, #5
 800b110:	b292      	uxth	r2, r2
 800b112:	fbb1 f2f2 	udiv	r2, r1, r2
 800b116:	b292      	uxth	r2, r2
 800b118:	4413      	add	r3, r2
 800b11a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b11c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	429a      	cmp	r2, r3
 800b122:	d201      	bcs.n	800b128 <find_volume+0x3a8>
 800b124:	230d      	movs	r3, #13
 800b126:	e150      	b.n	800b3ca <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b130:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b134:	7892      	ldrb	r2, [r2, #2]
 800b136:	fbb3 f3f2 	udiv	r3, r3, r2
 800b13a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d101      	bne.n	800b146 <find_volume+0x3c6>
 800b142:	230d      	movs	r3, #13
 800b144:	e141      	b.n	800b3ca <find_volume+0x64a>
	fmt = FS_FAT12;
 800b146:	2301      	movs	r3, #1
 800b148:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b152:	4293      	cmp	r3, r2
 800b154:	d902      	bls.n	800b15c <find_volume+0x3dc>
 800b156:	2302      	movs	r3, #2
 800b158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b162:	4293      	cmp	r3, r2
 800b164:	d902      	bls.n	800b16c <find_volume+0x3ec>
 800b166:	2303      	movs	r3, #3
 800b168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	3302      	adds	r3, #2
 800b170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b172:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b176:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b17e:	461a      	mov	r2, r3
 800b180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b182:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b184:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b188:	4413      	add	r3, r2
 800b18a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b18c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b190:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 800b192:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	4413      	add	r3, r2
 800b198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b19a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b19e:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 800b1a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1a4:	2b03      	cmp	r3, #3
 800b1a6:	d124      	bne.n	800b1f2 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ae:	891b      	ldrh	r3, [r3, #8]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <find_volume+0x438>
 800b1b4:	230d      	movs	r3, #13
 800b1b6:	e108      	b.n	800b3ca <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b1be:	061a      	lsls	r2, r3, #24
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b1c6:	041b      	lsls	r3, r3, #16
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1cc:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b1d0:	0212      	lsls	r2, r2, #8
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1d6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b1e2:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1ea:	695b      	ldr	r3, [r3, #20]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b1f0:	e02b      	b.n	800b24a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b1f8:	891b      	ldrh	r3, [r3, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <find_volume+0x482>
 800b1fe:	230d      	movs	r3, #13
 800b200:	e0e3      	b.n	800b3ca <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b208:	6a1a      	ldr	r2, [r3, #32]
 800b20a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b20c:	4413      	add	r3, r2
 800b20e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b210:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b214:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b216:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d105      	bne.n	800b22a <find_volume+0x4aa>
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	e00e      	b.n	800b248 <find_volume+0x4c8>
 800b22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b230:	695a      	ldr	r2, [r3, #20]
 800b232:	4613      	mov	r3, r2
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	4413      	add	r3, r2
 800b238:	085a      	lsrs	r2, r3, #1
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b240:	695b      	ldr	r3, [r3, #20]
 800b242:	f003 0301 	and.w	r3, r3, #1
 800b246:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b248:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b250:	699a      	ldr	r2, [r3, #24]
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b258:	895b      	ldrh	r3, [r3, #10]
 800b25a:	4619      	mov	r1, r3
 800b25c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b25e:	440b      	add	r3, r1
 800b260:	3b01      	subs	r3, #1
 800b262:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b264:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 800b268:	8949      	ldrh	r1, [r1, #10]
 800b26a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b26e:	429a      	cmp	r2, r3
 800b270:	d201      	bcs.n	800b276 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 800b272:	230d      	movs	r3, #13
 800b274:	e0a9      	b.n	800b3ca <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b27c:	461a      	mov	r2, r3
 800b27e:	f04f 33ff 	mov.w	r3, #4294967295
 800b282:	6113      	str	r3, [r2, #16]
 800b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b28e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b292:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b29a:	2280      	movs	r2, #128	; 0x80
 800b29c:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b29e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d17a      	bne.n	800b39c <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	b21a      	sxth	r2, r3
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2b6:	b21b      	sxth	r3, r3
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	b21b      	sxth	r3, r3
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d16d      	bne.n	800b39c <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b2c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2c8:	f7fd ff84 	bl	80091d4 <move_window>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d164      	bne.n	800b39c <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 800b2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2d8:	2200      	movs	r2, #0
 800b2da:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b2e2:	021b      	lsls	r3, r3, #8
 800b2e4:	b21a      	sxth	r2, r3
 800b2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e8:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b2ec:	b21b      	sxth	r3, r3
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	b21b      	sxth	r3, r3
 800b2f2:	4a38      	ldr	r2, [pc, #224]	; (800b3d4 <find_volume+0x654>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d151      	bne.n	800b39c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	78db      	ldrb	r3, [r3, #3]
 800b2fc:	061a      	lsls	r2, r3, #24
 800b2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b300:	789b      	ldrb	r3, [r3, #2]
 800b302:	041b      	lsls	r3, r3, #16
 800b304:	4313      	orrs	r3, r2
 800b306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b308:	7852      	ldrb	r2, [r2, #1]
 800b30a:	0212      	lsls	r2, r2, #8
 800b30c:	4313      	orrs	r3, r2
 800b30e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b310:	7812      	ldrb	r2, [r2, #0]
 800b312:	4313      	orrs	r3, r2
 800b314:	4a30      	ldr	r2, [pc, #192]	; (800b3d8 <find_volume+0x658>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d140      	bne.n	800b39c <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b320:	061a      	lsls	r2, r3, #24
 800b322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b324:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b328:	041b      	lsls	r3, r3, #16
 800b32a:	4313      	orrs	r3, r2
 800b32c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b32e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b332:	0212      	lsls	r2, r2, #8
 800b334:	4313      	orrs	r3, r2
 800b336:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b338:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b33c:	4313      	orrs	r3, r2
 800b33e:	4a27      	ldr	r2, [pc, #156]	; (800b3dc <find_volume+0x65c>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d12b      	bne.n	800b39c <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b346:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b34a:	061a      	lsls	r2, r3, #24
 800b34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b34e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b352:	041b      	lsls	r3, r3, #16
 800b354:	4313      	orrs	r3, r2
 800b356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b358:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b35c:	0212      	lsls	r2, r2, #8
 800b35e:	4313      	orrs	r3, r2
 800b360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b362:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b366:	4313      	orrs	r3, r2
 800b368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b36a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b36e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b372:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b376:	061a      	lsls	r2, r3, #24
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b37e:	041b      	lsls	r3, r3, #16
 800b380:	4313      	orrs	r3, r2
 800b382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b384:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b388:	0212      	lsls	r2, r2, #8
 800b38a:	4313      	orrs	r3, r2
 800b38c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b38e:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b392:	4313      	orrs	r3, r2
 800b394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b396:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b39a:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3a8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	; (800b3e0 <find_volume+0x660>)
 800b3ac:	881b      	ldrh	r3, [r3, #0]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	4b0b      	ldr	r3, [pc, #44]	; (800b3e0 <find_volume+0x660>)
 800b3b4:	801a      	strh	r2, [r3, #0]
 800b3b6:	4b0a      	ldr	r3, [pc, #40]	; (800b3e0 <find_volume+0x660>)
 800b3b8:	881a      	ldrh	r2, [r3, #0]
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3c0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b3c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3c4:	f7fd fe8a 	bl	80090dc <clear_lock>
#endif

	return FR_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3758      	adds	r7, #88	; 0x58
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	ffffaa55 	.word	0xffffaa55
 800b3d8:	41615252 	.word	0x41615252
 800b3dc:	61417272 	.word	0x61417272
 800b3e0:	20002608 	.word	0x20002608

0800b3e4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d02a      	beq.n	800b44c <validate+0x68>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d024      	beq.n	800b44c <validate+0x68>
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d01b      	beq.n	800b44c <validate+0x68>
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b420:	88da      	ldrh	r2, [r3, #6]
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b428:	889b      	ldrh	r3, [r3, #4]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d10e      	bne.n	800b44c <validate+0x68>
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b43a:	785b      	ldrb	r3, [r3, #1]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7fd fb9d 	bl	8008b7c <disk_status>
 800b442:	4603      	mov	r3, r0
 800b444:	f003 0301 	and.w	r3, r3, #1
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800b44c:	2309      	movs	r3, #9
 800b44e:	e000      	b.n	800b452 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3710      	adds	r7, #16
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b088      	sub	sp, #32
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	4613      	mov	r3, r2
 800b468:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b46e:	f107 0310 	add.w	r3, r7, #16
 800b472:	4618      	mov	r0, r3
 800b474:	f7ff fbd2 	bl	800ac1c <get_ldnumber>
 800b478:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	da01      	bge.n	800b484 <f_mount+0x28>
 800b480:	230b      	movs	r3, #11
 800b482:	e02f      	b.n	800b4e4 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b484:	4a19      	ldr	r2, [pc, #100]	; (800b4ec <f_mount+0x90>)
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b48c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d007      	beq.n	800b4a4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 800b494:	69b8      	ldr	r0, [r7, #24]
 800b496:	f7fd fe21 	bl	80090dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d004      	beq.n	800b4b4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	490d      	ldr	r1, [pc, #52]	; (800b4ec <f_mount+0x90>)
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d002      	beq.n	800b4ca <f_mount+0x6e>
 800b4c4:	79fb      	ldrb	r3, [r7, #7]
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d001      	beq.n	800b4ce <f_mount+0x72>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e00a      	b.n	800b4e4 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b4ce:	f107 0108 	add.w	r1, r7, #8
 800b4d2:	f107 030c 	add.w	r3, r7, #12
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7ff fc51 	bl	800ad80 <find_volume>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3720      	adds	r7, #32
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	20002604 	.word	0x20002604

0800b4f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b4fe:	f843 0c4c 	str.w	r0, [r3, #-76]
 800b502:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b506:	f843 1c50 	str.w	r1, [r3, #-80]
 800b50a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b50e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b512:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b516:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d101      	bne.n	800b522 <f_open+0x32>
 800b51e:	2309      	movs	r3, #9
 800b520:	e2f7      	b.n	800bb12 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 800b522:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b526:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b52e:	461a      	mov	r2, r3
 800b530:	2300      	movs	r3, #0
 800b532:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b534:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b538:	461a      	mov	r2, r3
 800b53a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b53e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b542:	f003 031f 	and.w	r3, r3, #31
 800b546:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b54a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b54e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b552:	f023 0301 	bic.w	r3, r3, #1
 800b556:	b2da      	uxtb	r2, r3
 800b558:	f107 0118 	add.w	r1, r7, #24
 800b55c:	3910      	subs	r1, #16
 800b55e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b562:	3b18      	subs	r3, #24
 800b564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff fc09 	bl	800ad80 <find_volume>
 800b56e:	4603      	mov	r3, r0
 800b570:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b574:	f102 0217 	add.w	r2, r2, #23
 800b578:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b57a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b57e:	f103 0317 	add.w	r3, r3, #23
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	f040 82bf 	bne.w	800bb08 <f_open+0x618>
		INIT_BUF(dj);
 800b58a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b58e:	461a      	mov	r2, r3
 800b590:	f107 0318 	add.w	r3, r7, #24
 800b594:	3b04      	subs	r3, #4
 800b596:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 800b59a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b59e:	461a      	mov	r2, r3
 800b5a0:	4bd4      	ldr	r3, [pc, #848]	; (800b8f4 <f_open+0x404>)
 800b5a2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 800b5a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b5aa:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800b5ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b5b2:	3b18      	subs	r3, #24
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7ff faba 	bl	800ab30 <follow_path>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b5c2:	f102 0217 	add.w	r2, r2, #23
 800b5c6:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 800b5c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b5cc:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800b5d0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b5d4:	f102 0210 	add.w	r2, r2, #16
 800b5d8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5da:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5de:	f103 0317 	add.w	r3, r3, #23
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d126      	bne.n	800b636 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 800b5e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b5ec:	f103 0310 	add.w	r3, r3, #16
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d106      	bne.n	800b604 <f_open+0x114>
				res = FR_INVALID_NAME;
 800b5f6:	2306      	movs	r3, #6
 800b5f8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b5fc:	f102 0217 	add.w	r2, r2, #23
 800b600:	7013      	strb	r3, [r2, #0]
 800b602:	e018      	b.n	800b636 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b604:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b608:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b60c:	f023 0301 	bic.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	bf14      	ite	ne
 800b614:	2301      	movne	r3, #1
 800b616:	2300      	moveq	r3, #0
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	461a      	mov	r2, r3
 800b61c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b620:	3b18      	subs	r3, #24
 800b622:	4611      	mov	r1, r2
 800b624:	4618      	mov	r0, r3
 800b626:	f7fd fbc3 	bl	8008db0 <chk_lock>
 800b62a:	4603      	mov	r3, r0
 800b62c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b630:	f102 0217 	add.w	r2, r2, #23
 800b634:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b63a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b63e:	f003 031c 	and.w	r3, r3, #28
 800b642:	2b00      	cmp	r3, #0
 800b644:	f000 813c 	beq.w	800b8c0 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 800b648:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b64c:	f103 0317 	add.w	r3, r3, #23
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d02e      	beq.n	800b6b4 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b656:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b65a:	f103 0317 	add.w	r3, r3, #23
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2b04      	cmp	r3, #4
 800b662:	d112      	bne.n	800b68a <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b664:	f7fd fc14 	bl	8008e90 <enq_lock>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d007      	beq.n	800b67e <f_open+0x18e>
 800b66e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b672:	3b18      	subs	r3, #24
 800b674:	4618      	mov	r0, r3
 800b676:	f7fe ff79 	bl	800a56c <dir_register>
 800b67a:	4603      	mov	r3, r0
 800b67c:	e000      	b.n	800b680 <f_open+0x190>
 800b67e:	2312      	movs	r3, #18
 800b680:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b684:	f102 0217 	add.w	r2, r2, #23
 800b688:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b68a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b68e:	461a      	mov	r2, r3
 800b690:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b694:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b698:	f043 0308 	orr.w	r3, r3, #8
 800b69c:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 800b6a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b6a4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 800b6a8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b6ac:	f102 0210 	add.w	r2, r2, #16
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	e01f      	b.n	800b6f4 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b6b4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b6b8:	f103 0310 	add.w	r3, r3, #16
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	330b      	adds	r3, #11
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	f003 0311 	and.w	r3, r3, #17
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d006      	beq.n	800b6d8 <f_open+0x1e8>
					res = FR_DENIED;
 800b6ca:	2307      	movs	r3, #7
 800b6cc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b6d0:	f102 0217 	add.w	r2, r2, #23
 800b6d4:	7013      	strb	r3, [r2, #0]
 800b6d6:	e00d      	b.n	800b6f4 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b6d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b6dc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b6e0:	f003 0304 	and.w	r3, r3, #4
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d005      	beq.n	800b6f4 <f_open+0x204>
						res = FR_EXIST;
 800b6e8:	2308      	movs	r3, #8
 800b6ea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b6ee:	f102 0217 	add.w	r2, r2, #23
 800b6f2:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b6f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b6f8:	f103 0317 	add.w	r3, r3, #23
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	f040 8113 	bne.w	800b92a <f_open+0x43a>
 800b704:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b708:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b70c:	f003 0308 	and.w	r3, r3, #8
 800b710:	2b00      	cmp	r3, #0
 800b712:	f000 810a 	beq.w	800b92a <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 800b716:	f7fd f9cb 	bl	8008ab0 <get_fattime>
 800b71a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b71e:	f103 030c 	add.w	r3, r3, #12
 800b722:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b724:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b728:	f103 0310 	add.w	r3, r3, #16
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	330e      	adds	r3, #14
 800b730:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b734:	f102 020c 	add.w	r2, r2, #12
 800b738:	6812      	ldr	r2, [r2, #0]
 800b73a:	b2d2      	uxtb	r2, r2
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b742:	f103 030c 	add.w	r3, r3, #12
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	b29b      	uxth	r3, r3
 800b74a:	0a1b      	lsrs	r3, r3, #8
 800b74c:	b29a      	uxth	r2, r3
 800b74e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b752:	f103 0310 	add.w	r3, r3, #16
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	330f      	adds	r3, #15
 800b75a:	b2d2      	uxtb	r2, r2
 800b75c:	701a      	strb	r2, [r3, #0]
 800b75e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b762:	f103 030c 	add.w	r3, r3, #12
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	0c1a      	lsrs	r2, r3, #16
 800b76a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b76e:	f103 0310 	add.w	r3, r3, #16
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3310      	adds	r3, #16
 800b776:	b2d2      	uxtb	r2, r2
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b77e:	f103 030c 	add.w	r3, r3, #12
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	0e1a      	lsrs	r2, r3, #24
 800b786:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b78a:	f103 0310 	add.w	r3, r3, #16
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3311      	adds	r3, #17
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b796:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b79a:	f103 0310 	add.w	r3, r3, #16
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	330b      	adds	r3, #11
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b7a6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b7aa:	f103 0310 	add.w	r3, r3, #16
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	331c      	adds	r3, #28
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b7ba:	f103 0310 	add.w	r3, r3, #16
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	331d      	adds	r3, #29
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	701a      	strb	r2, [r3, #0]
 800b7c6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b7ca:	f103 0310 	add.w	r3, r3, #16
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	331e      	adds	r3, #30
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	701a      	strb	r2, [r3, #0]
 800b7d6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b7da:	f103 0310 	add.w	r3, r3, #16
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	331f      	adds	r3, #31
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b7e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b7ea:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b7ee:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b7f2:	f102 0210 	add.w	r2, r2, #16
 800b7f6:	6811      	ldr	r1, [r2, #0]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fe fc00 	bl	8009ffe <ld_clust>
 800b7fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b802:	f103 0308 	add.w	r3, r3, #8
 800b806:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 800b808:	2100      	movs	r1, #0
 800b80a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b80e:	f103 0310 	add.w	r3, r3, #16
 800b812:	6818      	ldr	r0, [r3, #0]
 800b814:	f7fe fc22 	bl	800a05c <st_clust>
				dj.fs->wflag = 1;
 800b818:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b81c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b824:	2201      	movs	r2, #1
 800b826:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 800b828:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b82c:	f103 0308 	add.w	r3, r3, #8
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d079      	beq.n	800b92a <f_open+0x43a>
					dw = dj.fs->winsect;
 800b836:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b83a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b844:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b848:	f102 020c 	add.w	r2, r2, #12
 800b84c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 800b84e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b852:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b856:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b85a:	f102 0208 	add.w	r2, r2, #8
 800b85e:	6811      	ldr	r1, [r2, #0]
 800b860:	4618      	mov	r0, r3
 800b862:	f7fe f81c 	bl	800989e <remove_chain>
 800b866:	4603      	mov	r3, r0
 800b868:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b86c:	f102 0217 	add.w	r2, r2, #23
 800b870:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 800b872:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b876:	f103 0317 	add.w	r3, r3, #23
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d154      	bne.n	800b92a <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b880:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b884:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 800b888:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b88c:	f103 0308 	add.w	r3, r3, #8
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3b01      	subs	r3, #1
 800b894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b898:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 800b89a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b89e:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b8a2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b8a6:	f102 020c 	add.w	r2, r2, #12
 800b8aa:	6811      	ldr	r1, [r2, #0]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7fd fc91 	bl	80091d4 <move_window>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b8b8:	f102 0217 	add.w	r2, r2, #23
 800b8bc:	7013      	strb	r3, [r2, #0]
 800b8be:	e034      	b.n	800b92a <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b8c0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8c4:	f103 0317 	add.w	r3, r3, #23
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d12d      	bne.n	800b92a <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b8ce:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b8d2:	f103 0310 	add.w	r3, r3, #16
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	330b      	adds	r3, #11
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	f003 0310 	and.w	r3, r3, #16
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d009      	beq.n	800b8f8 <f_open+0x408>
					res = FR_NO_FILE;
 800b8e4:	2304      	movs	r3, #4
 800b8e6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b8ea:	f102 0217 	add.w	r2, r2, #23
 800b8ee:	7013      	strb	r3, [r2, #0]
 800b8f0:	e01b      	b.n	800b92a <f_open+0x43a>
 800b8f2:	bf00      	nop
 800b8f4:	20002624 	.word	0x20002624
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b8f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8fc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b900:	f003 0302 	and.w	r3, r3, #2
 800b904:	2b00      	cmp	r3, #0
 800b906:	d010      	beq.n	800b92a <f_open+0x43a>
 800b908:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b90c:	f103 0310 	add.w	r3, r3, #16
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	330b      	adds	r3, #11
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d005      	beq.n	800b92a <f_open+0x43a>
						res = FR_DENIED;
 800b91e:	2307      	movs	r3, #7
 800b920:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b924:	f102 0217 	add.w	r2, r2, #23
 800b928:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 800b92a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b92e:	f103 0317 	add.w	r3, r3, #23
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d157      	bne.n	800b9e8 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b938:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b93c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b940:	f003 0308 	and.w	r3, r3, #8
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00a      	beq.n	800b95e <f_open+0x46e>
				mode |= FA__WRITTEN;
 800b948:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b94c:	461a      	mov	r2, r3
 800b94e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b952:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b956:	f043 0320 	orr.w	r3, r3, #32
 800b95a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b95e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b962:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800b966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b970:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800b974:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800b978:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 800b97a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b97e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b986:	461a      	mov	r2, r3
 800b988:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b98c:	f103 0310 	add.w	r3, r3, #16
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b994:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b998:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800b99c:	f023 0301 	bic.w	r3, r3, #1
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	bf14      	ite	ne
 800b9a4:	2301      	movne	r3, #1
 800b9a6:	2300      	moveq	r3, #0
 800b9a8:	b2db      	uxtb	r3, r3
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b9b0:	3b18      	subs	r3, #24
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7fd fa8f 	bl	8008ed8 <inc_lock>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b9c0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b9c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c8:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 800b9ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b9ce:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800b9d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d105      	bne.n	800b9e8 <f_open+0x4f8>
 800b9dc:	2302      	movs	r3, #2
 800b9de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800b9e2:	f102 0217 	add.w	r2, r2, #23
 800b9e6:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b9e8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800b9ec:	f103 0317 	add.w	r3, r3, #23
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f040 8088 	bne.w	800bb08 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 800b9f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b9fc:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ba00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba04:	461a      	mov	r2, r3
 800ba06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba0a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 800ba0e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 800ba10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba14:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ba18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800ba20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba24:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800ba28:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ba2c:	f102 0210 	add.w	r2, r2, #16
 800ba30:	6811      	ldr	r1, [r2, #0]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fae3 	bl	8009ffe <ld_clust>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba3e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800ba42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba46:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800ba48:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba4c:	f103 0310 	add.w	r3, r3, #16
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	331f      	adds	r3, #31
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	061a      	lsls	r2, r3, #24
 800ba58:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800ba5c:	f103 0310 	add.w	r3, r3, #16
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	331e      	adds	r3, #30
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	041b      	lsls	r3, r3, #16
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ba6e:	f102 0210 	add.w	r2, r2, #16
 800ba72:	6812      	ldr	r2, [r2, #0]
 800ba74:	321d      	adds	r2, #29
 800ba76:	7812      	ldrb	r2, [r2, #0]
 800ba78:	0212      	lsls	r2, r2, #8
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800ba80:	f102 0210 	add.w	r2, r2, #16
 800ba84:	6812      	ldr	r2, [r2, #0]
 800ba86:	321c      	adds	r2, #28
 800ba88:	7812      	ldrb	r2, [r2, #0]
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ba90:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800ba94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba98:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 800ba9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800ba9e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800baa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa6:	461a      	mov	r2, r3
 800baa8:	2300      	movs	r3, #0
 800baaa:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 800baac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bab0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bab8:	461a      	mov	r2, r3
 800baba:	2300      	movs	r3, #0
 800babc:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800babe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bac2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baca:	461a      	mov	r2, r3
 800bacc:	2300      	movs	r3, #0
 800bace:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800bad0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bad4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 800bad8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800badc:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800bae0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bae4:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 800bae6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800baea:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800baee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baf8:	88da      	ldrh	r2, [r3, #6]
 800bafa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800bafe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800bb02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb06:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 800bb08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800bb0c:	f103 0317 	add.w	r3, r3, #23
 800bb10:	781b      	ldrb	r3, [r3, #0]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 800bb18:	3718      	adds	r7, #24
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop

0800bb20 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b08a      	sub	sp, #40	; 0x28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
 800bb2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	2200      	movs	r2, #0
 800bb36:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f7ff fc53 	bl	800b3e4 <validate>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800bb42:	7dfb      	ldrb	r3, [r7, #23]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <f_write+0x2c>
 800bb48:	7dfb      	ldrb	r3, [r7, #23]
 800bb4a:	e21e      	b.n	800bf8a <f_write+0x46a>
	if (fp->err)							/* Check error */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb52:	79db      	ldrb	r3, [r3, #7]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d004      	beq.n	800bb62 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb5e:	79db      	ldrb	r3, [r3, #7]
 800bb60:	e213      	b.n	800bf8a <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb68:	799b      	ldrb	r3, [r3, #6]
 800bb6a:	f003 0302 	and.w	r3, r3, #2
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d101      	bne.n	800bb76 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 800bb72:	2307      	movs	r3, #7
 800bb74:	e209      	b.n	800bf8a <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb7c:	689a      	ldr	r2, [r3, #8]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	441a      	add	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	f080 81d9 	bcs.w	800bf42 <f_write+0x422>
 800bb90:	2300      	movs	r3, #0
 800bb92:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800bb94:	e1d5      	b.n	800bf42 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bba4:	6812      	ldr	r2, [r2, #0]
 800bba6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbaa:	8952      	ldrh	r2, [r2, #10]
 800bbac:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbb0:	fb01 f202 	mul.w	r2, r1, r2
 800bbb4:	1a9b      	subs	r3, r3, r2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f040 8169 	bne.w	800be8e <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc2:	689b      	ldr	r3, [r3, #8]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbca:	6812      	ldr	r2, [r2, #0]
 800bbcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bbd0:	8952      	ldrh	r2, [r2, #10]
 800bbd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbd6:	b2da      	uxtb	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbe4:	789b      	ldrb	r3, [r3, #2]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	4013      	ands	r3, r2
 800bbec:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800bbee:	7dbb      	ldrb	r3, [r7, #22]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d15f      	bne.n	800bcb4 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d111      	bne.n	800bc24 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d126      	bne.n	800bc5e <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2100      	movs	r1, #0
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fd fea0 	bl	8009960 <create_chain>
 800bc20:	6278      	str	r0, [r7, #36]	; 0x24
 800bc22:	e01c      	b.n	800bc5e <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d009      	beq.n	800bc44 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f7fd ff38 	bl	8009ab0 <clmt_clust>
 800bc40:	6278      	str	r0, [r7, #36]	; 0x24
 800bc42:	e00c      	b.n	800bc5e <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc52:	695b      	ldr	r3, [r3, #20]
 800bc54:	4619      	mov	r1, r3
 800bc56:	4610      	mov	r0, r2
 800bc58:	f7fd fe82 	bl	8009960 <create_chain>
 800bc5c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	f000 8173 	beq.w	800bf4c <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d106      	bne.n	800bc7a <f_write+0x15a>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc72:	2202      	movs	r2, #2
 800bc74:	71da      	strb	r2, [r3, #7]
 800bc76:	2302      	movs	r3, #2
 800bc78:	e187      	b.n	800bf8a <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc80:	d106      	bne.n	800bc90 <f_write+0x170>
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc88:	2201      	movs	r2, #1
 800bc8a:	71da      	strb	r2, [r3, #7]
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e17c      	b.n	800bf8a <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc96:	461a      	mov	r2, r3
 800bc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9a:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d105      	bne.n	800bcb4 <f_write+0x194>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcae:	461a      	mov	r2, r3
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcba:	799b      	ldrb	r3, [r3, #6]
 800bcbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d023      	beq.n	800bd0c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcd0:	7858      	ldrb	r0, [r3, #1]
 800bcd2:	68f9      	ldr	r1, [r7, #12]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcda:	699a      	ldr	r2, [r3, #24]
 800bcdc:	2301      	movs	r3, #1
 800bcde:	f7fc ffad 	bl	8008c3c <disk_write>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d006      	beq.n	800bcf6 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcee:	2201      	movs	r2, #1
 800bcf0:	71da      	strb	r2, [r3, #7]
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e149      	b.n	800bf8a <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcfc:	799b      	ldrb	r3, [r3, #6]
 800bcfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd0a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4610      	mov	r0, r2
 800bd20:	f7fd fb49 	bl	80093b6 <clust2sect>
 800bd24:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d106      	bne.n	800bd3a <f_write+0x21a>
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd32:	2202      	movs	r2, #2
 800bd34:	71da      	strb	r2, [r3, #7]
 800bd36:	2302      	movs	r3, #2
 800bd38:	e127      	b.n	800bf8a <f_write+0x46a>
			sect += csect;
 800bd3a:	7dbb      	ldrb	r3, [r7, #22]
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	4413      	add	r3, r2
 800bd40:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd4e:	895b      	ldrh	r3, [r3, #10]
 800bd50:	461a      	mov	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd58:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d069      	beq.n	800be34 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bd60:	7dba      	ldrb	r2, [r7, #22]
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	4413      	add	r3, r2
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd6c:	6812      	ldr	r2, [r2, #0]
 800bd6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd72:	7892      	ldrb	r2, [r2, #2]
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d90a      	bls.n	800bd8e <f_write+0x26e>
					cc = fp->fs->csize - csect;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd84:	789b      	ldrb	r3, [r3, #2]
 800bd86:	461a      	mov	r2, r3
 800bd88:	7dbb      	ldrb	r3, [r7, #22]
 800bd8a:	1ad3      	subs	r3, r2, r3
 800bd8c:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd9a:	7858      	ldrb	r0, [r3, #1]
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	69b9      	ldr	r1, [r7, #24]
 800bda2:	f7fc ff4b 	bl	8008c3c <disk_write>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d006      	beq.n	800bdba <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	71da      	strb	r2, [r3, #7]
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e0e7      	b.n	800bf8a <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdc0:	699a      	ldr	r2, [r3, #24]
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	1ad3      	subs	r3, r2, r3
 800bdc6:	69fa      	ldr	r2, [r7, #28]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d926      	bls.n	800be1a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800bdcc:	68f8      	ldr	r0, [r7, #12]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdd4:	699a      	ldr	r2, [r3, #24]
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	1ad3      	subs	r3, r2, r3
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bde0:	6812      	ldr	r2, [r2, #0]
 800bde2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bde6:	8952      	ldrh	r2, [r2, #10]
 800bde8:	fb02 f303 	mul.w	r3, r2, r3
 800bdec:	69ba      	ldr	r2, [r7, #24]
 800bdee:	18d1      	adds	r1, r2, r3
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdfc:	895b      	ldrh	r3, [r3, #10]
 800bdfe:	461a      	mov	r2, r3
 800be00:	f7fc ff5a 	bl	8008cb8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be0a:	799b      	ldrb	r3, [r3, #6]
 800be0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be10:	b2da      	uxtb	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be18:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be26:	895b      	ldrh	r3, [r3, #10]
 800be28:	461a      	mov	r2, r3
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	fb02 f303 	mul.w	r3, r2, r3
 800be30:	623b      	str	r3, [r7, #32]
				continue;
 800be32:	e06e      	b.n	800bf12 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be3a:	699b      	ldr	r3, [r3, #24]
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d01f      	beq.n	800be82 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	429a      	cmp	r2, r3
 800be54:	d215      	bcs.n	800be82 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be62:	7858      	ldrb	r0, [r3, #1]
 800be64:	68f9      	ldr	r1, [r7, #12]
 800be66:	2301      	movs	r3, #1
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	f7fc fec7 	bl	8008bfc <disk_read>
 800be6e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800be70:	2b00      	cmp	r3, #0
 800be72:	d006      	beq.n	800be82 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be7a:	2201      	movs	r2, #1
 800be7c:	71da      	strb	r2, [r3, #7]
 800be7e:	2301      	movs	r3, #1
 800be80:	e083      	b.n	800bf8a <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be88:	461a      	mov	r2, r3
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be9a:	895b      	ldrh	r3, [r3, #10]
 800be9c:	4618      	mov	r0, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800beac:	6812      	ldr	r2, [r2, #0]
 800beae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800beb2:	8952      	ldrh	r2, [r2, #10]
 800beb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800beb8:	fb01 f202 	mul.w	r2, r1, r2
 800bebc:	1a9b      	subs	r3, r3, r2
 800bebe:	1ac3      	subs	r3, r0, r3
 800bec0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bec2:	6a3a      	ldr	r2, [r7, #32]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d901      	bls.n	800bece <f_write+0x3ae>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bedc:	6812      	ldr	r2, [r2, #0]
 800bede:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bee2:	8952      	ldrh	r2, [r2, #10]
 800bee4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bee8:	fb01 f202 	mul.w	r2, r1, r2
 800beec:	1a9b      	subs	r3, r3, r2
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	4413      	add	r3, r2
 800bef2:	6a3a      	ldr	r2, [r7, #32]
 800bef4:	69b9      	ldr	r1, [r7, #24]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fc fede 	bl	8008cb8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf02:	799b      	ldrb	r3, [r3, #6]
 800bf04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf10:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	6a3b      	ldr	r3, [r7, #32]
 800bf16:	4413      	add	r3, r2
 800bf18:	61bb      	str	r3, [r7, #24]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf20:	689a      	ldr	r2, [r3, #8]
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	4413      	add	r3, r2
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bf2c:	6093      	str	r3, [r2, #8]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	6a3b      	ldr	r3, [r7, #32]
 800bf34:	441a      	add	r2, r3
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	6a3b      	ldr	r3, [r7, #32]
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f47f ae26 	bne.w	800bb96 <f_write+0x76>
 800bf4a:	e000      	b.n	800bf4e <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bf4c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf54:	689a      	ldr	r2, [r3, #8]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	d907      	bls.n	800bf72 <f_write+0x452>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bf70:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf78:	799b      	ldrb	r3, [r3, #6]
 800bf7a:	f043 0320 	orr.w	r3, r3, #32
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf86:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3728      	adds	r7, #40	; 0x28
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b086      	sub	sp, #24
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f7ff fa22 	bl	800b3e4 <validate>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bfa4:	7dfb      	ldrb	r3, [r7, #23]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	f040 80bc 	bne.w	800c124 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfb2:	799b      	ldrb	r3, [r3, #6]
 800bfb4:	f003 0320 	and.w	r3, r3, #32
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f000 80b3 	beq.w	800c124 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc4:	799b      	ldrb	r3, [r3, #6]
 800bfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d01e      	beq.n	800c00c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfda:	7858      	ldrb	r0, [r3, #1]
 800bfdc:	6879      	ldr	r1, [r7, #4]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfe4:	699a      	ldr	r2, [r3, #24]
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	f7fc fe28 	bl	8008c3c <disk_write>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d001      	beq.n	800bff6 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800bff2:	2301      	movs	r3, #1
 800bff4:	e097      	b.n	800c126 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bffc:	799b      	ldrb	r3, [r3, #6]
 800bffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c002:	b2da      	uxtb	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c00a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	4619      	mov	r1, r3
 800c01e:	4610      	mov	r0, r2
 800c020:	f7fd f8d8 	bl	80091d4 <move_window>
 800c024:	4603      	mov	r3, r0
 800c026:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800c028:	7dfb      	ldrb	r3, [r7, #23]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d17a      	bne.n	800c124 <f_sync+0x192>
				dir = fp->dir_ptr;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	330b      	adds	r3, #11
 800c03c:	781a      	ldrb	r2, [r3, #0]
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	330b      	adds	r3, #11
 800c042:	f042 0220 	orr.w	r2, r2, #32
 800c046:	b2d2      	uxtb	r2, r2
 800c048:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	331c      	adds	r3, #28
 800c056:	b2d2      	uxtb	r2, r2
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	b29b      	uxth	r3, r3
 800c064:	0a1b      	lsrs	r3, r3, #8
 800c066:	b29a      	uxth	r2, r3
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	331d      	adds	r3, #29
 800c06c:	b2d2      	uxtb	r2, r2
 800c06e:	701a      	strb	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	0c1a      	lsrs	r2, r3, #16
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	331e      	adds	r3, #30
 800c07e:	b2d2      	uxtb	r2, r2
 800c080:	701a      	strb	r2, [r3, #0]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	0e1a      	lsrs	r2, r3, #24
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	331f      	adds	r3, #31
 800c090:	b2d2      	uxtb	r2, r2
 800c092:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c09a:	691b      	ldr	r3, [r3, #16]
 800c09c:	4619      	mov	r1, r3
 800c09e:	6938      	ldr	r0, [r7, #16]
 800c0a0:	f7fd ffdc 	bl	800a05c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800c0a4:	f7fc fd04 	bl	8008ab0 <get_fattime>
 800c0a8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	3316      	adds	r3, #22
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	b2d2      	uxtb	r2, r2
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	0a1b      	lsrs	r3, r3, #8
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	3317      	adds	r3, #23
 800c0c0:	b2d2      	uxtb	r2, r2
 800c0c2:	701a      	strb	r2, [r3, #0]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	0c1a      	lsrs	r2, r3, #16
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	3318      	adds	r3, #24
 800c0cc:	b2d2      	uxtb	r2, r2
 800c0ce:	701a      	strb	r2, [r3, #0]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	0e1a      	lsrs	r2, r3, #24
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	3319      	adds	r3, #25
 800c0d8:	b2d2      	uxtb	r2, r2
 800c0da:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	3312      	adds	r3, #18
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	701a      	strb	r2, [r3, #0]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	3313      	adds	r3, #19
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0f2:	799b      	ldrb	r3, [r3, #6]
 800c0f4:	f023 0320 	bic.w	r3, r3, #32
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c100:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c10e:	2201      	movs	r2, #1
 800c110:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fd f88c 	bl	8009238 <sync_fs>
 800c120:	4603      	mov	r3, r0
 800c122:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800c124:	7dfb      	ldrb	r3, [r7, #23]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7ff ff2b 	bl	800bf92 <f_sync>
 800c13c:	4603      	mov	r3, r0
 800c13e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d119      	bne.n	800c17a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7ff f94c 	bl	800b3e4 <validate>
 800c14c:	4603      	mov	r3, r0
 800c14e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d111      	bne.n	800c17a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c15e:	4618      	mov	r0, r3
 800c160:	f7fc ff78 	bl	8009054 <dec_lock>
 800c164:	4603      	mov	r3, r0
 800c166:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c168:	7bfb      	ldrb	r3, [r7, #15]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d105      	bne.n	800c17a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c174:	461a      	mov	r2, r3
 800c176:	2300      	movs	r3, #0
 800c178:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b090      	sub	sp, #64	; 0x40
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f7ff f928 	bl	800b3e4 <validate>
 800c194:	4603      	mov	r3, r0
 800c196:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800c19a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d002      	beq.n	800c1a8 <f_lseek+0x24>
 800c1a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c1a6:	e2da      	b.n	800c75e <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ae:	79db      	ldrb	r3, [r3, #7]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d004      	beq.n	800c1be <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1ba:	79db      	ldrb	r3, [r3, #7]
 800c1bc:	e2cf      	b.n	800c75e <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f000 8124 	beq.w	800c414 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d2:	d16c      	bne.n	800c2ae <f_lseek+0x12a>
			tbl = fp->cltbl;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1dc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e0:	1d1a      	adds	r2, r3, #4
 800c1e2:	627a      	str	r2, [r7, #36]	; 0x24
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	617b      	str	r3, [r7, #20]
 800c1e8:	2302      	movs	r3, #2
 800c1ea:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d046      	beq.n	800c28a <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	613b      	str	r3, [r7, #16]
 800c200:	2300      	movs	r3, #0
 800c202:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c206:	3302      	adds	r3, #2
 800c208:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	60fb      	str	r3, [r7, #12]
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	3301      	adds	r3, #1
 800c212:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fd f8ee 	bl	8009400 <get_fat>
 800c224:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 800c226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d806      	bhi.n	800c23a <f_lseek+0xb6>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c232:	2202      	movs	r2, #2
 800c234:	71da      	strb	r2, [r3, #7]
 800c236:	2302      	movs	r3, #2
 800c238:	e291      	b.n	800c75e <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c240:	d106      	bne.n	800c250 <f_lseek+0xcc>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c248:	2201      	movs	r2, #1
 800c24a:	71da      	strb	r2, [r3, #7]
 800c24c:	2301      	movs	r3, #1
 800c24e:	e286      	b.n	800c75e <f_lseek+0x5da>
					} while (cl == pcl + 1);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	3301      	adds	r3, #1
 800c254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c256:	429a      	cmp	r2, r3
 800c258:	d0d7      	beq.n	800c20a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c25a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d809      	bhi.n	800c276 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 800c262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c264:	1d1a      	adds	r2, r3, #4
 800c266:	627a      	str	r2, [r7, #36]	; 0x24
 800c268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c26a:	601a      	str	r2, [r3, #0]
 800c26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26e:	1d1a      	adds	r2, r3, #4
 800c270:	627a      	str	r2, [r7, #36]	; 0x24
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c286:	429a      	cmp	r2, r3
 800c288:	d3b8      	bcc.n	800c1fc <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c294:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 800c296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d803      	bhi.n	800c2a6 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 800c29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	e259      	b.n	800c75a <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c2a6:	2311      	movs	r3, #17
 800c2a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c2ac:	e255      	b.n	800c75a <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d904      	bls.n	800c2c6 <f_lseek+0x142>
				ofs = fp->fsize;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2c2:	68db      	ldr	r3, [r3, #12]
 800c2c4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	6093      	str	r3, [r2, #8]
			if (ofs) {
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f000 8240 	beq.w	800c75a <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	4619      	mov	r1, r3
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7fd fbe5 	bl	8009ab0 <clmt_clust>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2ee:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c2fe:	695b      	ldr	r3, [r3, #20]
 800c300:	4619      	mov	r1, r3
 800c302:	4610      	mov	r0, r2
 800c304:	f7fd f857 	bl	80093b6 <clust2sect>
 800c308:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d106      	bne.n	800c31e <f_lseek+0x19a>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c316:	2202      	movs	r2, #2
 800c318:	71da      	strb	r2, [r3, #7]
 800c31a:	2302      	movs	r3, #2
 800c31c:	e21f      	b.n	800c75e <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	3b01      	subs	r3, #1
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c328:	6812      	ldr	r2, [r2, #0]
 800c32a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c32e:	8952      	ldrh	r2, [r2, #10]
 800c330:	fbb3 f3f2 	udiv	r3, r3, r2
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c33a:	6812      	ldr	r2, [r2, #0]
 800c33c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c340:	7892      	ldrb	r2, [r2, #2]
 800c342:	3a01      	subs	r2, #1
 800c344:	4013      	ands	r3, r2
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	4413      	add	r3, r2
 800c34a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c35a:	6812      	ldr	r2, [r2, #0]
 800c35c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c360:	8952      	ldrh	r2, [r2, #10]
 800c362:	fbb3 f1f2 	udiv	r1, r3, r2
 800c366:	fb01 f202 	mul.w	r2, r1, r2
 800c36a:	1a9b      	subs	r3, r3, r2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	f000 81f4 	beq.w	800c75a <f_lseek+0x5d6>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	f000 81ec 	beq.w	800c75a <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c388:	799b      	ldrb	r3, [r3, #6]
 800c38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d023      	beq.n	800c3da <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c39e:	7858      	ldrb	r0, [r3, #1]
 800c3a0:	6879      	ldr	r1, [r7, #4]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3a8:	699a      	ldr	r2, [r3, #24]
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	f7fc fc46 	bl	8008c3c <disk_write>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d006      	beq.n	800c3c4 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3bc:	2201      	movs	r2, #1
 800c3be:	71da      	strb	r2, [r3, #7]
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e1cc      	b.n	800c75e <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ca:	799b      	ldrb	r3, [r3, #6]
 800c3cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d8:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3e6:	7858      	ldrb	r0, [r3, #1]
 800c3e8:	6879      	ldr	r1, [r7, #4]
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	69ba      	ldr	r2, [r7, #24]
 800c3ee:	f7fc fc05 	bl	8008bfc <disk_read>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d006      	beq.n	800c406 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3fe:	2201      	movs	r2, #1
 800c400:	71da      	strb	r2, [r3, #7]
 800c402:	2301      	movs	r3, #1
 800c404:	e1ab      	b.n	800c75e <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c40c:	461a      	mov	r2, r3
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	6193      	str	r3, [r2, #24]
 800c412:	e1a2      	b.n	800c75a <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d90c      	bls.n	800c43c <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c428:	799b      	ldrb	r3, [r3, #6]
 800c42a:	f003 0302 	and.w	r3, r3, #2
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d104      	bne.n	800c43c <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c446:	2300      	movs	r3, #0
 800c448:	637b      	str	r3, [r7, #52]	; 0x34
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c450:	461a      	mov	r2, r3
 800c452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c454:	6093      	str	r3, [r2, #8]
		if (ofs) {
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 8100 	beq.w	800c65e <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c46a:	789b      	ldrb	r3, [r3, #2]
 800c46c:	461a      	mov	r2, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c47a:	895b      	ldrh	r3, [r3, #10]
 800c47c:	fb02 f303 	mul.w	r3, r2, r3
 800c480:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c482:	6a3b      	ldr	r3, [r7, #32]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d021      	beq.n	800c4cc <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	1e5a      	subs	r2, r3, #1
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	1e59      	subs	r1, r3, #1
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d315      	bcc.n	800c4cc <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800c4a0:	6a3b      	ldr	r3, [r7, #32]
 800c4a2:	1e5a      	subs	r2, r3, #1
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	425b      	negs	r3, r3
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c4b0:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	683a      	ldr	r2, [r7, #0]
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4c6:	695b      	ldr	r3, [r3, #20]
 800c4c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4ca:	e031      	b.n	800c530 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d123      	bne.n	800c524 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fd fa3a 	bl	8009960 <create_chain>
 800c4ec:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d106      	bne.n	800c502 <f_lseek+0x37e>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4fa:	2202      	movs	r2, #2
 800c4fc:	71da      	strb	r2, [r3, #7]
 800c4fe:	2302      	movs	r3, #2
 800c500:	e12d      	b.n	800c75e <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c508:	d106      	bne.n	800c518 <f_lseek+0x394>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c510:	2201      	movs	r2, #1
 800c512:	71da      	strb	r2, [r3, #7]
 800c514:	2301      	movs	r3, #1
 800c516:	e122      	b.n	800c75e <f_lseek+0x5da>
					fp->sclust = clst;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c51e:	461a      	mov	r2, r3
 800c520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c522:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c52a:	461a      	mov	r2, r3
 800c52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52e:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 800c530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c532:	2b00      	cmp	r3, #0
 800c534:	f000 8093 	beq.w	800c65e <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 800c538:	e052      	b.n	800c5e0 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c540:	799b      	ldrb	r3, [r3, #6]
 800c542:	f003 0302 	and.w	r3, r3, #2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00e      	beq.n	800c568 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c554:	4618      	mov	r0, r3
 800c556:	f7fd fa03 	bl	8009960 <create_chain>
 800c55a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800c55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10b      	bne.n	800c57a <f_lseek+0x3f6>
							ofs = bcs; break;
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	603b      	str	r3, [r7, #0]
 800c566:	e03f      	b.n	800c5e8 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c572:	4618      	mov	r0, r3
 800c574:	f7fc ff44 	bl	8009400 <get_fat>
 800c578:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800c57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c580:	d106      	bne.n	800c590 <f_lseek+0x40c>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c588:	2201      	movs	r2, #1
 800c58a:	71da      	strb	r2, [r3, #7]
 800c58c:	2301      	movs	r3, #1
 800c58e:	e0e6      	b.n	800c75e <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	2b01      	cmp	r3, #1
 800c594:	d909      	bls.n	800c5aa <f_lseek+0x426>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5a2:	695b      	ldr	r3, [r3, #20]
 800c5a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d306      	bcc.n	800c5b8 <f_lseek+0x434>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	71da      	strb	r2, [r3, #7]
 800c5b4:	2302      	movs	r3, #2
 800c5b6:	e0d2      	b.n	800c75e <f_lseek+0x5da>
					fp->clust = clst;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5be:	461a      	mov	r2, r3
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ca:	689a      	ldr	r2, [r3, #8]
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c5d6:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 800c5d8:	683a      	ldr	r2, [r7, #0]
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	69fb      	ldr	r3, [r7, #28]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d8a8      	bhi.n	800c53a <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5ee:	689a      	ldr	r2, [r3, #8]
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c5fa:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c608:	895b      	ldrh	r3, [r3, #10]
 800c60a:	461a      	mov	r2, r3
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c612:	fb01 f202 	mul.w	r2, r1, r2
 800c616:	1a9b      	subs	r3, r3, r2
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d020      	beq.n	800c65e <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c626:	4618      	mov	r0, r3
 800c628:	f7fc fec5 	bl	80093b6 <clust2sect>
 800c62c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 800c62e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c630:	2b00      	cmp	r3, #0
 800c632:	d106      	bne.n	800c642 <f_lseek+0x4be>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c63a:	2202      	movs	r2, #2
 800c63c:	71da      	strb	r2, [r3, #7]
 800c63e:	2302      	movs	r3, #2
 800c640:	e08d      	b.n	800c75e <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c64e:	895b      	ldrh	r3, [r3, #10]
 800c650:	461a      	mov	r2, r3
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	fbb3 f3f2 	udiv	r3, r3, r2
 800c658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c65a:	4413      	add	r3, r2
 800c65c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c66c:	6812      	ldr	r2, [r2, #0]
 800c66e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c672:	8952      	ldrh	r2, [r2, #10]
 800c674:	fbb3 f1f2 	udiv	r1, r3, r2
 800c678:	fb01 f202 	mul.w	r2, r1, r2
 800c67c:	1a9b      	subs	r3, r3, r2
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d04e      	beq.n	800c720 <f_lseek+0x59c>
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c688:	699b      	ldr	r3, [r3, #24]
 800c68a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d047      	beq.n	800c720 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c696:	799b      	ldrb	r3, [r3, #6]
 800c698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d023      	beq.n	800c6e8 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ac:	7858      	ldrb	r0, [r3, #1]
 800c6ae:	6879      	ldr	r1, [r7, #4]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6b6:	699a      	ldr	r2, [r3, #24]
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	f7fc fabf 	bl	8008c3c <disk_write>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d006      	beq.n	800c6d2 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	71da      	strb	r2, [r3, #7]
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e045      	b.n	800c75e <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d8:	799b      	ldrb	r3, [r3, #6]
 800c6da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6de:	b2da      	uxtb	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6e6:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6f4:	7858      	ldrb	r0, [r3, #1]
 800c6f6:	6879      	ldr	r1, [r7, #4]
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6fc:	f7fc fa7e 	bl	8008bfc <disk_read>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d006      	beq.n	800c714 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c70c:	2201      	movs	r2, #1
 800c70e:	71da      	strb	r2, [r3, #7]
 800c710:	2301      	movs	r3, #1
 800c712:	e024      	b.n	800c75e <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c71a:	461a      	mov	r2, r3
 800c71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c71e:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c726:	689a      	ldr	r2, [r3, #8]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	429a      	cmp	r2, r3
 800c732:	d912      	bls.n	800c75a <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c742:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c74a:	799b      	ldrb	r3, [r3, #6]
 800c74c:	f043 0320 	orr.w	r3, r3, #32
 800c750:	b2da      	uxtb	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c758:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 800c75a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3740      	adds	r7, #64	; 0x40
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}
	...

0800c768 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c768:	b480      	push	{r7}
 800c76a:	b087      	sub	sp, #28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	4613      	mov	r3, r2
 800c774:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c776:	2301      	movs	r3, #1
 800c778:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c77a:	2300      	movs	r3, #0
 800c77c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c77e:	4b1f      	ldr	r3, [pc, #124]	; (800c7fc <FATFS_LinkDriverEx+0x94>)
 800c780:	7a5b      	ldrb	r3, [r3, #9]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	2b01      	cmp	r3, #1
 800c786:	d831      	bhi.n	800c7ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c788:	4b1c      	ldr	r3, [pc, #112]	; (800c7fc <FATFS_LinkDriverEx+0x94>)
 800c78a:	7a5b      	ldrb	r3, [r3, #9]
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	461a      	mov	r2, r3
 800c790:	4b1a      	ldr	r3, [pc, #104]	; (800c7fc <FATFS_LinkDriverEx+0x94>)
 800c792:	2100      	movs	r1, #0
 800c794:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c796:	4b19      	ldr	r3, [pc, #100]	; (800c7fc <FATFS_LinkDriverEx+0x94>)
 800c798:	7a5b      	ldrb	r3, [r3, #9]
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	4a17      	ldr	r2, [pc, #92]	; (800c7fc <FATFS_LinkDriverEx+0x94>)
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	4413      	add	r3, r2
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c7a6:	4b15      	ldr	r3, [pc, #84]	; (800c7fc <FATFS_LinkDriverEx+0x94>)
 800c7a8:	7a5b      	ldrb	r3, [r3, #9]
 800c7aa:	b2db      	uxtb	r3, r3
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	4b13      	ldr	r3, [pc, #76]	; (800c7fc <FATFS_LinkDriverEx+0x94>)
 800c7b0:	4413      	add	r3, r2
 800c7b2:	79fa      	ldrb	r2, [r7, #7]
 800c7b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c7b6:	4b11      	ldr	r3, [pc, #68]	; (800c7fc <FATFS_LinkDriverEx+0x94>)
 800c7b8:	7a5b      	ldrb	r3, [r3, #9]
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	1c5a      	adds	r2, r3, #1
 800c7be:	b2d1      	uxtb	r1, r2
 800c7c0:	4a0e      	ldr	r2, [pc, #56]	; (800c7fc <FATFS_LinkDriverEx+0x94>)
 800c7c2:	7251      	strb	r1, [r2, #9]
 800c7c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c7c6:	7dbb      	ldrb	r3, [r7, #22]
 800c7c8:	3330      	adds	r3, #48	; 0x30
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	223a      	movs	r2, #58	; 0x3a
 800c7d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	3302      	adds	r3, #2
 800c7dc:	222f      	movs	r2, #47	; 0x2f
 800c7de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	3303      	adds	r3, #3
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	371c      	adds	r7, #28
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	20002824 	.word	0x20002824

0800c800 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c80a:	2200      	movs	r2, #0
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7ff ffaa 	bl	800c768 <FATFS_LinkDriverEx>
 800c814:	4603      	mov	r3, r0
}
 800c816:	4618      	mov	r0, r3
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
	...

0800c820 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	4603      	mov	r3, r0
 800c828:	6039      	str	r1, [r7, #0]
 800c82a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c82c:	88fb      	ldrh	r3, [r7, #6]
 800c82e:	2b7f      	cmp	r3, #127	; 0x7f
 800c830:	d802      	bhi.n	800c838 <ff_convert+0x18>
		c = chr;
 800c832:	88fb      	ldrh	r3, [r7, #6]
 800c834:	81fb      	strh	r3, [r7, #14]
 800c836:	e025      	b.n	800c884 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00b      	beq.n	800c856 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c83e:	88fb      	ldrh	r3, [r7, #6]
 800c840:	2bff      	cmp	r3, #255	; 0xff
 800c842:	d805      	bhi.n	800c850 <ff_convert+0x30>
 800c844:	88fb      	ldrh	r3, [r7, #6]
 800c846:	3b80      	subs	r3, #128	; 0x80
 800c848:	4a12      	ldr	r2, [pc, #72]	; (800c894 <ff_convert+0x74>)
 800c84a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c84e:	e000      	b.n	800c852 <ff_convert+0x32>
 800c850:	2300      	movs	r3, #0
 800c852:	81fb      	strh	r3, [r7, #14]
 800c854:	e016      	b.n	800c884 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 800c856:	2300      	movs	r3, #0
 800c858:	81fb      	strh	r3, [r7, #14]
 800c85a:	e009      	b.n	800c870 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c85c:	89fb      	ldrh	r3, [r7, #14]
 800c85e:	4a0d      	ldr	r2, [pc, #52]	; (800c894 <ff_convert+0x74>)
 800c860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c864:	88fa      	ldrh	r2, [r7, #6]
 800c866:	429a      	cmp	r2, r3
 800c868:	d006      	beq.n	800c878 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c86a:	89fb      	ldrh	r3, [r7, #14]
 800c86c:	3301      	adds	r3, #1
 800c86e:	81fb      	strh	r3, [r7, #14]
 800c870:	89fb      	ldrh	r3, [r7, #14]
 800c872:	2b7f      	cmp	r3, #127	; 0x7f
 800c874:	d9f2      	bls.n	800c85c <ff_convert+0x3c>
 800c876:	e000      	b.n	800c87a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c878:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c87a:	89fb      	ldrh	r3, [r7, #14]
 800c87c:	3380      	adds	r3, #128	; 0x80
 800c87e:	b29b      	uxth	r3, r3
 800c880:	b2db      	uxtb	r3, r3
 800c882:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c884:	89fb      	ldrh	r3, [r7, #14]
}
 800c886:	4618      	mov	r0, r3
 800c888:	3714      	adds	r7, #20
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	08011c04 	.word	0x08011c04

0800c898 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	4603      	mov	r3, r0
 800c8a0:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	60fb      	str	r3, [r7, #12]
 800c8a6:	e002      	b.n	800c8ae <ff_wtoupper+0x16>
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	60fb      	str	r3, [r7, #12]
 800c8ae:	4a0f      	ldr	r2, [pc, #60]	; (800c8ec <ff_wtoupper+0x54>)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d006      	beq.n	800c8c8 <ff_wtoupper+0x30>
 800c8ba:	4a0c      	ldr	r2, [pc, #48]	; (800c8ec <ff_wtoupper+0x54>)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8c2:	88fa      	ldrh	r2, [r7, #6]
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d1ef      	bne.n	800c8a8 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 800c8c8:	4a08      	ldr	r2, [pc, #32]	; (800c8ec <ff_wtoupper+0x54>)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d004      	beq.n	800c8de <ff_wtoupper+0x46>
 800c8d4:	4a06      	ldr	r2, [pc, #24]	; (800c8f0 <ff_wtoupper+0x58>)
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8dc:	e000      	b.n	800c8e0 <ff_wtoupper+0x48>
 800c8de:	88fb      	ldrh	r3, [r7, #6]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3714      	adds	r7, #20
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr
 800c8ec:	08011d04 	.word	0x08011d04
 800c8f0:	08011ee4 	.word	0x08011ee4

0800c8f4 <__cvt>:
 800c8f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f8:	ec55 4b10 	vmov	r4, r5, d0
 800c8fc:	2d00      	cmp	r5, #0
 800c8fe:	460e      	mov	r6, r1
 800c900:	4619      	mov	r1, r3
 800c902:	462b      	mov	r3, r5
 800c904:	bfbb      	ittet	lt
 800c906:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c90a:	461d      	movlt	r5, r3
 800c90c:	2300      	movge	r3, #0
 800c90e:	232d      	movlt	r3, #45	; 0x2d
 800c910:	700b      	strb	r3, [r1, #0]
 800c912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c914:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c918:	4691      	mov	r9, r2
 800c91a:	f023 0820 	bic.w	r8, r3, #32
 800c91e:	bfbc      	itt	lt
 800c920:	4622      	movlt	r2, r4
 800c922:	4614      	movlt	r4, r2
 800c924:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c928:	d005      	beq.n	800c936 <__cvt+0x42>
 800c92a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c92e:	d100      	bne.n	800c932 <__cvt+0x3e>
 800c930:	3601      	adds	r6, #1
 800c932:	2102      	movs	r1, #2
 800c934:	e000      	b.n	800c938 <__cvt+0x44>
 800c936:	2103      	movs	r1, #3
 800c938:	ab03      	add	r3, sp, #12
 800c93a:	9301      	str	r3, [sp, #4]
 800c93c:	ab02      	add	r3, sp, #8
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	ec45 4b10 	vmov	d0, r4, r5
 800c944:	4653      	mov	r3, sl
 800c946:	4632      	mov	r2, r6
 800c948:	f001 f96e 	bl	800dc28 <_dtoa_r>
 800c94c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c950:	4607      	mov	r7, r0
 800c952:	d102      	bne.n	800c95a <__cvt+0x66>
 800c954:	f019 0f01 	tst.w	r9, #1
 800c958:	d022      	beq.n	800c9a0 <__cvt+0xac>
 800c95a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c95e:	eb07 0906 	add.w	r9, r7, r6
 800c962:	d110      	bne.n	800c986 <__cvt+0x92>
 800c964:	783b      	ldrb	r3, [r7, #0]
 800c966:	2b30      	cmp	r3, #48	; 0x30
 800c968:	d10a      	bne.n	800c980 <__cvt+0x8c>
 800c96a:	2200      	movs	r2, #0
 800c96c:	2300      	movs	r3, #0
 800c96e:	4620      	mov	r0, r4
 800c970:	4629      	mov	r1, r5
 800c972:	f7f4 f8a9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c976:	b918      	cbnz	r0, 800c980 <__cvt+0x8c>
 800c978:	f1c6 0601 	rsb	r6, r6, #1
 800c97c:	f8ca 6000 	str.w	r6, [sl]
 800c980:	f8da 3000 	ldr.w	r3, [sl]
 800c984:	4499      	add	r9, r3
 800c986:	2200      	movs	r2, #0
 800c988:	2300      	movs	r3, #0
 800c98a:	4620      	mov	r0, r4
 800c98c:	4629      	mov	r1, r5
 800c98e:	f7f4 f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c992:	b108      	cbz	r0, 800c998 <__cvt+0xa4>
 800c994:	f8cd 900c 	str.w	r9, [sp, #12]
 800c998:	2230      	movs	r2, #48	; 0x30
 800c99a:	9b03      	ldr	r3, [sp, #12]
 800c99c:	454b      	cmp	r3, r9
 800c99e:	d307      	bcc.n	800c9b0 <__cvt+0xbc>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9a4:	1bdb      	subs	r3, r3, r7
 800c9a6:	4638      	mov	r0, r7
 800c9a8:	6013      	str	r3, [r2, #0]
 800c9aa:	b004      	add	sp, #16
 800c9ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b0:	1c59      	adds	r1, r3, #1
 800c9b2:	9103      	str	r1, [sp, #12]
 800c9b4:	701a      	strb	r2, [r3, #0]
 800c9b6:	e7f0      	b.n	800c99a <__cvt+0xa6>

0800c9b8 <__exponent>:
 800c9b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2900      	cmp	r1, #0
 800c9be:	bfb8      	it	lt
 800c9c0:	4249      	neglt	r1, r1
 800c9c2:	f803 2b02 	strb.w	r2, [r3], #2
 800c9c6:	bfb4      	ite	lt
 800c9c8:	222d      	movlt	r2, #45	; 0x2d
 800c9ca:	222b      	movge	r2, #43	; 0x2b
 800c9cc:	2909      	cmp	r1, #9
 800c9ce:	7042      	strb	r2, [r0, #1]
 800c9d0:	dd2a      	ble.n	800ca28 <__exponent+0x70>
 800c9d2:	f10d 0207 	add.w	r2, sp, #7
 800c9d6:	4617      	mov	r7, r2
 800c9d8:	260a      	movs	r6, #10
 800c9da:	4694      	mov	ip, r2
 800c9dc:	fb91 f5f6 	sdiv	r5, r1, r6
 800c9e0:	fb06 1415 	mls	r4, r6, r5, r1
 800c9e4:	3430      	adds	r4, #48	; 0x30
 800c9e6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	2c63      	cmp	r4, #99	; 0x63
 800c9ee:	f102 32ff 	add.w	r2, r2, #4294967295
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	dcf1      	bgt.n	800c9da <__exponent+0x22>
 800c9f6:	3130      	adds	r1, #48	; 0x30
 800c9f8:	f1ac 0402 	sub.w	r4, ip, #2
 800c9fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ca00:	1c41      	adds	r1, r0, #1
 800ca02:	4622      	mov	r2, r4
 800ca04:	42ba      	cmp	r2, r7
 800ca06:	d30a      	bcc.n	800ca1e <__exponent+0x66>
 800ca08:	f10d 0209 	add.w	r2, sp, #9
 800ca0c:	eba2 020c 	sub.w	r2, r2, ip
 800ca10:	42bc      	cmp	r4, r7
 800ca12:	bf88      	it	hi
 800ca14:	2200      	movhi	r2, #0
 800ca16:	4413      	add	r3, r2
 800ca18:	1a18      	subs	r0, r3, r0
 800ca1a:	b003      	add	sp, #12
 800ca1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca1e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ca22:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ca26:	e7ed      	b.n	800ca04 <__exponent+0x4c>
 800ca28:	2330      	movs	r3, #48	; 0x30
 800ca2a:	3130      	adds	r1, #48	; 0x30
 800ca2c:	7083      	strb	r3, [r0, #2]
 800ca2e:	70c1      	strb	r1, [r0, #3]
 800ca30:	1d03      	adds	r3, r0, #4
 800ca32:	e7f1      	b.n	800ca18 <__exponent+0x60>

0800ca34 <_printf_float>:
 800ca34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca38:	ed2d 8b02 	vpush	{d8}
 800ca3c:	b08d      	sub	sp, #52	; 0x34
 800ca3e:	460c      	mov	r4, r1
 800ca40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca44:	4616      	mov	r6, r2
 800ca46:	461f      	mov	r7, r3
 800ca48:	4605      	mov	r5, r0
 800ca4a:	f000 ffe7 	bl	800da1c <_localeconv_r>
 800ca4e:	f8d0 a000 	ldr.w	sl, [r0]
 800ca52:	4650      	mov	r0, sl
 800ca54:	f7f3 fc0c 	bl	8000270 <strlen>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	9305      	str	r3, [sp, #20]
 800ca60:	f8d8 3000 	ldr.w	r3, [r8]
 800ca64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca68:	3307      	adds	r3, #7
 800ca6a:	f023 0307 	bic.w	r3, r3, #7
 800ca6e:	f103 0208 	add.w	r2, r3, #8
 800ca72:	f8c8 2000 	str.w	r2, [r8]
 800ca76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca7e:	9307      	str	r3, [sp, #28]
 800ca80:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca84:	ee08 0a10 	vmov	s16, r0
 800ca88:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ca8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca90:	4b9e      	ldr	r3, [pc, #632]	; (800cd0c <_printf_float+0x2d8>)
 800ca92:	f04f 32ff 	mov.w	r2, #4294967295
 800ca96:	f7f4 f849 	bl	8000b2c <__aeabi_dcmpun>
 800ca9a:	bb88      	cbnz	r0, 800cb00 <_printf_float+0xcc>
 800ca9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caa0:	4b9a      	ldr	r3, [pc, #616]	; (800cd0c <_printf_float+0x2d8>)
 800caa2:	f04f 32ff 	mov.w	r2, #4294967295
 800caa6:	f7f4 f823 	bl	8000af0 <__aeabi_dcmple>
 800caaa:	bb48      	cbnz	r0, 800cb00 <_printf_float+0xcc>
 800caac:	2200      	movs	r2, #0
 800caae:	2300      	movs	r3, #0
 800cab0:	4640      	mov	r0, r8
 800cab2:	4649      	mov	r1, r9
 800cab4:	f7f4 f812 	bl	8000adc <__aeabi_dcmplt>
 800cab8:	b110      	cbz	r0, 800cac0 <_printf_float+0x8c>
 800caba:	232d      	movs	r3, #45	; 0x2d
 800cabc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cac0:	4a93      	ldr	r2, [pc, #588]	; (800cd10 <_printf_float+0x2dc>)
 800cac2:	4b94      	ldr	r3, [pc, #592]	; (800cd14 <_printf_float+0x2e0>)
 800cac4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cac8:	bf94      	ite	ls
 800caca:	4690      	movls	r8, r2
 800cacc:	4698      	movhi	r8, r3
 800cace:	2303      	movs	r3, #3
 800cad0:	6123      	str	r3, [r4, #16]
 800cad2:	9b05      	ldr	r3, [sp, #20]
 800cad4:	f023 0304 	bic.w	r3, r3, #4
 800cad8:	6023      	str	r3, [r4, #0]
 800cada:	f04f 0900 	mov.w	r9, #0
 800cade:	9700      	str	r7, [sp, #0]
 800cae0:	4633      	mov	r3, r6
 800cae2:	aa0b      	add	r2, sp, #44	; 0x2c
 800cae4:	4621      	mov	r1, r4
 800cae6:	4628      	mov	r0, r5
 800cae8:	f000 f9da 	bl	800cea0 <_printf_common>
 800caec:	3001      	adds	r0, #1
 800caee:	f040 8090 	bne.w	800cc12 <_printf_float+0x1de>
 800caf2:	f04f 30ff 	mov.w	r0, #4294967295
 800caf6:	b00d      	add	sp, #52	; 0x34
 800caf8:	ecbd 8b02 	vpop	{d8}
 800cafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb00:	4642      	mov	r2, r8
 800cb02:	464b      	mov	r3, r9
 800cb04:	4640      	mov	r0, r8
 800cb06:	4649      	mov	r1, r9
 800cb08:	f7f4 f810 	bl	8000b2c <__aeabi_dcmpun>
 800cb0c:	b140      	cbz	r0, 800cb20 <_printf_float+0xec>
 800cb0e:	464b      	mov	r3, r9
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	bfbc      	itt	lt
 800cb14:	232d      	movlt	r3, #45	; 0x2d
 800cb16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb1a:	4a7f      	ldr	r2, [pc, #508]	; (800cd18 <_printf_float+0x2e4>)
 800cb1c:	4b7f      	ldr	r3, [pc, #508]	; (800cd1c <_printf_float+0x2e8>)
 800cb1e:	e7d1      	b.n	800cac4 <_printf_float+0x90>
 800cb20:	6863      	ldr	r3, [r4, #4]
 800cb22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cb26:	9206      	str	r2, [sp, #24]
 800cb28:	1c5a      	adds	r2, r3, #1
 800cb2a:	d13f      	bne.n	800cbac <_printf_float+0x178>
 800cb2c:	2306      	movs	r3, #6
 800cb2e:	6063      	str	r3, [r4, #4]
 800cb30:	9b05      	ldr	r3, [sp, #20]
 800cb32:	6861      	ldr	r1, [r4, #4]
 800cb34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb38:	2300      	movs	r3, #0
 800cb3a:	9303      	str	r3, [sp, #12]
 800cb3c:	ab0a      	add	r3, sp, #40	; 0x28
 800cb3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb42:	ab09      	add	r3, sp, #36	; 0x24
 800cb44:	ec49 8b10 	vmov	d0, r8, r9
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	6022      	str	r2, [r4, #0]
 800cb4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb50:	4628      	mov	r0, r5
 800cb52:	f7ff fecf 	bl	800c8f4 <__cvt>
 800cb56:	9b06      	ldr	r3, [sp, #24]
 800cb58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb5a:	2b47      	cmp	r3, #71	; 0x47
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	d108      	bne.n	800cb72 <_printf_float+0x13e>
 800cb60:	1cc8      	adds	r0, r1, #3
 800cb62:	db02      	blt.n	800cb6a <_printf_float+0x136>
 800cb64:	6863      	ldr	r3, [r4, #4]
 800cb66:	4299      	cmp	r1, r3
 800cb68:	dd41      	ble.n	800cbee <_printf_float+0x1ba>
 800cb6a:	f1ab 0302 	sub.w	r3, fp, #2
 800cb6e:	fa5f fb83 	uxtb.w	fp, r3
 800cb72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb76:	d820      	bhi.n	800cbba <_printf_float+0x186>
 800cb78:	3901      	subs	r1, #1
 800cb7a:	465a      	mov	r2, fp
 800cb7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb80:	9109      	str	r1, [sp, #36]	; 0x24
 800cb82:	f7ff ff19 	bl	800c9b8 <__exponent>
 800cb86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb88:	1813      	adds	r3, r2, r0
 800cb8a:	2a01      	cmp	r2, #1
 800cb8c:	4681      	mov	r9, r0
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	dc02      	bgt.n	800cb98 <_printf_float+0x164>
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	07d2      	lsls	r2, r2, #31
 800cb96:	d501      	bpl.n	800cb9c <_printf_float+0x168>
 800cb98:	3301      	adds	r3, #1
 800cb9a:	6123      	str	r3, [r4, #16]
 800cb9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d09c      	beq.n	800cade <_printf_float+0xaa>
 800cba4:	232d      	movs	r3, #45	; 0x2d
 800cba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbaa:	e798      	b.n	800cade <_printf_float+0xaa>
 800cbac:	9a06      	ldr	r2, [sp, #24]
 800cbae:	2a47      	cmp	r2, #71	; 0x47
 800cbb0:	d1be      	bne.n	800cb30 <_printf_float+0xfc>
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1bc      	bne.n	800cb30 <_printf_float+0xfc>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e7b9      	b.n	800cb2e <_printf_float+0xfa>
 800cbba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cbbe:	d118      	bne.n	800cbf2 <_printf_float+0x1be>
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	6863      	ldr	r3, [r4, #4]
 800cbc4:	dd0b      	ble.n	800cbde <_printf_float+0x1aa>
 800cbc6:	6121      	str	r1, [r4, #16]
 800cbc8:	b913      	cbnz	r3, 800cbd0 <_printf_float+0x19c>
 800cbca:	6822      	ldr	r2, [r4, #0]
 800cbcc:	07d0      	lsls	r0, r2, #31
 800cbce:	d502      	bpl.n	800cbd6 <_printf_float+0x1a2>
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	440b      	add	r3, r1
 800cbd4:	6123      	str	r3, [r4, #16]
 800cbd6:	65a1      	str	r1, [r4, #88]	; 0x58
 800cbd8:	f04f 0900 	mov.w	r9, #0
 800cbdc:	e7de      	b.n	800cb9c <_printf_float+0x168>
 800cbde:	b913      	cbnz	r3, 800cbe6 <_printf_float+0x1b2>
 800cbe0:	6822      	ldr	r2, [r4, #0]
 800cbe2:	07d2      	lsls	r2, r2, #31
 800cbe4:	d501      	bpl.n	800cbea <_printf_float+0x1b6>
 800cbe6:	3302      	adds	r3, #2
 800cbe8:	e7f4      	b.n	800cbd4 <_printf_float+0x1a0>
 800cbea:	2301      	movs	r3, #1
 800cbec:	e7f2      	b.n	800cbd4 <_printf_float+0x1a0>
 800cbee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cbf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbf4:	4299      	cmp	r1, r3
 800cbf6:	db05      	blt.n	800cc04 <_printf_float+0x1d0>
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	6121      	str	r1, [r4, #16]
 800cbfc:	07d8      	lsls	r0, r3, #31
 800cbfe:	d5ea      	bpl.n	800cbd6 <_printf_float+0x1a2>
 800cc00:	1c4b      	adds	r3, r1, #1
 800cc02:	e7e7      	b.n	800cbd4 <_printf_float+0x1a0>
 800cc04:	2900      	cmp	r1, #0
 800cc06:	bfd4      	ite	le
 800cc08:	f1c1 0202 	rsble	r2, r1, #2
 800cc0c:	2201      	movgt	r2, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	e7e0      	b.n	800cbd4 <_printf_float+0x1a0>
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	055a      	lsls	r2, r3, #21
 800cc16:	d407      	bmi.n	800cc28 <_printf_float+0x1f4>
 800cc18:	6923      	ldr	r3, [r4, #16]
 800cc1a:	4642      	mov	r2, r8
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	4628      	mov	r0, r5
 800cc20:	47b8      	blx	r7
 800cc22:	3001      	adds	r0, #1
 800cc24:	d12c      	bne.n	800cc80 <_printf_float+0x24c>
 800cc26:	e764      	b.n	800caf2 <_printf_float+0xbe>
 800cc28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc2c:	f240 80e0 	bls.w	800cdf0 <_printf_float+0x3bc>
 800cc30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc34:	2200      	movs	r2, #0
 800cc36:	2300      	movs	r3, #0
 800cc38:	f7f3 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d034      	beq.n	800ccaa <_printf_float+0x276>
 800cc40:	4a37      	ldr	r2, [pc, #220]	; (800cd20 <_printf_float+0x2ec>)
 800cc42:	2301      	movs	r3, #1
 800cc44:	4631      	mov	r1, r6
 800cc46:	4628      	mov	r0, r5
 800cc48:	47b8      	blx	r7
 800cc4a:	3001      	adds	r0, #1
 800cc4c:	f43f af51 	beq.w	800caf2 <_printf_float+0xbe>
 800cc50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc54:	429a      	cmp	r2, r3
 800cc56:	db02      	blt.n	800cc5e <_printf_float+0x22a>
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	07d8      	lsls	r0, r3, #31
 800cc5c:	d510      	bpl.n	800cc80 <_printf_float+0x24c>
 800cc5e:	ee18 3a10 	vmov	r3, s16
 800cc62:	4652      	mov	r2, sl
 800cc64:	4631      	mov	r1, r6
 800cc66:	4628      	mov	r0, r5
 800cc68:	47b8      	blx	r7
 800cc6a:	3001      	adds	r0, #1
 800cc6c:	f43f af41 	beq.w	800caf2 <_printf_float+0xbe>
 800cc70:	f04f 0800 	mov.w	r8, #0
 800cc74:	f104 091a 	add.w	r9, r4, #26
 800cc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4543      	cmp	r3, r8
 800cc7e:	dc09      	bgt.n	800cc94 <_printf_float+0x260>
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	079b      	lsls	r3, r3, #30
 800cc84:	f100 8107 	bmi.w	800ce96 <_printf_float+0x462>
 800cc88:	68e0      	ldr	r0, [r4, #12]
 800cc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc8c:	4298      	cmp	r0, r3
 800cc8e:	bfb8      	it	lt
 800cc90:	4618      	movlt	r0, r3
 800cc92:	e730      	b.n	800caf6 <_printf_float+0xc2>
 800cc94:	2301      	movs	r3, #1
 800cc96:	464a      	mov	r2, r9
 800cc98:	4631      	mov	r1, r6
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	47b8      	blx	r7
 800cc9e:	3001      	adds	r0, #1
 800cca0:	f43f af27 	beq.w	800caf2 <_printf_float+0xbe>
 800cca4:	f108 0801 	add.w	r8, r8, #1
 800cca8:	e7e6      	b.n	800cc78 <_printf_float+0x244>
 800ccaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dc39      	bgt.n	800cd24 <_printf_float+0x2f0>
 800ccb0:	4a1b      	ldr	r2, [pc, #108]	; (800cd20 <_printf_float+0x2ec>)
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	4631      	mov	r1, r6
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	47b8      	blx	r7
 800ccba:	3001      	adds	r0, #1
 800ccbc:	f43f af19 	beq.w	800caf2 <_printf_float+0xbe>
 800ccc0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	d102      	bne.n	800ccce <_printf_float+0x29a>
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	07d9      	lsls	r1, r3, #31
 800cccc:	d5d8      	bpl.n	800cc80 <_printf_float+0x24c>
 800ccce:	ee18 3a10 	vmov	r3, s16
 800ccd2:	4652      	mov	r2, sl
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b8      	blx	r7
 800ccda:	3001      	adds	r0, #1
 800ccdc:	f43f af09 	beq.w	800caf2 <_printf_float+0xbe>
 800cce0:	f04f 0900 	mov.w	r9, #0
 800cce4:	f104 0a1a 	add.w	sl, r4, #26
 800cce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccea:	425b      	negs	r3, r3
 800ccec:	454b      	cmp	r3, r9
 800ccee:	dc01      	bgt.n	800ccf4 <_printf_float+0x2c0>
 800ccf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf2:	e792      	b.n	800cc1a <_printf_float+0x1e6>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	4652      	mov	r2, sl
 800ccf8:	4631      	mov	r1, r6
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	47b8      	blx	r7
 800ccfe:	3001      	adds	r0, #1
 800cd00:	f43f aef7 	beq.w	800caf2 <_printf_float+0xbe>
 800cd04:	f109 0901 	add.w	r9, r9, #1
 800cd08:	e7ee      	b.n	800cce8 <_printf_float+0x2b4>
 800cd0a:	bf00      	nop
 800cd0c:	7fefffff 	.word	0x7fefffff
 800cd10:	080120c4 	.word	0x080120c4
 800cd14:	080120c8 	.word	0x080120c8
 800cd18:	080120cc 	.word	0x080120cc
 800cd1c:	080120d0 	.word	0x080120d0
 800cd20:	080120d4 	.word	0x080120d4
 800cd24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	bfa8      	it	ge
 800cd2c:	461a      	movge	r2, r3
 800cd2e:	2a00      	cmp	r2, #0
 800cd30:	4691      	mov	r9, r2
 800cd32:	dc37      	bgt.n	800cda4 <_printf_float+0x370>
 800cd34:	f04f 0b00 	mov.w	fp, #0
 800cd38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd3c:	f104 021a 	add.w	r2, r4, #26
 800cd40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	eba3 0309 	sub.w	r3, r3, r9
 800cd48:	455b      	cmp	r3, fp
 800cd4a:	dc33      	bgt.n	800cdb4 <_printf_float+0x380>
 800cd4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd50:	429a      	cmp	r2, r3
 800cd52:	db3b      	blt.n	800cdcc <_printf_float+0x398>
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	07da      	lsls	r2, r3, #31
 800cd58:	d438      	bmi.n	800cdcc <_printf_float+0x398>
 800cd5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cd5e:	eba2 0903 	sub.w	r9, r2, r3
 800cd62:	9b05      	ldr	r3, [sp, #20]
 800cd64:	1ad2      	subs	r2, r2, r3
 800cd66:	4591      	cmp	r9, r2
 800cd68:	bfa8      	it	ge
 800cd6a:	4691      	movge	r9, r2
 800cd6c:	f1b9 0f00 	cmp.w	r9, #0
 800cd70:	dc35      	bgt.n	800cdde <_printf_float+0x3aa>
 800cd72:	f04f 0800 	mov.w	r8, #0
 800cd76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd7a:	f104 0a1a 	add.w	sl, r4, #26
 800cd7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd82:	1a9b      	subs	r3, r3, r2
 800cd84:	eba3 0309 	sub.w	r3, r3, r9
 800cd88:	4543      	cmp	r3, r8
 800cd8a:	f77f af79 	ble.w	800cc80 <_printf_float+0x24c>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	4652      	mov	r2, sl
 800cd92:	4631      	mov	r1, r6
 800cd94:	4628      	mov	r0, r5
 800cd96:	47b8      	blx	r7
 800cd98:	3001      	adds	r0, #1
 800cd9a:	f43f aeaa 	beq.w	800caf2 <_printf_float+0xbe>
 800cd9e:	f108 0801 	add.w	r8, r8, #1
 800cda2:	e7ec      	b.n	800cd7e <_printf_float+0x34a>
 800cda4:	4613      	mov	r3, r2
 800cda6:	4631      	mov	r1, r6
 800cda8:	4642      	mov	r2, r8
 800cdaa:	4628      	mov	r0, r5
 800cdac:	47b8      	blx	r7
 800cdae:	3001      	adds	r0, #1
 800cdb0:	d1c0      	bne.n	800cd34 <_printf_float+0x300>
 800cdb2:	e69e      	b.n	800caf2 <_printf_float+0xbe>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	4631      	mov	r1, r6
 800cdb8:	4628      	mov	r0, r5
 800cdba:	9205      	str	r2, [sp, #20]
 800cdbc:	47b8      	blx	r7
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	f43f ae97 	beq.w	800caf2 <_printf_float+0xbe>
 800cdc4:	9a05      	ldr	r2, [sp, #20]
 800cdc6:	f10b 0b01 	add.w	fp, fp, #1
 800cdca:	e7b9      	b.n	800cd40 <_printf_float+0x30c>
 800cdcc:	ee18 3a10 	vmov	r3, s16
 800cdd0:	4652      	mov	r2, sl
 800cdd2:	4631      	mov	r1, r6
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	47b8      	blx	r7
 800cdd8:	3001      	adds	r0, #1
 800cdda:	d1be      	bne.n	800cd5a <_printf_float+0x326>
 800cddc:	e689      	b.n	800caf2 <_printf_float+0xbe>
 800cdde:	9a05      	ldr	r2, [sp, #20]
 800cde0:	464b      	mov	r3, r9
 800cde2:	4442      	add	r2, r8
 800cde4:	4631      	mov	r1, r6
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b8      	blx	r7
 800cdea:	3001      	adds	r0, #1
 800cdec:	d1c1      	bne.n	800cd72 <_printf_float+0x33e>
 800cdee:	e680      	b.n	800caf2 <_printf_float+0xbe>
 800cdf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdf2:	2a01      	cmp	r2, #1
 800cdf4:	dc01      	bgt.n	800cdfa <_printf_float+0x3c6>
 800cdf6:	07db      	lsls	r3, r3, #31
 800cdf8:	d53a      	bpl.n	800ce70 <_printf_float+0x43c>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	4642      	mov	r2, r8
 800cdfe:	4631      	mov	r1, r6
 800ce00:	4628      	mov	r0, r5
 800ce02:	47b8      	blx	r7
 800ce04:	3001      	adds	r0, #1
 800ce06:	f43f ae74 	beq.w	800caf2 <_printf_float+0xbe>
 800ce0a:	ee18 3a10 	vmov	r3, s16
 800ce0e:	4652      	mov	r2, sl
 800ce10:	4631      	mov	r1, r6
 800ce12:	4628      	mov	r0, r5
 800ce14:	47b8      	blx	r7
 800ce16:	3001      	adds	r0, #1
 800ce18:	f43f ae6b 	beq.w	800caf2 <_printf_float+0xbe>
 800ce1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce20:	2200      	movs	r2, #0
 800ce22:	2300      	movs	r3, #0
 800ce24:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ce28:	f7f3 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce2c:	b9d8      	cbnz	r0, 800ce66 <_printf_float+0x432>
 800ce2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ce32:	f108 0201 	add.w	r2, r8, #1
 800ce36:	4631      	mov	r1, r6
 800ce38:	4628      	mov	r0, r5
 800ce3a:	47b8      	blx	r7
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d10e      	bne.n	800ce5e <_printf_float+0x42a>
 800ce40:	e657      	b.n	800caf2 <_printf_float+0xbe>
 800ce42:	2301      	movs	r3, #1
 800ce44:	4652      	mov	r2, sl
 800ce46:	4631      	mov	r1, r6
 800ce48:	4628      	mov	r0, r5
 800ce4a:	47b8      	blx	r7
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	f43f ae50 	beq.w	800caf2 <_printf_float+0xbe>
 800ce52:	f108 0801 	add.w	r8, r8, #1
 800ce56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	4543      	cmp	r3, r8
 800ce5c:	dcf1      	bgt.n	800ce42 <_printf_float+0x40e>
 800ce5e:	464b      	mov	r3, r9
 800ce60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce64:	e6da      	b.n	800cc1c <_printf_float+0x1e8>
 800ce66:	f04f 0800 	mov.w	r8, #0
 800ce6a:	f104 0a1a 	add.w	sl, r4, #26
 800ce6e:	e7f2      	b.n	800ce56 <_printf_float+0x422>
 800ce70:	2301      	movs	r3, #1
 800ce72:	4642      	mov	r2, r8
 800ce74:	e7df      	b.n	800ce36 <_printf_float+0x402>
 800ce76:	2301      	movs	r3, #1
 800ce78:	464a      	mov	r2, r9
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	4628      	mov	r0, r5
 800ce7e:	47b8      	blx	r7
 800ce80:	3001      	adds	r0, #1
 800ce82:	f43f ae36 	beq.w	800caf2 <_printf_float+0xbe>
 800ce86:	f108 0801 	add.w	r8, r8, #1
 800ce8a:	68e3      	ldr	r3, [r4, #12]
 800ce8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce8e:	1a5b      	subs	r3, r3, r1
 800ce90:	4543      	cmp	r3, r8
 800ce92:	dcf0      	bgt.n	800ce76 <_printf_float+0x442>
 800ce94:	e6f8      	b.n	800cc88 <_printf_float+0x254>
 800ce96:	f04f 0800 	mov.w	r8, #0
 800ce9a:	f104 0919 	add.w	r9, r4, #25
 800ce9e:	e7f4      	b.n	800ce8a <_printf_float+0x456>

0800cea0 <_printf_common>:
 800cea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea4:	4616      	mov	r6, r2
 800cea6:	4699      	mov	r9, r3
 800cea8:	688a      	ldr	r2, [r1, #8]
 800ceaa:	690b      	ldr	r3, [r1, #16]
 800ceac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	bfb8      	it	lt
 800ceb4:	4613      	movlt	r3, r2
 800ceb6:	6033      	str	r3, [r6, #0]
 800ceb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cebc:	4607      	mov	r7, r0
 800cebe:	460c      	mov	r4, r1
 800cec0:	b10a      	cbz	r2, 800cec6 <_printf_common+0x26>
 800cec2:	3301      	adds	r3, #1
 800cec4:	6033      	str	r3, [r6, #0]
 800cec6:	6823      	ldr	r3, [r4, #0]
 800cec8:	0699      	lsls	r1, r3, #26
 800ceca:	bf42      	ittt	mi
 800cecc:	6833      	ldrmi	r3, [r6, #0]
 800cece:	3302      	addmi	r3, #2
 800ced0:	6033      	strmi	r3, [r6, #0]
 800ced2:	6825      	ldr	r5, [r4, #0]
 800ced4:	f015 0506 	ands.w	r5, r5, #6
 800ced8:	d106      	bne.n	800cee8 <_printf_common+0x48>
 800ceda:	f104 0a19 	add.w	sl, r4, #25
 800cede:	68e3      	ldr	r3, [r4, #12]
 800cee0:	6832      	ldr	r2, [r6, #0]
 800cee2:	1a9b      	subs	r3, r3, r2
 800cee4:	42ab      	cmp	r3, r5
 800cee6:	dc26      	bgt.n	800cf36 <_printf_common+0x96>
 800cee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ceec:	1e13      	subs	r3, r2, #0
 800ceee:	6822      	ldr	r2, [r4, #0]
 800cef0:	bf18      	it	ne
 800cef2:	2301      	movne	r3, #1
 800cef4:	0692      	lsls	r2, r2, #26
 800cef6:	d42b      	bmi.n	800cf50 <_printf_common+0xb0>
 800cef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cefc:	4649      	mov	r1, r9
 800cefe:	4638      	mov	r0, r7
 800cf00:	47c0      	blx	r8
 800cf02:	3001      	adds	r0, #1
 800cf04:	d01e      	beq.n	800cf44 <_printf_common+0xa4>
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	6922      	ldr	r2, [r4, #16]
 800cf0a:	f003 0306 	and.w	r3, r3, #6
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	bf02      	ittt	eq
 800cf12:	68e5      	ldreq	r5, [r4, #12]
 800cf14:	6833      	ldreq	r3, [r6, #0]
 800cf16:	1aed      	subeq	r5, r5, r3
 800cf18:	68a3      	ldr	r3, [r4, #8]
 800cf1a:	bf0c      	ite	eq
 800cf1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf20:	2500      	movne	r5, #0
 800cf22:	4293      	cmp	r3, r2
 800cf24:	bfc4      	itt	gt
 800cf26:	1a9b      	subgt	r3, r3, r2
 800cf28:	18ed      	addgt	r5, r5, r3
 800cf2a:	2600      	movs	r6, #0
 800cf2c:	341a      	adds	r4, #26
 800cf2e:	42b5      	cmp	r5, r6
 800cf30:	d11a      	bne.n	800cf68 <_printf_common+0xc8>
 800cf32:	2000      	movs	r0, #0
 800cf34:	e008      	b.n	800cf48 <_printf_common+0xa8>
 800cf36:	2301      	movs	r3, #1
 800cf38:	4652      	mov	r2, sl
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	47c0      	blx	r8
 800cf40:	3001      	adds	r0, #1
 800cf42:	d103      	bne.n	800cf4c <_printf_common+0xac>
 800cf44:	f04f 30ff 	mov.w	r0, #4294967295
 800cf48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf4c:	3501      	adds	r5, #1
 800cf4e:	e7c6      	b.n	800cede <_printf_common+0x3e>
 800cf50:	18e1      	adds	r1, r4, r3
 800cf52:	1c5a      	adds	r2, r3, #1
 800cf54:	2030      	movs	r0, #48	; 0x30
 800cf56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf5a:	4422      	add	r2, r4
 800cf5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf64:	3302      	adds	r3, #2
 800cf66:	e7c7      	b.n	800cef8 <_printf_common+0x58>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	4622      	mov	r2, r4
 800cf6c:	4649      	mov	r1, r9
 800cf6e:	4638      	mov	r0, r7
 800cf70:	47c0      	blx	r8
 800cf72:	3001      	adds	r0, #1
 800cf74:	d0e6      	beq.n	800cf44 <_printf_common+0xa4>
 800cf76:	3601      	adds	r6, #1
 800cf78:	e7d9      	b.n	800cf2e <_printf_common+0x8e>
	...

0800cf7c <_printf_i>:
 800cf7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf80:	7e0f      	ldrb	r7, [r1, #24]
 800cf82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf84:	2f78      	cmp	r7, #120	; 0x78
 800cf86:	4691      	mov	r9, r2
 800cf88:	4680      	mov	r8, r0
 800cf8a:	460c      	mov	r4, r1
 800cf8c:	469a      	mov	sl, r3
 800cf8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf92:	d807      	bhi.n	800cfa4 <_printf_i+0x28>
 800cf94:	2f62      	cmp	r7, #98	; 0x62
 800cf96:	d80a      	bhi.n	800cfae <_printf_i+0x32>
 800cf98:	2f00      	cmp	r7, #0
 800cf9a:	f000 80d4 	beq.w	800d146 <_printf_i+0x1ca>
 800cf9e:	2f58      	cmp	r7, #88	; 0x58
 800cfa0:	f000 80c0 	beq.w	800d124 <_printf_i+0x1a8>
 800cfa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfac:	e03a      	b.n	800d024 <_printf_i+0xa8>
 800cfae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfb2:	2b15      	cmp	r3, #21
 800cfb4:	d8f6      	bhi.n	800cfa4 <_printf_i+0x28>
 800cfb6:	a101      	add	r1, pc, #4	; (adr r1, 800cfbc <_printf_i+0x40>)
 800cfb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfbc:	0800d015 	.word	0x0800d015
 800cfc0:	0800d029 	.word	0x0800d029
 800cfc4:	0800cfa5 	.word	0x0800cfa5
 800cfc8:	0800cfa5 	.word	0x0800cfa5
 800cfcc:	0800cfa5 	.word	0x0800cfa5
 800cfd0:	0800cfa5 	.word	0x0800cfa5
 800cfd4:	0800d029 	.word	0x0800d029
 800cfd8:	0800cfa5 	.word	0x0800cfa5
 800cfdc:	0800cfa5 	.word	0x0800cfa5
 800cfe0:	0800cfa5 	.word	0x0800cfa5
 800cfe4:	0800cfa5 	.word	0x0800cfa5
 800cfe8:	0800d12d 	.word	0x0800d12d
 800cfec:	0800d055 	.word	0x0800d055
 800cff0:	0800d0e7 	.word	0x0800d0e7
 800cff4:	0800cfa5 	.word	0x0800cfa5
 800cff8:	0800cfa5 	.word	0x0800cfa5
 800cffc:	0800d14f 	.word	0x0800d14f
 800d000:	0800cfa5 	.word	0x0800cfa5
 800d004:	0800d055 	.word	0x0800d055
 800d008:	0800cfa5 	.word	0x0800cfa5
 800d00c:	0800cfa5 	.word	0x0800cfa5
 800d010:	0800d0ef 	.word	0x0800d0ef
 800d014:	682b      	ldr	r3, [r5, #0]
 800d016:	1d1a      	adds	r2, r3, #4
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	602a      	str	r2, [r5, #0]
 800d01c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d024:	2301      	movs	r3, #1
 800d026:	e09f      	b.n	800d168 <_printf_i+0x1ec>
 800d028:	6820      	ldr	r0, [r4, #0]
 800d02a:	682b      	ldr	r3, [r5, #0]
 800d02c:	0607      	lsls	r7, r0, #24
 800d02e:	f103 0104 	add.w	r1, r3, #4
 800d032:	6029      	str	r1, [r5, #0]
 800d034:	d501      	bpl.n	800d03a <_printf_i+0xbe>
 800d036:	681e      	ldr	r6, [r3, #0]
 800d038:	e003      	b.n	800d042 <_printf_i+0xc6>
 800d03a:	0646      	lsls	r6, r0, #25
 800d03c:	d5fb      	bpl.n	800d036 <_printf_i+0xba>
 800d03e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d042:	2e00      	cmp	r6, #0
 800d044:	da03      	bge.n	800d04e <_printf_i+0xd2>
 800d046:	232d      	movs	r3, #45	; 0x2d
 800d048:	4276      	negs	r6, r6
 800d04a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d04e:	485a      	ldr	r0, [pc, #360]	; (800d1b8 <_printf_i+0x23c>)
 800d050:	230a      	movs	r3, #10
 800d052:	e012      	b.n	800d07a <_printf_i+0xfe>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	6820      	ldr	r0, [r4, #0]
 800d058:	1d19      	adds	r1, r3, #4
 800d05a:	6029      	str	r1, [r5, #0]
 800d05c:	0605      	lsls	r5, r0, #24
 800d05e:	d501      	bpl.n	800d064 <_printf_i+0xe8>
 800d060:	681e      	ldr	r6, [r3, #0]
 800d062:	e002      	b.n	800d06a <_printf_i+0xee>
 800d064:	0641      	lsls	r1, r0, #25
 800d066:	d5fb      	bpl.n	800d060 <_printf_i+0xe4>
 800d068:	881e      	ldrh	r6, [r3, #0]
 800d06a:	4853      	ldr	r0, [pc, #332]	; (800d1b8 <_printf_i+0x23c>)
 800d06c:	2f6f      	cmp	r7, #111	; 0x6f
 800d06e:	bf0c      	ite	eq
 800d070:	2308      	moveq	r3, #8
 800d072:	230a      	movne	r3, #10
 800d074:	2100      	movs	r1, #0
 800d076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d07a:	6865      	ldr	r5, [r4, #4]
 800d07c:	60a5      	str	r5, [r4, #8]
 800d07e:	2d00      	cmp	r5, #0
 800d080:	bfa2      	ittt	ge
 800d082:	6821      	ldrge	r1, [r4, #0]
 800d084:	f021 0104 	bicge.w	r1, r1, #4
 800d088:	6021      	strge	r1, [r4, #0]
 800d08a:	b90e      	cbnz	r6, 800d090 <_printf_i+0x114>
 800d08c:	2d00      	cmp	r5, #0
 800d08e:	d04b      	beq.n	800d128 <_printf_i+0x1ac>
 800d090:	4615      	mov	r5, r2
 800d092:	fbb6 f1f3 	udiv	r1, r6, r3
 800d096:	fb03 6711 	mls	r7, r3, r1, r6
 800d09a:	5dc7      	ldrb	r7, [r0, r7]
 800d09c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0a0:	4637      	mov	r7, r6
 800d0a2:	42bb      	cmp	r3, r7
 800d0a4:	460e      	mov	r6, r1
 800d0a6:	d9f4      	bls.n	800d092 <_printf_i+0x116>
 800d0a8:	2b08      	cmp	r3, #8
 800d0aa:	d10b      	bne.n	800d0c4 <_printf_i+0x148>
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	07de      	lsls	r6, r3, #31
 800d0b0:	d508      	bpl.n	800d0c4 <_printf_i+0x148>
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	6861      	ldr	r1, [r4, #4]
 800d0b6:	4299      	cmp	r1, r3
 800d0b8:	bfde      	ittt	le
 800d0ba:	2330      	movle	r3, #48	; 0x30
 800d0bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0c4:	1b52      	subs	r2, r2, r5
 800d0c6:	6122      	str	r2, [r4, #16]
 800d0c8:	f8cd a000 	str.w	sl, [sp]
 800d0cc:	464b      	mov	r3, r9
 800d0ce:	aa03      	add	r2, sp, #12
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f7ff fee4 	bl	800cea0 <_printf_common>
 800d0d8:	3001      	adds	r0, #1
 800d0da:	d14a      	bne.n	800d172 <_printf_i+0x1f6>
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e0:	b004      	add	sp, #16
 800d0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e6:	6823      	ldr	r3, [r4, #0]
 800d0e8:	f043 0320 	orr.w	r3, r3, #32
 800d0ec:	6023      	str	r3, [r4, #0]
 800d0ee:	4833      	ldr	r0, [pc, #204]	; (800d1bc <_printf_i+0x240>)
 800d0f0:	2778      	movs	r7, #120	; 0x78
 800d0f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d0f6:	6823      	ldr	r3, [r4, #0]
 800d0f8:	6829      	ldr	r1, [r5, #0]
 800d0fa:	061f      	lsls	r7, r3, #24
 800d0fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800d100:	d402      	bmi.n	800d108 <_printf_i+0x18c>
 800d102:	065f      	lsls	r7, r3, #25
 800d104:	bf48      	it	mi
 800d106:	b2b6      	uxthmi	r6, r6
 800d108:	07df      	lsls	r7, r3, #31
 800d10a:	bf48      	it	mi
 800d10c:	f043 0320 	orrmi.w	r3, r3, #32
 800d110:	6029      	str	r1, [r5, #0]
 800d112:	bf48      	it	mi
 800d114:	6023      	strmi	r3, [r4, #0]
 800d116:	b91e      	cbnz	r6, 800d120 <_printf_i+0x1a4>
 800d118:	6823      	ldr	r3, [r4, #0]
 800d11a:	f023 0320 	bic.w	r3, r3, #32
 800d11e:	6023      	str	r3, [r4, #0]
 800d120:	2310      	movs	r3, #16
 800d122:	e7a7      	b.n	800d074 <_printf_i+0xf8>
 800d124:	4824      	ldr	r0, [pc, #144]	; (800d1b8 <_printf_i+0x23c>)
 800d126:	e7e4      	b.n	800d0f2 <_printf_i+0x176>
 800d128:	4615      	mov	r5, r2
 800d12a:	e7bd      	b.n	800d0a8 <_printf_i+0x12c>
 800d12c:	682b      	ldr	r3, [r5, #0]
 800d12e:	6826      	ldr	r6, [r4, #0]
 800d130:	6961      	ldr	r1, [r4, #20]
 800d132:	1d18      	adds	r0, r3, #4
 800d134:	6028      	str	r0, [r5, #0]
 800d136:	0635      	lsls	r5, r6, #24
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	d501      	bpl.n	800d140 <_printf_i+0x1c4>
 800d13c:	6019      	str	r1, [r3, #0]
 800d13e:	e002      	b.n	800d146 <_printf_i+0x1ca>
 800d140:	0670      	lsls	r0, r6, #25
 800d142:	d5fb      	bpl.n	800d13c <_printf_i+0x1c0>
 800d144:	8019      	strh	r1, [r3, #0]
 800d146:	2300      	movs	r3, #0
 800d148:	6123      	str	r3, [r4, #16]
 800d14a:	4615      	mov	r5, r2
 800d14c:	e7bc      	b.n	800d0c8 <_printf_i+0x14c>
 800d14e:	682b      	ldr	r3, [r5, #0]
 800d150:	1d1a      	adds	r2, r3, #4
 800d152:	602a      	str	r2, [r5, #0]
 800d154:	681d      	ldr	r5, [r3, #0]
 800d156:	6862      	ldr	r2, [r4, #4]
 800d158:	2100      	movs	r1, #0
 800d15a:	4628      	mov	r0, r5
 800d15c:	f7f3 f838 	bl	80001d0 <memchr>
 800d160:	b108      	cbz	r0, 800d166 <_printf_i+0x1ea>
 800d162:	1b40      	subs	r0, r0, r5
 800d164:	6060      	str	r0, [r4, #4]
 800d166:	6863      	ldr	r3, [r4, #4]
 800d168:	6123      	str	r3, [r4, #16]
 800d16a:	2300      	movs	r3, #0
 800d16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d170:	e7aa      	b.n	800d0c8 <_printf_i+0x14c>
 800d172:	6923      	ldr	r3, [r4, #16]
 800d174:	462a      	mov	r2, r5
 800d176:	4649      	mov	r1, r9
 800d178:	4640      	mov	r0, r8
 800d17a:	47d0      	blx	sl
 800d17c:	3001      	adds	r0, #1
 800d17e:	d0ad      	beq.n	800d0dc <_printf_i+0x160>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	079b      	lsls	r3, r3, #30
 800d184:	d413      	bmi.n	800d1ae <_printf_i+0x232>
 800d186:	68e0      	ldr	r0, [r4, #12]
 800d188:	9b03      	ldr	r3, [sp, #12]
 800d18a:	4298      	cmp	r0, r3
 800d18c:	bfb8      	it	lt
 800d18e:	4618      	movlt	r0, r3
 800d190:	e7a6      	b.n	800d0e0 <_printf_i+0x164>
 800d192:	2301      	movs	r3, #1
 800d194:	4632      	mov	r2, r6
 800d196:	4649      	mov	r1, r9
 800d198:	4640      	mov	r0, r8
 800d19a:	47d0      	blx	sl
 800d19c:	3001      	adds	r0, #1
 800d19e:	d09d      	beq.n	800d0dc <_printf_i+0x160>
 800d1a0:	3501      	adds	r5, #1
 800d1a2:	68e3      	ldr	r3, [r4, #12]
 800d1a4:	9903      	ldr	r1, [sp, #12]
 800d1a6:	1a5b      	subs	r3, r3, r1
 800d1a8:	42ab      	cmp	r3, r5
 800d1aa:	dcf2      	bgt.n	800d192 <_printf_i+0x216>
 800d1ac:	e7eb      	b.n	800d186 <_printf_i+0x20a>
 800d1ae:	2500      	movs	r5, #0
 800d1b0:	f104 0619 	add.w	r6, r4, #25
 800d1b4:	e7f5      	b.n	800d1a2 <_printf_i+0x226>
 800d1b6:	bf00      	nop
 800d1b8:	080120d6 	.word	0x080120d6
 800d1bc:	080120e7 	.word	0x080120e7

0800d1c0 <_scanf_float>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	b087      	sub	sp, #28
 800d1c6:	4617      	mov	r7, r2
 800d1c8:	9303      	str	r3, [sp, #12]
 800d1ca:	688b      	ldr	r3, [r1, #8]
 800d1cc:	1e5a      	subs	r2, r3, #1
 800d1ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d1d2:	bf83      	ittte	hi
 800d1d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d1d8:	195b      	addhi	r3, r3, r5
 800d1da:	9302      	strhi	r3, [sp, #8]
 800d1dc:	2300      	movls	r3, #0
 800d1de:	bf86      	itte	hi
 800d1e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d1e4:	608b      	strhi	r3, [r1, #8]
 800d1e6:	9302      	strls	r3, [sp, #8]
 800d1e8:	680b      	ldr	r3, [r1, #0]
 800d1ea:	468b      	mov	fp, r1
 800d1ec:	2500      	movs	r5, #0
 800d1ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d1f2:	f84b 3b1c 	str.w	r3, [fp], #28
 800d1f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d1fa:	4680      	mov	r8, r0
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	465e      	mov	r6, fp
 800d200:	46aa      	mov	sl, r5
 800d202:	46a9      	mov	r9, r5
 800d204:	9501      	str	r5, [sp, #4]
 800d206:	68a2      	ldr	r2, [r4, #8]
 800d208:	b152      	cbz	r2, 800d220 <_scanf_float+0x60>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	2b4e      	cmp	r3, #78	; 0x4e
 800d210:	d864      	bhi.n	800d2dc <_scanf_float+0x11c>
 800d212:	2b40      	cmp	r3, #64	; 0x40
 800d214:	d83c      	bhi.n	800d290 <_scanf_float+0xd0>
 800d216:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d21a:	b2c8      	uxtb	r0, r1
 800d21c:	280e      	cmp	r0, #14
 800d21e:	d93a      	bls.n	800d296 <_scanf_float+0xd6>
 800d220:	f1b9 0f00 	cmp.w	r9, #0
 800d224:	d003      	beq.n	800d22e <_scanf_float+0x6e>
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d232:	f1ba 0f01 	cmp.w	sl, #1
 800d236:	f200 8113 	bhi.w	800d460 <_scanf_float+0x2a0>
 800d23a:	455e      	cmp	r6, fp
 800d23c:	f200 8105 	bhi.w	800d44a <_scanf_float+0x28a>
 800d240:	2501      	movs	r5, #1
 800d242:	4628      	mov	r0, r5
 800d244:	b007      	add	sp, #28
 800d246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d24a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d24e:	2a0d      	cmp	r2, #13
 800d250:	d8e6      	bhi.n	800d220 <_scanf_float+0x60>
 800d252:	a101      	add	r1, pc, #4	; (adr r1, 800d258 <_scanf_float+0x98>)
 800d254:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d258:	0800d397 	.word	0x0800d397
 800d25c:	0800d221 	.word	0x0800d221
 800d260:	0800d221 	.word	0x0800d221
 800d264:	0800d221 	.word	0x0800d221
 800d268:	0800d3f7 	.word	0x0800d3f7
 800d26c:	0800d3cf 	.word	0x0800d3cf
 800d270:	0800d221 	.word	0x0800d221
 800d274:	0800d221 	.word	0x0800d221
 800d278:	0800d3a5 	.word	0x0800d3a5
 800d27c:	0800d221 	.word	0x0800d221
 800d280:	0800d221 	.word	0x0800d221
 800d284:	0800d221 	.word	0x0800d221
 800d288:	0800d221 	.word	0x0800d221
 800d28c:	0800d35d 	.word	0x0800d35d
 800d290:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d294:	e7db      	b.n	800d24e <_scanf_float+0x8e>
 800d296:	290e      	cmp	r1, #14
 800d298:	d8c2      	bhi.n	800d220 <_scanf_float+0x60>
 800d29a:	a001      	add	r0, pc, #4	; (adr r0, 800d2a0 <_scanf_float+0xe0>)
 800d29c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d2a0:	0800d34f 	.word	0x0800d34f
 800d2a4:	0800d221 	.word	0x0800d221
 800d2a8:	0800d34f 	.word	0x0800d34f
 800d2ac:	0800d3e3 	.word	0x0800d3e3
 800d2b0:	0800d221 	.word	0x0800d221
 800d2b4:	0800d2fd 	.word	0x0800d2fd
 800d2b8:	0800d339 	.word	0x0800d339
 800d2bc:	0800d339 	.word	0x0800d339
 800d2c0:	0800d339 	.word	0x0800d339
 800d2c4:	0800d339 	.word	0x0800d339
 800d2c8:	0800d339 	.word	0x0800d339
 800d2cc:	0800d339 	.word	0x0800d339
 800d2d0:	0800d339 	.word	0x0800d339
 800d2d4:	0800d339 	.word	0x0800d339
 800d2d8:	0800d339 	.word	0x0800d339
 800d2dc:	2b6e      	cmp	r3, #110	; 0x6e
 800d2de:	d809      	bhi.n	800d2f4 <_scanf_float+0x134>
 800d2e0:	2b60      	cmp	r3, #96	; 0x60
 800d2e2:	d8b2      	bhi.n	800d24a <_scanf_float+0x8a>
 800d2e4:	2b54      	cmp	r3, #84	; 0x54
 800d2e6:	d077      	beq.n	800d3d8 <_scanf_float+0x218>
 800d2e8:	2b59      	cmp	r3, #89	; 0x59
 800d2ea:	d199      	bne.n	800d220 <_scanf_float+0x60>
 800d2ec:	2d07      	cmp	r5, #7
 800d2ee:	d197      	bne.n	800d220 <_scanf_float+0x60>
 800d2f0:	2508      	movs	r5, #8
 800d2f2:	e029      	b.n	800d348 <_scanf_float+0x188>
 800d2f4:	2b74      	cmp	r3, #116	; 0x74
 800d2f6:	d06f      	beq.n	800d3d8 <_scanf_float+0x218>
 800d2f8:	2b79      	cmp	r3, #121	; 0x79
 800d2fa:	e7f6      	b.n	800d2ea <_scanf_float+0x12a>
 800d2fc:	6821      	ldr	r1, [r4, #0]
 800d2fe:	05c8      	lsls	r0, r1, #23
 800d300:	d51a      	bpl.n	800d338 <_scanf_float+0x178>
 800d302:	9b02      	ldr	r3, [sp, #8]
 800d304:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d308:	6021      	str	r1, [r4, #0]
 800d30a:	f109 0901 	add.w	r9, r9, #1
 800d30e:	b11b      	cbz	r3, 800d318 <_scanf_float+0x158>
 800d310:	3b01      	subs	r3, #1
 800d312:	3201      	adds	r2, #1
 800d314:	9302      	str	r3, [sp, #8]
 800d316:	60a2      	str	r2, [r4, #8]
 800d318:	68a3      	ldr	r3, [r4, #8]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	60a3      	str	r3, [r4, #8]
 800d31e:	6923      	ldr	r3, [r4, #16]
 800d320:	3301      	adds	r3, #1
 800d322:	6123      	str	r3, [r4, #16]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	3b01      	subs	r3, #1
 800d328:	2b00      	cmp	r3, #0
 800d32a:	607b      	str	r3, [r7, #4]
 800d32c:	f340 8084 	ble.w	800d438 <_scanf_float+0x278>
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	3301      	adds	r3, #1
 800d334:	603b      	str	r3, [r7, #0]
 800d336:	e766      	b.n	800d206 <_scanf_float+0x46>
 800d338:	eb1a 0f05 	cmn.w	sl, r5
 800d33c:	f47f af70 	bne.w	800d220 <_scanf_float+0x60>
 800d340:	6822      	ldr	r2, [r4, #0]
 800d342:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d346:	6022      	str	r2, [r4, #0]
 800d348:	f806 3b01 	strb.w	r3, [r6], #1
 800d34c:	e7e4      	b.n	800d318 <_scanf_float+0x158>
 800d34e:	6822      	ldr	r2, [r4, #0]
 800d350:	0610      	lsls	r0, r2, #24
 800d352:	f57f af65 	bpl.w	800d220 <_scanf_float+0x60>
 800d356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d35a:	e7f4      	b.n	800d346 <_scanf_float+0x186>
 800d35c:	f1ba 0f00 	cmp.w	sl, #0
 800d360:	d10e      	bne.n	800d380 <_scanf_float+0x1c0>
 800d362:	f1b9 0f00 	cmp.w	r9, #0
 800d366:	d10e      	bne.n	800d386 <_scanf_float+0x1c6>
 800d368:	6822      	ldr	r2, [r4, #0]
 800d36a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d36e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d372:	d108      	bne.n	800d386 <_scanf_float+0x1c6>
 800d374:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d378:	6022      	str	r2, [r4, #0]
 800d37a:	f04f 0a01 	mov.w	sl, #1
 800d37e:	e7e3      	b.n	800d348 <_scanf_float+0x188>
 800d380:	f1ba 0f02 	cmp.w	sl, #2
 800d384:	d055      	beq.n	800d432 <_scanf_float+0x272>
 800d386:	2d01      	cmp	r5, #1
 800d388:	d002      	beq.n	800d390 <_scanf_float+0x1d0>
 800d38a:	2d04      	cmp	r5, #4
 800d38c:	f47f af48 	bne.w	800d220 <_scanf_float+0x60>
 800d390:	3501      	adds	r5, #1
 800d392:	b2ed      	uxtb	r5, r5
 800d394:	e7d8      	b.n	800d348 <_scanf_float+0x188>
 800d396:	f1ba 0f01 	cmp.w	sl, #1
 800d39a:	f47f af41 	bne.w	800d220 <_scanf_float+0x60>
 800d39e:	f04f 0a02 	mov.w	sl, #2
 800d3a2:	e7d1      	b.n	800d348 <_scanf_float+0x188>
 800d3a4:	b97d      	cbnz	r5, 800d3c6 <_scanf_float+0x206>
 800d3a6:	f1b9 0f00 	cmp.w	r9, #0
 800d3aa:	f47f af3c 	bne.w	800d226 <_scanf_float+0x66>
 800d3ae:	6822      	ldr	r2, [r4, #0]
 800d3b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d3b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d3b8:	f47f af39 	bne.w	800d22e <_scanf_float+0x6e>
 800d3bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d3c0:	6022      	str	r2, [r4, #0]
 800d3c2:	2501      	movs	r5, #1
 800d3c4:	e7c0      	b.n	800d348 <_scanf_float+0x188>
 800d3c6:	2d03      	cmp	r5, #3
 800d3c8:	d0e2      	beq.n	800d390 <_scanf_float+0x1d0>
 800d3ca:	2d05      	cmp	r5, #5
 800d3cc:	e7de      	b.n	800d38c <_scanf_float+0x1cc>
 800d3ce:	2d02      	cmp	r5, #2
 800d3d0:	f47f af26 	bne.w	800d220 <_scanf_float+0x60>
 800d3d4:	2503      	movs	r5, #3
 800d3d6:	e7b7      	b.n	800d348 <_scanf_float+0x188>
 800d3d8:	2d06      	cmp	r5, #6
 800d3da:	f47f af21 	bne.w	800d220 <_scanf_float+0x60>
 800d3de:	2507      	movs	r5, #7
 800d3e0:	e7b2      	b.n	800d348 <_scanf_float+0x188>
 800d3e2:	6822      	ldr	r2, [r4, #0]
 800d3e4:	0591      	lsls	r1, r2, #22
 800d3e6:	f57f af1b 	bpl.w	800d220 <_scanf_float+0x60>
 800d3ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d3ee:	6022      	str	r2, [r4, #0]
 800d3f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d3f4:	e7a8      	b.n	800d348 <_scanf_float+0x188>
 800d3f6:	6822      	ldr	r2, [r4, #0]
 800d3f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d3fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d400:	d006      	beq.n	800d410 <_scanf_float+0x250>
 800d402:	0550      	lsls	r0, r2, #21
 800d404:	f57f af0c 	bpl.w	800d220 <_scanf_float+0x60>
 800d408:	f1b9 0f00 	cmp.w	r9, #0
 800d40c:	f43f af0f 	beq.w	800d22e <_scanf_float+0x6e>
 800d410:	0591      	lsls	r1, r2, #22
 800d412:	bf58      	it	pl
 800d414:	9901      	ldrpl	r1, [sp, #4]
 800d416:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d41a:	bf58      	it	pl
 800d41c:	eba9 0101 	subpl.w	r1, r9, r1
 800d420:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d424:	bf58      	it	pl
 800d426:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d42a:	6022      	str	r2, [r4, #0]
 800d42c:	f04f 0900 	mov.w	r9, #0
 800d430:	e78a      	b.n	800d348 <_scanf_float+0x188>
 800d432:	f04f 0a03 	mov.w	sl, #3
 800d436:	e787      	b.n	800d348 <_scanf_float+0x188>
 800d438:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d43c:	4639      	mov	r1, r7
 800d43e:	4640      	mov	r0, r8
 800d440:	4798      	blx	r3
 800d442:	2800      	cmp	r0, #0
 800d444:	f43f aedf 	beq.w	800d206 <_scanf_float+0x46>
 800d448:	e6ea      	b.n	800d220 <_scanf_float+0x60>
 800d44a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d44e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d452:	463a      	mov	r2, r7
 800d454:	4640      	mov	r0, r8
 800d456:	4798      	blx	r3
 800d458:	6923      	ldr	r3, [r4, #16]
 800d45a:	3b01      	subs	r3, #1
 800d45c:	6123      	str	r3, [r4, #16]
 800d45e:	e6ec      	b.n	800d23a <_scanf_float+0x7a>
 800d460:	1e6b      	subs	r3, r5, #1
 800d462:	2b06      	cmp	r3, #6
 800d464:	d825      	bhi.n	800d4b2 <_scanf_float+0x2f2>
 800d466:	2d02      	cmp	r5, #2
 800d468:	d836      	bhi.n	800d4d8 <_scanf_float+0x318>
 800d46a:	455e      	cmp	r6, fp
 800d46c:	f67f aee8 	bls.w	800d240 <_scanf_float+0x80>
 800d470:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d474:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d478:	463a      	mov	r2, r7
 800d47a:	4640      	mov	r0, r8
 800d47c:	4798      	blx	r3
 800d47e:	6923      	ldr	r3, [r4, #16]
 800d480:	3b01      	subs	r3, #1
 800d482:	6123      	str	r3, [r4, #16]
 800d484:	e7f1      	b.n	800d46a <_scanf_float+0x2aa>
 800d486:	9802      	ldr	r0, [sp, #8]
 800d488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d48c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d490:	9002      	str	r0, [sp, #8]
 800d492:	463a      	mov	r2, r7
 800d494:	4640      	mov	r0, r8
 800d496:	4798      	blx	r3
 800d498:	6923      	ldr	r3, [r4, #16]
 800d49a:	3b01      	subs	r3, #1
 800d49c:	6123      	str	r3, [r4, #16]
 800d49e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4a2:	fa5f fa8a 	uxtb.w	sl, sl
 800d4a6:	f1ba 0f02 	cmp.w	sl, #2
 800d4aa:	d1ec      	bne.n	800d486 <_scanf_float+0x2c6>
 800d4ac:	3d03      	subs	r5, #3
 800d4ae:	b2ed      	uxtb	r5, r5
 800d4b0:	1b76      	subs	r6, r6, r5
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	05da      	lsls	r2, r3, #23
 800d4b6:	d52f      	bpl.n	800d518 <_scanf_float+0x358>
 800d4b8:	055b      	lsls	r3, r3, #21
 800d4ba:	d510      	bpl.n	800d4de <_scanf_float+0x31e>
 800d4bc:	455e      	cmp	r6, fp
 800d4be:	f67f aebf 	bls.w	800d240 <_scanf_float+0x80>
 800d4c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d4ca:	463a      	mov	r2, r7
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	4798      	blx	r3
 800d4d0:	6923      	ldr	r3, [r4, #16]
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	6123      	str	r3, [r4, #16]
 800d4d6:	e7f1      	b.n	800d4bc <_scanf_float+0x2fc>
 800d4d8:	46aa      	mov	sl, r5
 800d4da:	9602      	str	r6, [sp, #8]
 800d4dc:	e7df      	b.n	800d49e <_scanf_float+0x2de>
 800d4de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d4e2:	6923      	ldr	r3, [r4, #16]
 800d4e4:	2965      	cmp	r1, #101	; 0x65
 800d4e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d4ea:	f106 35ff 	add.w	r5, r6, #4294967295
 800d4ee:	6123      	str	r3, [r4, #16]
 800d4f0:	d00c      	beq.n	800d50c <_scanf_float+0x34c>
 800d4f2:	2945      	cmp	r1, #69	; 0x45
 800d4f4:	d00a      	beq.n	800d50c <_scanf_float+0x34c>
 800d4f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d4fa:	463a      	mov	r2, r7
 800d4fc:	4640      	mov	r0, r8
 800d4fe:	4798      	blx	r3
 800d500:	6923      	ldr	r3, [r4, #16]
 800d502:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d506:	3b01      	subs	r3, #1
 800d508:	1eb5      	subs	r5, r6, #2
 800d50a:	6123      	str	r3, [r4, #16]
 800d50c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d510:	463a      	mov	r2, r7
 800d512:	4640      	mov	r0, r8
 800d514:	4798      	blx	r3
 800d516:	462e      	mov	r6, r5
 800d518:	6825      	ldr	r5, [r4, #0]
 800d51a:	f015 0510 	ands.w	r5, r5, #16
 800d51e:	d158      	bne.n	800d5d2 <_scanf_float+0x412>
 800d520:	7035      	strb	r5, [r6, #0]
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d52c:	d11c      	bne.n	800d568 <_scanf_float+0x3a8>
 800d52e:	9b01      	ldr	r3, [sp, #4]
 800d530:	454b      	cmp	r3, r9
 800d532:	eba3 0209 	sub.w	r2, r3, r9
 800d536:	d124      	bne.n	800d582 <_scanf_float+0x3c2>
 800d538:	2200      	movs	r2, #0
 800d53a:	4659      	mov	r1, fp
 800d53c:	4640      	mov	r0, r8
 800d53e:	f002 fd1f 	bl	800ff80 <_strtod_r>
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	6821      	ldr	r1, [r4, #0]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	f011 0f02 	tst.w	r1, #2
 800d54c:	ec57 6b10 	vmov	r6, r7, d0
 800d550:	f103 0204 	add.w	r2, r3, #4
 800d554:	d020      	beq.n	800d598 <_scanf_float+0x3d8>
 800d556:	9903      	ldr	r1, [sp, #12]
 800d558:	600a      	str	r2, [r1, #0]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	e9c3 6700 	strd	r6, r7, [r3]
 800d560:	68e3      	ldr	r3, [r4, #12]
 800d562:	3301      	adds	r3, #1
 800d564:	60e3      	str	r3, [r4, #12]
 800d566:	e66c      	b.n	800d242 <_scanf_float+0x82>
 800d568:	9b04      	ldr	r3, [sp, #16]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0e4      	beq.n	800d538 <_scanf_float+0x378>
 800d56e:	9905      	ldr	r1, [sp, #20]
 800d570:	230a      	movs	r3, #10
 800d572:	462a      	mov	r2, r5
 800d574:	3101      	adds	r1, #1
 800d576:	4640      	mov	r0, r8
 800d578:	f002 fd8a 	bl	8010090 <_strtol_r>
 800d57c:	9b04      	ldr	r3, [sp, #16]
 800d57e:	9e05      	ldr	r6, [sp, #20]
 800d580:	1ac2      	subs	r2, r0, r3
 800d582:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d586:	429e      	cmp	r6, r3
 800d588:	bf28      	it	cs
 800d58a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d58e:	4912      	ldr	r1, [pc, #72]	; (800d5d8 <_scanf_float+0x418>)
 800d590:	4630      	mov	r0, r6
 800d592:	f000 f943 	bl	800d81c <siprintf>
 800d596:	e7cf      	b.n	800d538 <_scanf_float+0x378>
 800d598:	f011 0f04 	tst.w	r1, #4
 800d59c:	9903      	ldr	r1, [sp, #12]
 800d59e:	600a      	str	r2, [r1, #0]
 800d5a0:	d1db      	bne.n	800d55a <_scanf_float+0x39a>
 800d5a2:	f8d3 8000 	ldr.w	r8, [r3]
 800d5a6:	ee10 2a10 	vmov	r2, s0
 800d5aa:	ee10 0a10 	vmov	r0, s0
 800d5ae:	463b      	mov	r3, r7
 800d5b0:	4639      	mov	r1, r7
 800d5b2:	f7f3 fabb 	bl	8000b2c <__aeabi_dcmpun>
 800d5b6:	b128      	cbz	r0, 800d5c4 <_scanf_float+0x404>
 800d5b8:	4808      	ldr	r0, [pc, #32]	; (800d5dc <_scanf_float+0x41c>)
 800d5ba:	f000 faa5 	bl	800db08 <nanf>
 800d5be:	ed88 0a00 	vstr	s0, [r8]
 800d5c2:	e7cd      	b.n	800d560 <_scanf_float+0x3a0>
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	4639      	mov	r1, r7
 800d5c8:	f7f3 fb0e 	bl	8000be8 <__aeabi_d2f>
 800d5cc:	f8c8 0000 	str.w	r0, [r8]
 800d5d0:	e7c6      	b.n	800d560 <_scanf_float+0x3a0>
 800d5d2:	2500      	movs	r5, #0
 800d5d4:	e635      	b.n	800d242 <_scanf_float+0x82>
 800d5d6:	bf00      	nop
 800d5d8:	080120f8 	.word	0x080120f8
 800d5dc:	0801248d 	.word	0x0801248d

0800d5e0 <std>:
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	b510      	push	{r4, lr}
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	e9c0 3300 	strd	r3, r3, [r0]
 800d5ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5ee:	6083      	str	r3, [r0, #8]
 800d5f0:	8181      	strh	r1, [r0, #12]
 800d5f2:	6643      	str	r3, [r0, #100]	; 0x64
 800d5f4:	81c2      	strh	r2, [r0, #14]
 800d5f6:	6183      	str	r3, [r0, #24]
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	2208      	movs	r2, #8
 800d5fc:	305c      	adds	r0, #92	; 0x5c
 800d5fe:	f000 fa05 	bl	800da0c <memset>
 800d602:	4b05      	ldr	r3, [pc, #20]	; (800d618 <std+0x38>)
 800d604:	6263      	str	r3, [r4, #36]	; 0x24
 800d606:	4b05      	ldr	r3, [pc, #20]	; (800d61c <std+0x3c>)
 800d608:	62a3      	str	r3, [r4, #40]	; 0x28
 800d60a:	4b05      	ldr	r3, [pc, #20]	; (800d620 <std+0x40>)
 800d60c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d60e:	4b05      	ldr	r3, [pc, #20]	; (800d624 <std+0x44>)
 800d610:	6224      	str	r4, [r4, #32]
 800d612:	6323      	str	r3, [r4, #48]	; 0x30
 800d614:	bd10      	pop	{r4, pc}
 800d616:	bf00      	nop
 800d618:	0800d85d 	.word	0x0800d85d
 800d61c:	0800d87f 	.word	0x0800d87f
 800d620:	0800d8b7 	.word	0x0800d8b7
 800d624:	0800d8db 	.word	0x0800d8db

0800d628 <stdio_exit_handler>:
 800d628:	4a02      	ldr	r2, [pc, #8]	; (800d634 <stdio_exit_handler+0xc>)
 800d62a:	4903      	ldr	r1, [pc, #12]	; (800d638 <stdio_exit_handler+0x10>)
 800d62c:	4803      	ldr	r0, [pc, #12]	; (800d63c <stdio_exit_handler+0x14>)
 800d62e:	f000 b869 	b.w	800d704 <_fwalk_sglue>
 800d632:	bf00      	nop
 800d634:	20000024 	.word	0x20000024
 800d638:	080106d9 	.word	0x080106d9
 800d63c:	20000030 	.word	0x20000030

0800d640 <cleanup_stdio>:
 800d640:	6841      	ldr	r1, [r0, #4]
 800d642:	4b0c      	ldr	r3, [pc, #48]	; (800d674 <cleanup_stdio+0x34>)
 800d644:	4299      	cmp	r1, r3
 800d646:	b510      	push	{r4, lr}
 800d648:	4604      	mov	r4, r0
 800d64a:	d001      	beq.n	800d650 <cleanup_stdio+0x10>
 800d64c:	f003 f844 	bl	80106d8 <_fflush_r>
 800d650:	68a1      	ldr	r1, [r4, #8]
 800d652:	4b09      	ldr	r3, [pc, #36]	; (800d678 <cleanup_stdio+0x38>)
 800d654:	4299      	cmp	r1, r3
 800d656:	d002      	beq.n	800d65e <cleanup_stdio+0x1e>
 800d658:	4620      	mov	r0, r4
 800d65a:	f003 f83d 	bl	80106d8 <_fflush_r>
 800d65e:	68e1      	ldr	r1, [r4, #12]
 800d660:	4b06      	ldr	r3, [pc, #24]	; (800d67c <cleanup_stdio+0x3c>)
 800d662:	4299      	cmp	r1, r3
 800d664:	d004      	beq.n	800d670 <cleanup_stdio+0x30>
 800d666:	4620      	mov	r0, r4
 800d668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d66c:	f003 b834 	b.w	80106d8 <_fflush_r>
 800d670:	bd10      	pop	{r4, pc}
 800d672:	bf00      	nop
 800d674:	20002830 	.word	0x20002830
 800d678:	20002898 	.word	0x20002898
 800d67c:	20002900 	.word	0x20002900

0800d680 <global_stdio_init.part.0>:
 800d680:	b510      	push	{r4, lr}
 800d682:	4b0b      	ldr	r3, [pc, #44]	; (800d6b0 <global_stdio_init.part.0+0x30>)
 800d684:	4c0b      	ldr	r4, [pc, #44]	; (800d6b4 <global_stdio_init.part.0+0x34>)
 800d686:	4a0c      	ldr	r2, [pc, #48]	; (800d6b8 <global_stdio_init.part.0+0x38>)
 800d688:	601a      	str	r2, [r3, #0]
 800d68a:	4620      	mov	r0, r4
 800d68c:	2200      	movs	r2, #0
 800d68e:	2104      	movs	r1, #4
 800d690:	f7ff ffa6 	bl	800d5e0 <std>
 800d694:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d698:	2201      	movs	r2, #1
 800d69a:	2109      	movs	r1, #9
 800d69c:	f7ff ffa0 	bl	800d5e0 <std>
 800d6a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d6a4:	2202      	movs	r2, #2
 800d6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6aa:	2112      	movs	r1, #18
 800d6ac:	f7ff bf98 	b.w	800d5e0 <std>
 800d6b0:	20002968 	.word	0x20002968
 800d6b4:	20002830 	.word	0x20002830
 800d6b8:	0800d629 	.word	0x0800d629

0800d6bc <__sfp_lock_acquire>:
 800d6bc:	4801      	ldr	r0, [pc, #4]	; (800d6c4 <__sfp_lock_acquire+0x8>)
 800d6be:	f000 ba21 	b.w	800db04 <__retarget_lock_acquire_recursive>
 800d6c2:	bf00      	nop
 800d6c4:	20002971 	.word	0x20002971

0800d6c8 <__sfp_lock_release>:
 800d6c8:	4801      	ldr	r0, [pc, #4]	; (800d6d0 <__sfp_lock_release+0x8>)
 800d6ca:	f000 ba1c 	b.w	800db06 <__retarget_lock_release_recursive>
 800d6ce:	bf00      	nop
 800d6d0:	20002971 	.word	0x20002971

0800d6d4 <__sinit>:
 800d6d4:	b510      	push	{r4, lr}
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	f7ff fff0 	bl	800d6bc <__sfp_lock_acquire>
 800d6dc:	6a23      	ldr	r3, [r4, #32]
 800d6de:	b11b      	cbz	r3, 800d6e8 <__sinit+0x14>
 800d6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6e4:	f7ff bff0 	b.w	800d6c8 <__sfp_lock_release>
 800d6e8:	4b04      	ldr	r3, [pc, #16]	; (800d6fc <__sinit+0x28>)
 800d6ea:	6223      	str	r3, [r4, #32]
 800d6ec:	4b04      	ldr	r3, [pc, #16]	; (800d700 <__sinit+0x2c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1f5      	bne.n	800d6e0 <__sinit+0xc>
 800d6f4:	f7ff ffc4 	bl	800d680 <global_stdio_init.part.0>
 800d6f8:	e7f2      	b.n	800d6e0 <__sinit+0xc>
 800d6fa:	bf00      	nop
 800d6fc:	0800d641 	.word	0x0800d641
 800d700:	20002968 	.word	0x20002968

0800d704 <_fwalk_sglue>:
 800d704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d708:	4607      	mov	r7, r0
 800d70a:	4688      	mov	r8, r1
 800d70c:	4614      	mov	r4, r2
 800d70e:	2600      	movs	r6, #0
 800d710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d714:	f1b9 0901 	subs.w	r9, r9, #1
 800d718:	d505      	bpl.n	800d726 <_fwalk_sglue+0x22>
 800d71a:	6824      	ldr	r4, [r4, #0]
 800d71c:	2c00      	cmp	r4, #0
 800d71e:	d1f7      	bne.n	800d710 <_fwalk_sglue+0xc>
 800d720:	4630      	mov	r0, r6
 800d722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d726:	89ab      	ldrh	r3, [r5, #12]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d907      	bls.n	800d73c <_fwalk_sglue+0x38>
 800d72c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d730:	3301      	adds	r3, #1
 800d732:	d003      	beq.n	800d73c <_fwalk_sglue+0x38>
 800d734:	4629      	mov	r1, r5
 800d736:	4638      	mov	r0, r7
 800d738:	47c0      	blx	r8
 800d73a:	4306      	orrs	r6, r0
 800d73c:	3568      	adds	r5, #104	; 0x68
 800d73e:	e7e9      	b.n	800d714 <_fwalk_sglue+0x10>

0800d740 <iprintf>:
 800d740:	b40f      	push	{r0, r1, r2, r3}
 800d742:	b507      	push	{r0, r1, r2, lr}
 800d744:	4906      	ldr	r1, [pc, #24]	; (800d760 <iprintf+0x20>)
 800d746:	ab04      	add	r3, sp, #16
 800d748:	6808      	ldr	r0, [r1, #0]
 800d74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d74e:	6881      	ldr	r1, [r0, #8]
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	f002 fe21 	bl	8010398 <_vfiprintf_r>
 800d756:	b003      	add	sp, #12
 800d758:	f85d eb04 	ldr.w	lr, [sp], #4
 800d75c:	b004      	add	sp, #16
 800d75e:	4770      	bx	lr
 800d760:	2000007c 	.word	0x2000007c

0800d764 <_puts_r>:
 800d764:	6a03      	ldr	r3, [r0, #32]
 800d766:	b570      	push	{r4, r5, r6, lr}
 800d768:	6884      	ldr	r4, [r0, #8]
 800d76a:	4605      	mov	r5, r0
 800d76c:	460e      	mov	r6, r1
 800d76e:	b90b      	cbnz	r3, 800d774 <_puts_r+0x10>
 800d770:	f7ff ffb0 	bl	800d6d4 <__sinit>
 800d774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d776:	07db      	lsls	r3, r3, #31
 800d778:	d405      	bmi.n	800d786 <_puts_r+0x22>
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	0598      	lsls	r0, r3, #22
 800d77e:	d402      	bmi.n	800d786 <_puts_r+0x22>
 800d780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d782:	f000 f9bf 	bl	800db04 <__retarget_lock_acquire_recursive>
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	0719      	lsls	r1, r3, #28
 800d78a:	d513      	bpl.n	800d7b4 <_puts_r+0x50>
 800d78c:	6923      	ldr	r3, [r4, #16]
 800d78e:	b18b      	cbz	r3, 800d7b4 <_puts_r+0x50>
 800d790:	3e01      	subs	r6, #1
 800d792:	68a3      	ldr	r3, [r4, #8]
 800d794:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d798:	3b01      	subs	r3, #1
 800d79a:	60a3      	str	r3, [r4, #8]
 800d79c:	b9e9      	cbnz	r1, 800d7da <_puts_r+0x76>
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	da2e      	bge.n	800d800 <_puts_r+0x9c>
 800d7a2:	4622      	mov	r2, r4
 800d7a4:	210a      	movs	r1, #10
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f000 f89b 	bl	800d8e2 <__swbuf_r>
 800d7ac:	3001      	adds	r0, #1
 800d7ae:	d007      	beq.n	800d7c0 <_puts_r+0x5c>
 800d7b0:	250a      	movs	r5, #10
 800d7b2:	e007      	b.n	800d7c4 <_puts_r+0x60>
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	f000 f8d0 	bl	800d95c <__swsetup_r>
 800d7bc:	2800      	cmp	r0, #0
 800d7be:	d0e7      	beq.n	800d790 <_puts_r+0x2c>
 800d7c0:	f04f 35ff 	mov.w	r5, #4294967295
 800d7c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7c6:	07da      	lsls	r2, r3, #31
 800d7c8:	d405      	bmi.n	800d7d6 <_puts_r+0x72>
 800d7ca:	89a3      	ldrh	r3, [r4, #12]
 800d7cc:	059b      	lsls	r3, r3, #22
 800d7ce:	d402      	bmi.n	800d7d6 <_puts_r+0x72>
 800d7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7d2:	f000 f998 	bl	800db06 <__retarget_lock_release_recursive>
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	bd70      	pop	{r4, r5, r6, pc}
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	da04      	bge.n	800d7e8 <_puts_r+0x84>
 800d7de:	69a2      	ldr	r2, [r4, #24]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	dc06      	bgt.n	800d7f2 <_puts_r+0x8e>
 800d7e4:	290a      	cmp	r1, #10
 800d7e6:	d004      	beq.n	800d7f2 <_puts_r+0x8e>
 800d7e8:	6823      	ldr	r3, [r4, #0]
 800d7ea:	1c5a      	adds	r2, r3, #1
 800d7ec:	6022      	str	r2, [r4, #0]
 800d7ee:	7019      	strb	r1, [r3, #0]
 800d7f0:	e7cf      	b.n	800d792 <_puts_r+0x2e>
 800d7f2:	4622      	mov	r2, r4
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f000 f874 	bl	800d8e2 <__swbuf_r>
 800d7fa:	3001      	adds	r0, #1
 800d7fc:	d1c9      	bne.n	800d792 <_puts_r+0x2e>
 800d7fe:	e7df      	b.n	800d7c0 <_puts_r+0x5c>
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	250a      	movs	r5, #10
 800d804:	1c5a      	adds	r2, r3, #1
 800d806:	6022      	str	r2, [r4, #0]
 800d808:	701d      	strb	r5, [r3, #0]
 800d80a:	e7db      	b.n	800d7c4 <_puts_r+0x60>

0800d80c <puts>:
 800d80c:	4b02      	ldr	r3, [pc, #8]	; (800d818 <puts+0xc>)
 800d80e:	4601      	mov	r1, r0
 800d810:	6818      	ldr	r0, [r3, #0]
 800d812:	f7ff bfa7 	b.w	800d764 <_puts_r>
 800d816:	bf00      	nop
 800d818:	2000007c 	.word	0x2000007c

0800d81c <siprintf>:
 800d81c:	b40e      	push	{r1, r2, r3}
 800d81e:	b500      	push	{lr}
 800d820:	b09c      	sub	sp, #112	; 0x70
 800d822:	ab1d      	add	r3, sp, #116	; 0x74
 800d824:	9002      	str	r0, [sp, #8]
 800d826:	9006      	str	r0, [sp, #24]
 800d828:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d82c:	4809      	ldr	r0, [pc, #36]	; (800d854 <siprintf+0x38>)
 800d82e:	9107      	str	r1, [sp, #28]
 800d830:	9104      	str	r1, [sp, #16]
 800d832:	4909      	ldr	r1, [pc, #36]	; (800d858 <siprintf+0x3c>)
 800d834:	f853 2b04 	ldr.w	r2, [r3], #4
 800d838:	9105      	str	r1, [sp, #20]
 800d83a:	6800      	ldr	r0, [r0, #0]
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	a902      	add	r1, sp, #8
 800d840:	f002 fc82 	bl	8010148 <_svfiprintf_r>
 800d844:	9b02      	ldr	r3, [sp, #8]
 800d846:	2200      	movs	r2, #0
 800d848:	701a      	strb	r2, [r3, #0]
 800d84a:	b01c      	add	sp, #112	; 0x70
 800d84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d850:	b003      	add	sp, #12
 800d852:	4770      	bx	lr
 800d854:	2000007c 	.word	0x2000007c
 800d858:	ffff0208 	.word	0xffff0208

0800d85c <__sread>:
 800d85c:	b510      	push	{r4, lr}
 800d85e:	460c      	mov	r4, r1
 800d860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d864:	f000 f900 	bl	800da68 <_read_r>
 800d868:	2800      	cmp	r0, #0
 800d86a:	bfab      	itete	ge
 800d86c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d86e:	89a3      	ldrhlt	r3, [r4, #12]
 800d870:	181b      	addge	r3, r3, r0
 800d872:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d876:	bfac      	ite	ge
 800d878:	6563      	strge	r3, [r4, #84]	; 0x54
 800d87a:	81a3      	strhlt	r3, [r4, #12]
 800d87c:	bd10      	pop	{r4, pc}

0800d87e <__swrite>:
 800d87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d882:	461f      	mov	r7, r3
 800d884:	898b      	ldrh	r3, [r1, #12]
 800d886:	05db      	lsls	r3, r3, #23
 800d888:	4605      	mov	r5, r0
 800d88a:	460c      	mov	r4, r1
 800d88c:	4616      	mov	r6, r2
 800d88e:	d505      	bpl.n	800d89c <__swrite+0x1e>
 800d890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d894:	2302      	movs	r3, #2
 800d896:	2200      	movs	r2, #0
 800d898:	f000 f8d4 	bl	800da44 <_lseek_r>
 800d89c:	89a3      	ldrh	r3, [r4, #12]
 800d89e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8a6:	81a3      	strh	r3, [r4, #12]
 800d8a8:	4632      	mov	r2, r6
 800d8aa:	463b      	mov	r3, r7
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b2:	f000 b8eb 	b.w	800da8c <_write_r>

0800d8b6 <__sseek>:
 800d8b6:	b510      	push	{r4, lr}
 800d8b8:	460c      	mov	r4, r1
 800d8ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8be:	f000 f8c1 	bl	800da44 <_lseek_r>
 800d8c2:	1c43      	adds	r3, r0, #1
 800d8c4:	89a3      	ldrh	r3, [r4, #12]
 800d8c6:	bf15      	itete	ne
 800d8c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8d2:	81a3      	strheq	r3, [r4, #12]
 800d8d4:	bf18      	it	ne
 800d8d6:	81a3      	strhne	r3, [r4, #12]
 800d8d8:	bd10      	pop	{r4, pc}

0800d8da <__sclose>:
 800d8da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8de:	f000 b8a1 	b.w	800da24 <_close_r>

0800d8e2 <__swbuf_r>:
 800d8e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e4:	460e      	mov	r6, r1
 800d8e6:	4614      	mov	r4, r2
 800d8e8:	4605      	mov	r5, r0
 800d8ea:	b118      	cbz	r0, 800d8f4 <__swbuf_r+0x12>
 800d8ec:	6a03      	ldr	r3, [r0, #32]
 800d8ee:	b90b      	cbnz	r3, 800d8f4 <__swbuf_r+0x12>
 800d8f0:	f7ff fef0 	bl	800d6d4 <__sinit>
 800d8f4:	69a3      	ldr	r3, [r4, #24]
 800d8f6:	60a3      	str	r3, [r4, #8]
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	071a      	lsls	r2, r3, #28
 800d8fc:	d525      	bpl.n	800d94a <__swbuf_r+0x68>
 800d8fe:	6923      	ldr	r3, [r4, #16]
 800d900:	b31b      	cbz	r3, 800d94a <__swbuf_r+0x68>
 800d902:	6823      	ldr	r3, [r4, #0]
 800d904:	6922      	ldr	r2, [r4, #16]
 800d906:	1a98      	subs	r0, r3, r2
 800d908:	6963      	ldr	r3, [r4, #20]
 800d90a:	b2f6      	uxtb	r6, r6
 800d90c:	4283      	cmp	r3, r0
 800d90e:	4637      	mov	r7, r6
 800d910:	dc04      	bgt.n	800d91c <__swbuf_r+0x3a>
 800d912:	4621      	mov	r1, r4
 800d914:	4628      	mov	r0, r5
 800d916:	f002 fedf 	bl	80106d8 <_fflush_r>
 800d91a:	b9e0      	cbnz	r0, 800d956 <__swbuf_r+0x74>
 800d91c:	68a3      	ldr	r3, [r4, #8]
 800d91e:	3b01      	subs	r3, #1
 800d920:	60a3      	str	r3, [r4, #8]
 800d922:	6823      	ldr	r3, [r4, #0]
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	6022      	str	r2, [r4, #0]
 800d928:	701e      	strb	r6, [r3, #0]
 800d92a:	6962      	ldr	r2, [r4, #20]
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	429a      	cmp	r2, r3
 800d930:	d004      	beq.n	800d93c <__swbuf_r+0x5a>
 800d932:	89a3      	ldrh	r3, [r4, #12]
 800d934:	07db      	lsls	r3, r3, #31
 800d936:	d506      	bpl.n	800d946 <__swbuf_r+0x64>
 800d938:	2e0a      	cmp	r6, #10
 800d93a:	d104      	bne.n	800d946 <__swbuf_r+0x64>
 800d93c:	4621      	mov	r1, r4
 800d93e:	4628      	mov	r0, r5
 800d940:	f002 feca 	bl	80106d8 <_fflush_r>
 800d944:	b938      	cbnz	r0, 800d956 <__swbuf_r+0x74>
 800d946:	4638      	mov	r0, r7
 800d948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d94a:	4621      	mov	r1, r4
 800d94c:	4628      	mov	r0, r5
 800d94e:	f000 f805 	bl	800d95c <__swsetup_r>
 800d952:	2800      	cmp	r0, #0
 800d954:	d0d5      	beq.n	800d902 <__swbuf_r+0x20>
 800d956:	f04f 37ff 	mov.w	r7, #4294967295
 800d95a:	e7f4      	b.n	800d946 <__swbuf_r+0x64>

0800d95c <__swsetup_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	4b2a      	ldr	r3, [pc, #168]	; (800da08 <__swsetup_r+0xac>)
 800d960:	4605      	mov	r5, r0
 800d962:	6818      	ldr	r0, [r3, #0]
 800d964:	460c      	mov	r4, r1
 800d966:	b118      	cbz	r0, 800d970 <__swsetup_r+0x14>
 800d968:	6a03      	ldr	r3, [r0, #32]
 800d96a:	b90b      	cbnz	r3, 800d970 <__swsetup_r+0x14>
 800d96c:	f7ff feb2 	bl	800d6d4 <__sinit>
 800d970:	89a3      	ldrh	r3, [r4, #12]
 800d972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d976:	0718      	lsls	r0, r3, #28
 800d978:	d422      	bmi.n	800d9c0 <__swsetup_r+0x64>
 800d97a:	06d9      	lsls	r1, r3, #27
 800d97c:	d407      	bmi.n	800d98e <__swsetup_r+0x32>
 800d97e:	2309      	movs	r3, #9
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d986:	81a3      	strh	r3, [r4, #12]
 800d988:	f04f 30ff 	mov.w	r0, #4294967295
 800d98c:	e034      	b.n	800d9f8 <__swsetup_r+0x9c>
 800d98e:	0758      	lsls	r0, r3, #29
 800d990:	d512      	bpl.n	800d9b8 <__swsetup_r+0x5c>
 800d992:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d994:	b141      	cbz	r1, 800d9a8 <__swsetup_r+0x4c>
 800d996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d99a:	4299      	cmp	r1, r3
 800d99c:	d002      	beq.n	800d9a4 <__swsetup_r+0x48>
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f000 ff34 	bl	800e80c <_free_r>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	6363      	str	r3, [r4, #52]	; 0x34
 800d9a8:	89a3      	ldrh	r3, [r4, #12]
 800d9aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9ae:	81a3      	strh	r3, [r4, #12]
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	6063      	str	r3, [r4, #4]
 800d9b4:	6923      	ldr	r3, [r4, #16]
 800d9b6:	6023      	str	r3, [r4, #0]
 800d9b8:	89a3      	ldrh	r3, [r4, #12]
 800d9ba:	f043 0308 	orr.w	r3, r3, #8
 800d9be:	81a3      	strh	r3, [r4, #12]
 800d9c0:	6923      	ldr	r3, [r4, #16]
 800d9c2:	b94b      	cbnz	r3, 800d9d8 <__swsetup_r+0x7c>
 800d9c4:	89a3      	ldrh	r3, [r4, #12]
 800d9c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d9ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9ce:	d003      	beq.n	800d9d8 <__swsetup_r+0x7c>
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	f002 fece 	bl	8010774 <__smakebuf_r>
 800d9d8:	89a0      	ldrh	r0, [r4, #12]
 800d9da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9de:	f010 0301 	ands.w	r3, r0, #1
 800d9e2:	d00a      	beq.n	800d9fa <__swsetup_r+0x9e>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	60a3      	str	r3, [r4, #8]
 800d9e8:	6963      	ldr	r3, [r4, #20]
 800d9ea:	425b      	negs	r3, r3
 800d9ec:	61a3      	str	r3, [r4, #24]
 800d9ee:	6923      	ldr	r3, [r4, #16]
 800d9f0:	b943      	cbnz	r3, 800da04 <__swsetup_r+0xa8>
 800d9f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d9f6:	d1c4      	bne.n	800d982 <__swsetup_r+0x26>
 800d9f8:	bd38      	pop	{r3, r4, r5, pc}
 800d9fa:	0781      	lsls	r1, r0, #30
 800d9fc:	bf58      	it	pl
 800d9fe:	6963      	ldrpl	r3, [r4, #20]
 800da00:	60a3      	str	r3, [r4, #8]
 800da02:	e7f4      	b.n	800d9ee <__swsetup_r+0x92>
 800da04:	2000      	movs	r0, #0
 800da06:	e7f7      	b.n	800d9f8 <__swsetup_r+0x9c>
 800da08:	2000007c 	.word	0x2000007c

0800da0c <memset>:
 800da0c:	4402      	add	r2, r0
 800da0e:	4603      	mov	r3, r0
 800da10:	4293      	cmp	r3, r2
 800da12:	d100      	bne.n	800da16 <memset+0xa>
 800da14:	4770      	bx	lr
 800da16:	f803 1b01 	strb.w	r1, [r3], #1
 800da1a:	e7f9      	b.n	800da10 <memset+0x4>

0800da1c <_localeconv_r>:
 800da1c:	4800      	ldr	r0, [pc, #0]	; (800da20 <_localeconv_r+0x4>)
 800da1e:	4770      	bx	lr
 800da20:	20000170 	.word	0x20000170

0800da24 <_close_r>:
 800da24:	b538      	push	{r3, r4, r5, lr}
 800da26:	4d06      	ldr	r5, [pc, #24]	; (800da40 <_close_r+0x1c>)
 800da28:	2300      	movs	r3, #0
 800da2a:	4604      	mov	r4, r0
 800da2c:	4608      	mov	r0, r1
 800da2e:	602b      	str	r3, [r5, #0]
 800da30:	f7f6 fa18 	bl	8003e64 <_close>
 800da34:	1c43      	adds	r3, r0, #1
 800da36:	d102      	bne.n	800da3e <_close_r+0x1a>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	b103      	cbz	r3, 800da3e <_close_r+0x1a>
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	bd38      	pop	{r3, r4, r5, pc}
 800da40:	2000296c 	.word	0x2000296c

0800da44 <_lseek_r>:
 800da44:	b538      	push	{r3, r4, r5, lr}
 800da46:	4d07      	ldr	r5, [pc, #28]	; (800da64 <_lseek_r+0x20>)
 800da48:	4604      	mov	r4, r0
 800da4a:	4608      	mov	r0, r1
 800da4c:	4611      	mov	r1, r2
 800da4e:	2200      	movs	r2, #0
 800da50:	602a      	str	r2, [r5, #0]
 800da52:	461a      	mov	r2, r3
 800da54:	f7f6 fa2d 	bl	8003eb2 <_lseek>
 800da58:	1c43      	adds	r3, r0, #1
 800da5a:	d102      	bne.n	800da62 <_lseek_r+0x1e>
 800da5c:	682b      	ldr	r3, [r5, #0]
 800da5e:	b103      	cbz	r3, 800da62 <_lseek_r+0x1e>
 800da60:	6023      	str	r3, [r4, #0]
 800da62:	bd38      	pop	{r3, r4, r5, pc}
 800da64:	2000296c 	.word	0x2000296c

0800da68 <_read_r>:
 800da68:	b538      	push	{r3, r4, r5, lr}
 800da6a:	4d07      	ldr	r5, [pc, #28]	; (800da88 <_read_r+0x20>)
 800da6c:	4604      	mov	r4, r0
 800da6e:	4608      	mov	r0, r1
 800da70:	4611      	mov	r1, r2
 800da72:	2200      	movs	r2, #0
 800da74:	602a      	str	r2, [r5, #0]
 800da76:	461a      	mov	r2, r3
 800da78:	f7f6 f9bb 	bl	8003df2 <_read>
 800da7c:	1c43      	adds	r3, r0, #1
 800da7e:	d102      	bne.n	800da86 <_read_r+0x1e>
 800da80:	682b      	ldr	r3, [r5, #0]
 800da82:	b103      	cbz	r3, 800da86 <_read_r+0x1e>
 800da84:	6023      	str	r3, [r4, #0]
 800da86:	bd38      	pop	{r3, r4, r5, pc}
 800da88:	2000296c 	.word	0x2000296c

0800da8c <_write_r>:
 800da8c:	b538      	push	{r3, r4, r5, lr}
 800da8e:	4d07      	ldr	r5, [pc, #28]	; (800daac <_write_r+0x20>)
 800da90:	4604      	mov	r4, r0
 800da92:	4608      	mov	r0, r1
 800da94:	4611      	mov	r1, r2
 800da96:	2200      	movs	r2, #0
 800da98:	602a      	str	r2, [r5, #0]
 800da9a:	461a      	mov	r2, r3
 800da9c:	f7f6 f9c6 	bl	8003e2c <_write>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	d102      	bne.n	800daaa <_write_r+0x1e>
 800daa4:	682b      	ldr	r3, [r5, #0]
 800daa6:	b103      	cbz	r3, 800daaa <_write_r+0x1e>
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	bd38      	pop	{r3, r4, r5, pc}
 800daac:	2000296c 	.word	0x2000296c

0800dab0 <__errno>:
 800dab0:	4b01      	ldr	r3, [pc, #4]	; (800dab8 <__errno+0x8>)
 800dab2:	6818      	ldr	r0, [r3, #0]
 800dab4:	4770      	bx	lr
 800dab6:	bf00      	nop
 800dab8:	2000007c 	.word	0x2000007c

0800dabc <__libc_init_array>:
 800dabc:	b570      	push	{r4, r5, r6, lr}
 800dabe:	4d0d      	ldr	r5, [pc, #52]	; (800daf4 <__libc_init_array+0x38>)
 800dac0:	4c0d      	ldr	r4, [pc, #52]	; (800daf8 <__libc_init_array+0x3c>)
 800dac2:	1b64      	subs	r4, r4, r5
 800dac4:	10a4      	asrs	r4, r4, #2
 800dac6:	2600      	movs	r6, #0
 800dac8:	42a6      	cmp	r6, r4
 800daca:	d109      	bne.n	800dae0 <__libc_init_array+0x24>
 800dacc:	4d0b      	ldr	r5, [pc, #44]	; (800dafc <__libc_init_array+0x40>)
 800dace:	4c0c      	ldr	r4, [pc, #48]	; (800db00 <__libc_init_array+0x44>)
 800dad0:	f003 ff04 	bl	80118dc <_init>
 800dad4:	1b64      	subs	r4, r4, r5
 800dad6:	10a4      	asrs	r4, r4, #2
 800dad8:	2600      	movs	r6, #0
 800dada:	42a6      	cmp	r6, r4
 800dadc:	d105      	bne.n	800daea <__libc_init_array+0x2e>
 800dade:	bd70      	pop	{r4, r5, r6, pc}
 800dae0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dae4:	4798      	blx	r3
 800dae6:	3601      	adds	r6, #1
 800dae8:	e7ee      	b.n	800dac8 <__libc_init_array+0xc>
 800daea:	f855 3b04 	ldr.w	r3, [r5], #4
 800daee:	4798      	blx	r3
 800daf0:	3601      	adds	r6, #1
 800daf2:	e7f2      	b.n	800dada <__libc_init_array+0x1e>
 800daf4:	08012508 	.word	0x08012508
 800daf8:	08012508 	.word	0x08012508
 800dafc:	08012508 	.word	0x08012508
 800db00:	0801250c 	.word	0x0801250c

0800db04 <__retarget_lock_acquire_recursive>:
 800db04:	4770      	bx	lr

0800db06 <__retarget_lock_release_recursive>:
 800db06:	4770      	bx	lr

0800db08 <nanf>:
 800db08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800db10 <nanf+0x8>
 800db0c:	4770      	bx	lr
 800db0e:	bf00      	nop
 800db10:	7fc00000 	.word	0x7fc00000

0800db14 <quorem>:
 800db14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db18:	6903      	ldr	r3, [r0, #16]
 800db1a:	690c      	ldr	r4, [r1, #16]
 800db1c:	42a3      	cmp	r3, r4
 800db1e:	4607      	mov	r7, r0
 800db20:	db7e      	blt.n	800dc20 <quorem+0x10c>
 800db22:	3c01      	subs	r4, #1
 800db24:	f101 0814 	add.w	r8, r1, #20
 800db28:	f100 0514 	add.w	r5, r0, #20
 800db2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db30:	9301      	str	r3, [sp, #4]
 800db32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db3a:	3301      	adds	r3, #1
 800db3c:	429a      	cmp	r2, r3
 800db3e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800db42:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db46:	fbb2 f6f3 	udiv	r6, r2, r3
 800db4a:	d331      	bcc.n	800dbb0 <quorem+0x9c>
 800db4c:	f04f 0e00 	mov.w	lr, #0
 800db50:	4640      	mov	r0, r8
 800db52:	46ac      	mov	ip, r5
 800db54:	46f2      	mov	sl, lr
 800db56:	f850 2b04 	ldr.w	r2, [r0], #4
 800db5a:	b293      	uxth	r3, r2
 800db5c:	fb06 e303 	mla	r3, r6, r3, lr
 800db60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db64:	0c1a      	lsrs	r2, r3, #16
 800db66:	b29b      	uxth	r3, r3
 800db68:	ebaa 0303 	sub.w	r3, sl, r3
 800db6c:	f8dc a000 	ldr.w	sl, [ip]
 800db70:	fa13 f38a 	uxtah	r3, r3, sl
 800db74:	fb06 220e 	mla	r2, r6, lr, r2
 800db78:	9300      	str	r3, [sp, #0]
 800db7a:	9b00      	ldr	r3, [sp, #0]
 800db7c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800db80:	b292      	uxth	r2, r2
 800db82:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800db86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db8a:	f8bd 3000 	ldrh.w	r3, [sp]
 800db8e:	4581      	cmp	r9, r0
 800db90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db94:	f84c 3b04 	str.w	r3, [ip], #4
 800db98:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800db9c:	d2db      	bcs.n	800db56 <quorem+0x42>
 800db9e:	f855 300b 	ldr.w	r3, [r5, fp]
 800dba2:	b92b      	cbnz	r3, 800dbb0 <quorem+0x9c>
 800dba4:	9b01      	ldr	r3, [sp, #4]
 800dba6:	3b04      	subs	r3, #4
 800dba8:	429d      	cmp	r5, r3
 800dbaa:	461a      	mov	r2, r3
 800dbac:	d32c      	bcc.n	800dc08 <quorem+0xf4>
 800dbae:	613c      	str	r4, [r7, #16]
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f001 f9f1 	bl	800ef98 <__mcmp>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	db22      	blt.n	800dc00 <quorem+0xec>
 800dbba:	3601      	adds	r6, #1
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbc4:	f8d1 c000 	ldr.w	ip, [r1]
 800dbc8:	b293      	uxth	r3, r2
 800dbca:	1ac3      	subs	r3, r0, r3
 800dbcc:	0c12      	lsrs	r2, r2, #16
 800dbce:	fa13 f38c 	uxtah	r3, r3, ip
 800dbd2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800dbd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbe0:	45c1      	cmp	r9, r8
 800dbe2:	f841 3b04 	str.w	r3, [r1], #4
 800dbe6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dbea:	d2e9      	bcs.n	800dbc0 <quorem+0xac>
 800dbec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbf0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbf4:	b922      	cbnz	r2, 800dc00 <quorem+0xec>
 800dbf6:	3b04      	subs	r3, #4
 800dbf8:	429d      	cmp	r5, r3
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	d30a      	bcc.n	800dc14 <quorem+0x100>
 800dbfe:	613c      	str	r4, [r7, #16]
 800dc00:	4630      	mov	r0, r6
 800dc02:	b003      	add	sp, #12
 800dc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc08:	6812      	ldr	r2, [r2, #0]
 800dc0a:	3b04      	subs	r3, #4
 800dc0c:	2a00      	cmp	r2, #0
 800dc0e:	d1ce      	bne.n	800dbae <quorem+0x9a>
 800dc10:	3c01      	subs	r4, #1
 800dc12:	e7c9      	b.n	800dba8 <quorem+0x94>
 800dc14:	6812      	ldr	r2, [r2, #0]
 800dc16:	3b04      	subs	r3, #4
 800dc18:	2a00      	cmp	r2, #0
 800dc1a:	d1f0      	bne.n	800dbfe <quorem+0xea>
 800dc1c:	3c01      	subs	r4, #1
 800dc1e:	e7eb      	b.n	800dbf8 <quorem+0xe4>
 800dc20:	2000      	movs	r0, #0
 800dc22:	e7ee      	b.n	800dc02 <quorem+0xee>
 800dc24:	0000      	movs	r0, r0
	...

0800dc28 <_dtoa_r>:
 800dc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2c:	ed2d 8b04 	vpush	{d8-d9}
 800dc30:	69c5      	ldr	r5, [r0, #28]
 800dc32:	b093      	sub	sp, #76	; 0x4c
 800dc34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dc38:	ec57 6b10 	vmov	r6, r7, d0
 800dc3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dc40:	9107      	str	r1, [sp, #28]
 800dc42:	4604      	mov	r4, r0
 800dc44:	920a      	str	r2, [sp, #40]	; 0x28
 800dc46:	930d      	str	r3, [sp, #52]	; 0x34
 800dc48:	b975      	cbnz	r5, 800dc68 <_dtoa_r+0x40>
 800dc4a:	2010      	movs	r0, #16
 800dc4c:	f000 fe2a 	bl	800e8a4 <malloc>
 800dc50:	4602      	mov	r2, r0
 800dc52:	61e0      	str	r0, [r4, #28]
 800dc54:	b920      	cbnz	r0, 800dc60 <_dtoa_r+0x38>
 800dc56:	4bae      	ldr	r3, [pc, #696]	; (800df10 <_dtoa_r+0x2e8>)
 800dc58:	21ef      	movs	r1, #239	; 0xef
 800dc5a:	48ae      	ldr	r0, [pc, #696]	; (800df14 <_dtoa_r+0x2ec>)
 800dc5c:	f002 fe3c 	bl	80108d8 <__assert_func>
 800dc60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc64:	6005      	str	r5, [r0, #0]
 800dc66:	60c5      	str	r5, [r0, #12]
 800dc68:	69e3      	ldr	r3, [r4, #28]
 800dc6a:	6819      	ldr	r1, [r3, #0]
 800dc6c:	b151      	cbz	r1, 800dc84 <_dtoa_r+0x5c>
 800dc6e:	685a      	ldr	r2, [r3, #4]
 800dc70:	604a      	str	r2, [r1, #4]
 800dc72:	2301      	movs	r3, #1
 800dc74:	4093      	lsls	r3, r2
 800dc76:	608b      	str	r3, [r1, #8]
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f000 ff07 	bl	800ea8c <_Bfree>
 800dc7e:	69e3      	ldr	r3, [r4, #28]
 800dc80:	2200      	movs	r2, #0
 800dc82:	601a      	str	r2, [r3, #0]
 800dc84:	1e3b      	subs	r3, r7, #0
 800dc86:	bfbb      	ittet	lt
 800dc88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dc8c:	9303      	strlt	r3, [sp, #12]
 800dc8e:	2300      	movge	r3, #0
 800dc90:	2201      	movlt	r2, #1
 800dc92:	bfac      	ite	ge
 800dc94:	f8c8 3000 	strge.w	r3, [r8]
 800dc98:	f8c8 2000 	strlt.w	r2, [r8]
 800dc9c:	4b9e      	ldr	r3, [pc, #632]	; (800df18 <_dtoa_r+0x2f0>)
 800dc9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dca2:	ea33 0308 	bics.w	r3, r3, r8
 800dca6:	d11b      	bne.n	800dce0 <_dtoa_r+0xb8>
 800dca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800dcae:	6013      	str	r3, [r2, #0]
 800dcb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800dcb4:	4333      	orrs	r3, r6
 800dcb6:	f000 8593 	beq.w	800e7e0 <_dtoa_r+0xbb8>
 800dcba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcbc:	b963      	cbnz	r3, 800dcd8 <_dtoa_r+0xb0>
 800dcbe:	4b97      	ldr	r3, [pc, #604]	; (800df1c <_dtoa_r+0x2f4>)
 800dcc0:	e027      	b.n	800dd12 <_dtoa_r+0xea>
 800dcc2:	4b97      	ldr	r3, [pc, #604]	; (800df20 <_dtoa_r+0x2f8>)
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	3308      	adds	r3, #8
 800dcc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dcca:	6013      	str	r3, [r2, #0]
 800dccc:	9800      	ldr	r0, [sp, #0]
 800dcce:	b013      	add	sp, #76	; 0x4c
 800dcd0:	ecbd 8b04 	vpop	{d8-d9}
 800dcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd8:	4b90      	ldr	r3, [pc, #576]	; (800df1c <_dtoa_r+0x2f4>)
 800dcda:	9300      	str	r3, [sp, #0]
 800dcdc:	3303      	adds	r3, #3
 800dcde:	e7f3      	b.n	800dcc8 <_dtoa_r+0xa0>
 800dce0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dce4:	2200      	movs	r2, #0
 800dce6:	ec51 0b17 	vmov	r0, r1, d7
 800dcea:	eeb0 8a47 	vmov.f32	s16, s14
 800dcee:	eef0 8a67 	vmov.f32	s17, s15
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	f7f2 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcf8:	4681      	mov	r9, r0
 800dcfa:	b160      	cbz	r0, 800dd16 <_dtoa_r+0xee>
 800dcfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcfe:	2301      	movs	r3, #1
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	f000 8568 	beq.w	800e7da <_dtoa_r+0xbb2>
 800dd0a:	4b86      	ldr	r3, [pc, #536]	; (800df24 <_dtoa_r+0x2fc>)
 800dd0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd0e:	6013      	str	r3, [r2, #0]
 800dd10:	3b01      	subs	r3, #1
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	e7da      	b.n	800dccc <_dtoa_r+0xa4>
 800dd16:	aa10      	add	r2, sp, #64	; 0x40
 800dd18:	a911      	add	r1, sp, #68	; 0x44
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	eeb0 0a48 	vmov.f32	s0, s16
 800dd20:	eef0 0a68 	vmov.f32	s1, s17
 800dd24:	f001 fa4e 	bl	800f1c4 <__d2b>
 800dd28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dd2c:	4682      	mov	sl, r0
 800dd2e:	2d00      	cmp	r5, #0
 800dd30:	d07f      	beq.n	800de32 <_dtoa_r+0x20a>
 800dd32:	ee18 3a90 	vmov	r3, s17
 800dd36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dd3e:	ec51 0b18 	vmov	r0, r1, d8
 800dd42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dd4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800dd4e:	4619      	mov	r1, r3
 800dd50:	2200      	movs	r2, #0
 800dd52:	4b75      	ldr	r3, [pc, #468]	; (800df28 <_dtoa_r+0x300>)
 800dd54:	f7f2 fa98 	bl	8000288 <__aeabi_dsub>
 800dd58:	a367      	add	r3, pc, #412	; (adr r3, 800def8 <_dtoa_r+0x2d0>)
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f7f2 fc4b 	bl	80005f8 <__aeabi_dmul>
 800dd62:	a367      	add	r3, pc, #412	; (adr r3, 800df00 <_dtoa_r+0x2d8>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 fa90 	bl	800028c <__adddf3>
 800dd6c:	4606      	mov	r6, r0
 800dd6e:	4628      	mov	r0, r5
 800dd70:	460f      	mov	r7, r1
 800dd72:	f7f2 fbd7 	bl	8000524 <__aeabi_i2d>
 800dd76:	a364      	add	r3, pc, #400	; (adr r3, 800df08 <_dtoa_r+0x2e0>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	f7f2 fc3c 	bl	80005f8 <__aeabi_dmul>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4630      	mov	r0, r6
 800dd86:	4639      	mov	r1, r7
 800dd88:	f7f2 fa80 	bl	800028c <__adddf3>
 800dd8c:	4606      	mov	r6, r0
 800dd8e:	460f      	mov	r7, r1
 800dd90:	f7f2 fee2 	bl	8000b58 <__aeabi_d2iz>
 800dd94:	2200      	movs	r2, #0
 800dd96:	4683      	mov	fp, r0
 800dd98:	2300      	movs	r3, #0
 800dd9a:	4630      	mov	r0, r6
 800dd9c:	4639      	mov	r1, r7
 800dd9e:	f7f2 fe9d 	bl	8000adc <__aeabi_dcmplt>
 800dda2:	b148      	cbz	r0, 800ddb8 <_dtoa_r+0x190>
 800dda4:	4658      	mov	r0, fp
 800dda6:	f7f2 fbbd 	bl	8000524 <__aeabi_i2d>
 800ddaa:	4632      	mov	r2, r6
 800ddac:	463b      	mov	r3, r7
 800ddae:	f7f2 fe8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddb2:	b908      	cbnz	r0, 800ddb8 <_dtoa_r+0x190>
 800ddb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ddb8:	f1bb 0f16 	cmp.w	fp, #22
 800ddbc:	d857      	bhi.n	800de6e <_dtoa_r+0x246>
 800ddbe:	4b5b      	ldr	r3, [pc, #364]	; (800df2c <_dtoa_r+0x304>)
 800ddc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ddc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc8:	ec51 0b18 	vmov	r0, r1, d8
 800ddcc:	f7f2 fe86 	bl	8000adc <__aeabi_dcmplt>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d04e      	beq.n	800de72 <_dtoa_r+0x24a>
 800ddd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ddd8:	2300      	movs	r3, #0
 800ddda:	930c      	str	r3, [sp, #48]	; 0x30
 800dddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ddde:	1b5b      	subs	r3, r3, r5
 800dde0:	1e5a      	subs	r2, r3, #1
 800dde2:	bf45      	ittet	mi
 800dde4:	f1c3 0301 	rsbmi	r3, r3, #1
 800dde8:	9305      	strmi	r3, [sp, #20]
 800ddea:	2300      	movpl	r3, #0
 800ddec:	2300      	movmi	r3, #0
 800ddee:	9206      	str	r2, [sp, #24]
 800ddf0:	bf54      	ite	pl
 800ddf2:	9305      	strpl	r3, [sp, #20]
 800ddf4:	9306      	strmi	r3, [sp, #24]
 800ddf6:	f1bb 0f00 	cmp.w	fp, #0
 800ddfa:	db3c      	blt.n	800de76 <_dtoa_r+0x24e>
 800ddfc:	9b06      	ldr	r3, [sp, #24]
 800ddfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800de02:	445b      	add	r3, fp
 800de04:	9306      	str	r3, [sp, #24]
 800de06:	2300      	movs	r3, #0
 800de08:	9308      	str	r3, [sp, #32]
 800de0a:	9b07      	ldr	r3, [sp, #28]
 800de0c:	2b09      	cmp	r3, #9
 800de0e:	d868      	bhi.n	800dee2 <_dtoa_r+0x2ba>
 800de10:	2b05      	cmp	r3, #5
 800de12:	bfc4      	itt	gt
 800de14:	3b04      	subgt	r3, #4
 800de16:	9307      	strgt	r3, [sp, #28]
 800de18:	9b07      	ldr	r3, [sp, #28]
 800de1a:	f1a3 0302 	sub.w	r3, r3, #2
 800de1e:	bfcc      	ite	gt
 800de20:	2500      	movgt	r5, #0
 800de22:	2501      	movle	r5, #1
 800de24:	2b03      	cmp	r3, #3
 800de26:	f200 8085 	bhi.w	800df34 <_dtoa_r+0x30c>
 800de2a:	e8df f003 	tbb	[pc, r3]
 800de2e:	3b2e      	.short	0x3b2e
 800de30:	5839      	.short	0x5839
 800de32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800de36:	441d      	add	r5, r3
 800de38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800de3c:	2b20      	cmp	r3, #32
 800de3e:	bfc1      	itttt	gt
 800de40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800de44:	fa08 f803 	lslgt.w	r8, r8, r3
 800de48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800de4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800de50:	bfd6      	itet	le
 800de52:	f1c3 0320 	rsble	r3, r3, #32
 800de56:	ea48 0003 	orrgt.w	r0, r8, r3
 800de5a:	fa06 f003 	lslle.w	r0, r6, r3
 800de5e:	f7f2 fb51 	bl	8000504 <__aeabi_ui2d>
 800de62:	2201      	movs	r2, #1
 800de64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800de68:	3d01      	subs	r5, #1
 800de6a:	920e      	str	r2, [sp, #56]	; 0x38
 800de6c:	e76f      	b.n	800dd4e <_dtoa_r+0x126>
 800de6e:	2301      	movs	r3, #1
 800de70:	e7b3      	b.n	800ddda <_dtoa_r+0x1b2>
 800de72:	900c      	str	r0, [sp, #48]	; 0x30
 800de74:	e7b2      	b.n	800dddc <_dtoa_r+0x1b4>
 800de76:	9b05      	ldr	r3, [sp, #20]
 800de78:	eba3 030b 	sub.w	r3, r3, fp
 800de7c:	9305      	str	r3, [sp, #20]
 800de7e:	f1cb 0300 	rsb	r3, fp, #0
 800de82:	9308      	str	r3, [sp, #32]
 800de84:	2300      	movs	r3, #0
 800de86:	930b      	str	r3, [sp, #44]	; 0x2c
 800de88:	e7bf      	b.n	800de0a <_dtoa_r+0x1e2>
 800de8a:	2300      	movs	r3, #0
 800de8c:	9309      	str	r3, [sp, #36]	; 0x24
 800de8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de90:	2b00      	cmp	r3, #0
 800de92:	dc52      	bgt.n	800df3a <_dtoa_r+0x312>
 800de94:	2301      	movs	r3, #1
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	9304      	str	r3, [sp, #16]
 800de9a:	461a      	mov	r2, r3
 800de9c:	920a      	str	r2, [sp, #40]	; 0x28
 800de9e:	e00b      	b.n	800deb8 <_dtoa_r+0x290>
 800dea0:	2301      	movs	r3, #1
 800dea2:	e7f3      	b.n	800de8c <_dtoa_r+0x264>
 800dea4:	2300      	movs	r3, #0
 800dea6:	9309      	str	r3, [sp, #36]	; 0x24
 800dea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deaa:	445b      	add	r3, fp
 800deac:	9301      	str	r3, [sp, #4]
 800deae:	3301      	adds	r3, #1
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	9304      	str	r3, [sp, #16]
 800deb4:	bfb8      	it	lt
 800deb6:	2301      	movlt	r3, #1
 800deb8:	69e0      	ldr	r0, [r4, #28]
 800deba:	2100      	movs	r1, #0
 800debc:	2204      	movs	r2, #4
 800debe:	f102 0614 	add.w	r6, r2, #20
 800dec2:	429e      	cmp	r6, r3
 800dec4:	d93d      	bls.n	800df42 <_dtoa_r+0x31a>
 800dec6:	6041      	str	r1, [r0, #4]
 800dec8:	4620      	mov	r0, r4
 800deca:	f000 fd9f 	bl	800ea0c <_Balloc>
 800dece:	9000      	str	r0, [sp, #0]
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d139      	bne.n	800df48 <_dtoa_r+0x320>
 800ded4:	4b16      	ldr	r3, [pc, #88]	; (800df30 <_dtoa_r+0x308>)
 800ded6:	4602      	mov	r2, r0
 800ded8:	f240 11af 	movw	r1, #431	; 0x1af
 800dedc:	e6bd      	b.n	800dc5a <_dtoa_r+0x32>
 800dede:	2301      	movs	r3, #1
 800dee0:	e7e1      	b.n	800dea6 <_dtoa_r+0x27e>
 800dee2:	2501      	movs	r5, #1
 800dee4:	2300      	movs	r3, #0
 800dee6:	9307      	str	r3, [sp, #28]
 800dee8:	9509      	str	r5, [sp, #36]	; 0x24
 800deea:	f04f 33ff 	mov.w	r3, #4294967295
 800deee:	9301      	str	r3, [sp, #4]
 800def0:	9304      	str	r3, [sp, #16]
 800def2:	2200      	movs	r2, #0
 800def4:	2312      	movs	r3, #18
 800def6:	e7d1      	b.n	800de9c <_dtoa_r+0x274>
 800def8:	636f4361 	.word	0x636f4361
 800defc:	3fd287a7 	.word	0x3fd287a7
 800df00:	8b60c8b3 	.word	0x8b60c8b3
 800df04:	3fc68a28 	.word	0x3fc68a28
 800df08:	509f79fb 	.word	0x509f79fb
 800df0c:	3fd34413 	.word	0x3fd34413
 800df10:	0801210a 	.word	0x0801210a
 800df14:	08012121 	.word	0x08012121
 800df18:	7ff00000 	.word	0x7ff00000
 800df1c:	08012106 	.word	0x08012106
 800df20:	080120fd 	.word	0x080120fd
 800df24:	080120d5 	.word	0x080120d5
 800df28:	3ff80000 	.word	0x3ff80000
 800df2c:	08012210 	.word	0x08012210
 800df30:	08012179 	.word	0x08012179
 800df34:	2301      	movs	r3, #1
 800df36:	9309      	str	r3, [sp, #36]	; 0x24
 800df38:	e7d7      	b.n	800deea <_dtoa_r+0x2c2>
 800df3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	9304      	str	r3, [sp, #16]
 800df40:	e7ba      	b.n	800deb8 <_dtoa_r+0x290>
 800df42:	3101      	adds	r1, #1
 800df44:	0052      	lsls	r2, r2, #1
 800df46:	e7ba      	b.n	800debe <_dtoa_r+0x296>
 800df48:	69e3      	ldr	r3, [r4, #28]
 800df4a:	9a00      	ldr	r2, [sp, #0]
 800df4c:	601a      	str	r2, [r3, #0]
 800df4e:	9b04      	ldr	r3, [sp, #16]
 800df50:	2b0e      	cmp	r3, #14
 800df52:	f200 80a8 	bhi.w	800e0a6 <_dtoa_r+0x47e>
 800df56:	2d00      	cmp	r5, #0
 800df58:	f000 80a5 	beq.w	800e0a6 <_dtoa_r+0x47e>
 800df5c:	f1bb 0f00 	cmp.w	fp, #0
 800df60:	dd38      	ble.n	800dfd4 <_dtoa_r+0x3ac>
 800df62:	4bc0      	ldr	r3, [pc, #768]	; (800e264 <_dtoa_r+0x63c>)
 800df64:	f00b 020f 	and.w	r2, fp, #15
 800df68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800df70:	e9d3 6700 	ldrd	r6, r7, [r3]
 800df74:	ea4f 182b 	mov.w	r8, fp, asr #4
 800df78:	d019      	beq.n	800dfae <_dtoa_r+0x386>
 800df7a:	4bbb      	ldr	r3, [pc, #748]	; (800e268 <_dtoa_r+0x640>)
 800df7c:	ec51 0b18 	vmov	r0, r1, d8
 800df80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df84:	f7f2 fc62 	bl	800084c <__aeabi_ddiv>
 800df88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df8c:	f008 080f 	and.w	r8, r8, #15
 800df90:	2503      	movs	r5, #3
 800df92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e268 <_dtoa_r+0x640>
 800df96:	f1b8 0f00 	cmp.w	r8, #0
 800df9a:	d10a      	bne.n	800dfb2 <_dtoa_r+0x38a>
 800df9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfa0:	4632      	mov	r2, r6
 800dfa2:	463b      	mov	r3, r7
 800dfa4:	f7f2 fc52 	bl	800084c <__aeabi_ddiv>
 800dfa8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfac:	e02b      	b.n	800e006 <_dtoa_r+0x3de>
 800dfae:	2502      	movs	r5, #2
 800dfb0:	e7ef      	b.n	800df92 <_dtoa_r+0x36a>
 800dfb2:	f018 0f01 	tst.w	r8, #1
 800dfb6:	d008      	beq.n	800dfca <_dtoa_r+0x3a2>
 800dfb8:	4630      	mov	r0, r6
 800dfba:	4639      	mov	r1, r7
 800dfbc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dfc0:	f7f2 fb1a 	bl	80005f8 <__aeabi_dmul>
 800dfc4:	3501      	adds	r5, #1
 800dfc6:	4606      	mov	r6, r0
 800dfc8:	460f      	mov	r7, r1
 800dfca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dfce:	f109 0908 	add.w	r9, r9, #8
 800dfd2:	e7e0      	b.n	800df96 <_dtoa_r+0x36e>
 800dfd4:	f000 809f 	beq.w	800e116 <_dtoa_r+0x4ee>
 800dfd8:	f1cb 0600 	rsb	r6, fp, #0
 800dfdc:	4ba1      	ldr	r3, [pc, #644]	; (800e264 <_dtoa_r+0x63c>)
 800dfde:	4fa2      	ldr	r7, [pc, #648]	; (800e268 <_dtoa_r+0x640>)
 800dfe0:	f006 020f 	and.w	r2, r6, #15
 800dfe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfec:	ec51 0b18 	vmov	r0, r1, d8
 800dff0:	f7f2 fb02 	bl	80005f8 <__aeabi_dmul>
 800dff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dff8:	1136      	asrs	r6, r6, #4
 800dffa:	2300      	movs	r3, #0
 800dffc:	2502      	movs	r5, #2
 800dffe:	2e00      	cmp	r6, #0
 800e000:	d17e      	bne.n	800e100 <_dtoa_r+0x4d8>
 800e002:	2b00      	cmp	r3, #0
 800e004:	d1d0      	bne.n	800dfa8 <_dtoa_r+0x380>
 800e006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e008:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 8084 	beq.w	800e11a <_dtoa_r+0x4f2>
 800e012:	4b96      	ldr	r3, [pc, #600]	; (800e26c <_dtoa_r+0x644>)
 800e014:	2200      	movs	r2, #0
 800e016:	4640      	mov	r0, r8
 800e018:	4649      	mov	r1, r9
 800e01a:	f7f2 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800e01e:	2800      	cmp	r0, #0
 800e020:	d07b      	beq.n	800e11a <_dtoa_r+0x4f2>
 800e022:	9b04      	ldr	r3, [sp, #16]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d078      	beq.n	800e11a <_dtoa_r+0x4f2>
 800e028:	9b01      	ldr	r3, [sp, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	dd39      	ble.n	800e0a2 <_dtoa_r+0x47a>
 800e02e:	4b90      	ldr	r3, [pc, #576]	; (800e270 <_dtoa_r+0x648>)
 800e030:	2200      	movs	r2, #0
 800e032:	4640      	mov	r0, r8
 800e034:	4649      	mov	r1, r9
 800e036:	f7f2 fadf 	bl	80005f8 <__aeabi_dmul>
 800e03a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e03e:	9e01      	ldr	r6, [sp, #4]
 800e040:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e044:	3501      	adds	r5, #1
 800e046:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e04a:	4628      	mov	r0, r5
 800e04c:	f7f2 fa6a 	bl	8000524 <__aeabi_i2d>
 800e050:	4642      	mov	r2, r8
 800e052:	464b      	mov	r3, r9
 800e054:	f7f2 fad0 	bl	80005f8 <__aeabi_dmul>
 800e058:	4b86      	ldr	r3, [pc, #536]	; (800e274 <_dtoa_r+0x64c>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	f7f2 f916 	bl	800028c <__adddf3>
 800e060:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e068:	9303      	str	r3, [sp, #12]
 800e06a:	2e00      	cmp	r6, #0
 800e06c:	d158      	bne.n	800e120 <_dtoa_r+0x4f8>
 800e06e:	4b82      	ldr	r3, [pc, #520]	; (800e278 <_dtoa_r+0x650>)
 800e070:	2200      	movs	r2, #0
 800e072:	4640      	mov	r0, r8
 800e074:	4649      	mov	r1, r9
 800e076:	f7f2 f907 	bl	8000288 <__aeabi_dsub>
 800e07a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e07e:	4680      	mov	r8, r0
 800e080:	4689      	mov	r9, r1
 800e082:	f7f2 fd49 	bl	8000b18 <__aeabi_dcmpgt>
 800e086:	2800      	cmp	r0, #0
 800e088:	f040 8296 	bne.w	800e5b8 <_dtoa_r+0x990>
 800e08c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e090:	4640      	mov	r0, r8
 800e092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e096:	4649      	mov	r1, r9
 800e098:	f7f2 fd20 	bl	8000adc <__aeabi_dcmplt>
 800e09c:	2800      	cmp	r0, #0
 800e09e:	f040 8289 	bne.w	800e5b4 <_dtoa_r+0x98c>
 800e0a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e0a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f2c0 814e 	blt.w	800e34a <_dtoa_r+0x722>
 800e0ae:	f1bb 0f0e 	cmp.w	fp, #14
 800e0b2:	f300 814a 	bgt.w	800e34a <_dtoa_r+0x722>
 800e0b6:	4b6b      	ldr	r3, [pc, #428]	; (800e264 <_dtoa_r+0x63c>)
 800e0b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e0bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	f280 80dc 	bge.w	800e280 <_dtoa_r+0x658>
 800e0c8:	9b04      	ldr	r3, [sp, #16]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f300 80d8 	bgt.w	800e280 <_dtoa_r+0x658>
 800e0d0:	f040 826f 	bne.w	800e5b2 <_dtoa_r+0x98a>
 800e0d4:	4b68      	ldr	r3, [pc, #416]	; (800e278 <_dtoa_r+0x650>)
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	4640      	mov	r0, r8
 800e0da:	4649      	mov	r1, r9
 800e0dc:	f7f2 fa8c 	bl	80005f8 <__aeabi_dmul>
 800e0e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0e4:	f7f2 fd0e 	bl	8000b04 <__aeabi_dcmpge>
 800e0e8:	9e04      	ldr	r6, [sp, #16]
 800e0ea:	4637      	mov	r7, r6
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	f040 8245 	bne.w	800e57c <_dtoa_r+0x954>
 800e0f2:	9d00      	ldr	r5, [sp, #0]
 800e0f4:	2331      	movs	r3, #49	; 0x31
 800e0f6:	f805 3b01 	strb.w	r3, [r5], #1
 800e0fa:	f10b 0b01 	add.w	fp, fp, #1
 800e0fe:	e241      	b.n	800e584 <_dtoa_r+0x95c>
 800e100:	07f2      	lsls	r2, r6, #31
 800e102:	d505      	bpl.n	800e110 <_dtoa_r+0x4e8>
 800e104:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e108:	f7f2 fa76 	bl	80005f8 <__aeabi_dmul>
 800e10c:	3501      	adds	r5, #1
 800e10e:	2301      	movs	r3, #1
 800e110:	1076      	asrs	r6, r6, #1
 800e112:	3708      	adds	r7, #8
 800e114:	e773      	b.n	800dffe <_dtoa_r+0x3d6>
 800e116:	2502      	movs	r5, #2
 800e118:	e775      	b.n	800e006 <_dtoa_r+0x3de>
 800e11a:	9e04      	ldr	r6, [sp, #16]
 800e11c:	465f      	mov	r7, fp
 800e11e:	e792      	b.n	800e046 <_dtoa_r+0x41e>
 800e120:	9900      	ldr	r1, [sp, #0]
 800e122:	4b50      	ldr	r3, [pc, #320]	; (800e264 <_dtoa_r+0x63c>)
 800e124:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e128:	4431      	add	r1, r6
 800e12a:	9102      	str	r1, [sp, #8]
 800e12c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e12e:	eeb0 9a47 	vmov.f32	s18, s14
 800e132:	eef0 9a67 	vmov.f32	s19, s15
 800e136:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e13a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e13e:	2900      	cmp	r1, #0
 800e140:	d044      	beq.n	800e1cc <_dtoa_r+0x5a4>
 800e142:	494e      	ldr	r1, [pc, #312]	; (800e27c <_dtoa_r+0x654>)
 800e144:	2000      	movs	r0, #0
 800e146:	f7f2 fb81 	bl	800084c <__aeabi_ddiv>
 800e14a:	ec53 2b19 	vmov	r2, r3, d9
 800e14e:	f7f2 f89b 	bl	8000288 <__aeabi_dsub>
 800e152:	9d00      	ldr	r5, [sp, #0]
 800e154:	ec41 0b19 	vmov	d9, r0, r1
 800e158:	4649      	mov	r1, r9
 800e15a:	4640      	mov	r0, r8
 800e15c:	f7f2 fcfc 	bl	8000b58 <__aeabi_d2iz>
 800e160:	4606      	mov	r6, r0
 800e162:	f7f2 f9df 	bl	8000524 <__aeabi_i2d>
 800e166:	4602      	mov	r2, r0
 800e168:	460b      	mov	r3, r1
 800e16a:	4640      	mov	r0, r8
 800e16c:	4649      	mov	r1, r9
 800e16e:	f7f2 f88b 	bl	8000288 <__aeabi_dsub>
 800e172:	3630      	adds	r6, #48	; 0x30
 800e174:	f805 6b01 	strb.w	r6, [r5], #1
 800e178:	ec53 2b19 	vmov	r2, r3, d9
 800e17c:	4680      	mov	r8, r0
 800e17e:	4689      	mov	r9, r1
 800e180:	f7f2 fcac 	bl	8000adc <__aeabi_dcmplt>
 800e184:	2800      	cmp	r0, #0
 800e186:	d164      	bne.n	800e252 <_dtoa_r+0x62a>
 800e188:	4642      	mov	r2, r8
 800e18a:	464b      	mov	r3, r9
 800e18c:	4937      	ldr	r1, [pc, #220]	; (800e26c <_dtoa_r+0x644>)
 800e18e:	2000      	movs	r0, #0
 800e190:	f7f2 f87a 	bl	8000288 <__aeabi_dsub>
 800e194:	ec53 2b19 	vmov	r2, r3, d9
 800e198:	f7f2 fca0 	bl	8000adc <__aeabi_dcmplt>
 800e19c:	2800      	cmp	r0, #0
 800e19e:	f040 80b6 	bne.w	800e30e <_dtoa_r+0x6e6>
 800e1a2:	9b02      	ldr	r3, [sp, #8]
 800e1a4:	429d      	cmp	r5, r3
 800e1a6:	f43f af7c 	beq.w	800e0a2 <_dtoa_r+0x47a>
 800e1aa:	4b31      	ldr	r3, [pc, #196]	; (800e270 <_dtoa_r+0x648>)
 800e1ac:	ec51 0b19 	vmov	r0, r1, d9
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f7f2 fa21 	bl	80005f8 <__aeabi_dmul>
 800e1b6:	4b2e      	ldr	r3, [pc, #184]	; (800e270 <_dtoa_r+0x648>)
 800e1b8:	ec41 0b19 	vmov	d9, r0, r1
 800e1bc:	2200      	movs	r2, #0
 800e1be:	4640      	mov	r0, r8
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	f7f2 fa19 	bl	80005f8 <__aeabi_dmul>
 800e1c6:	4680      	mov	r8, r0
 800e1c8:	4689      	mov	r9, r1
 800e1ca:	e7c5      	b.n	800e158 <_dtoa_r+0x530>
 800e1cc:	ec51 0b17 	vmov	r0, r1, d7
 800e1d0:	f7f2 fa12 	bl	80005f8 <__aeabi_dmul>
 800e1d4:	9b02      	ldr	r3, [sp, #8]
 800e1d6:	9d00      	ldr	r5, [sp, #0]
 800e1d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e1da:	ec41 0b19 	vmov	d9, r0, r1
 800e1de:	4649      	mov	r1, r9
 800e1e0:	4640      	mov	r0, r8
 800e1e2:	f7f2 fcb9 	bl	8000b58 <__aeabi_d2iz>
 800e1e6:	4606      	mov	r6, r0
 800e1e8:	f7f2 f99c 	bl	8000524 <__aeabi_i2d>
 800e1ec:	3630      	adds	r6, #48	; 0x30
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	4640      	mov	r0, r8
 800e1f4:	4649      	mov	r1, r9
 800e1f6:	f7f2 f847 	bl	8000288 <__aeabi_dsub>
 800e1fa:	f805 6b01 	strb.w	r6, [r5], #1
 800e1fe:	9b02      	ldr	r3, [sp, #8]
 800e200:	429d      	cmp	r5, r3
 800e202:	4680      	mov	r8, r0
 800e204:	4689      	mov	r9, r1
 800e206:	f04f 0200 	mov.w	r2, #0
 800e20a:	d124      	bne.n	800e256 <_dtoa_r+0x62e>
 800e20c:	4b1b      	ldr	r3, [pc, #108]	; (800e27c <_dtoa_r+0x654>)
 800e20e:	ec51 0b19 	vmov	r0, r1, d9
 800e212:	f7f2 f83b 	bl	800028c <__adddf3>
 800e216:	4602      	mov	r2, r0
 800e218:	460b      	mov	r3, r1
 800e21a:	4640      	mov	r0, r8
 800e21c:	4649      	mov	r1, r9
 800e21e:	f7f2 fc7b 	bl	8000b18 <__aeabi_dcmpgt>
 800e222:	2800      	cmp	r0, #0
 800e224:	d173      	bne.n	800e30e <_dtoa_r+0x6e6>
 800e226:	ec53 2b19 	vmov	r2, r3, d9
 800e22a:	4914      	ldr	r1, [pc, #80]	; (800e27c <_dtoa_r+0x654>)
 800e22c:	2000      	movs	r0, #0
 800e22e:	f7f2 f82b 	bl	8000288 <__aeabi_dsub>
 800e232:	4602      	mov	r2, r0
 800e234:	460b      	mov	r3, r1
 800e236:	4640      	mov	r0, r8
 800e238:	4649      	mov	r1, r9
 800e23a:	f7f2 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800e23e:	2800      	cmp	r0, #0
 800e240:	f43f af2f 	beq.w	800e0a2 <_dtoa_r+0x47a>
 800e244:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e246:	1e6b      	subs	r3, r5, #1
 800e248:	930f      	str	r3, [sp, #60]	; 0x3c
 800e24a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e24e:	2b30      	cmp	r3, #48	; 0x30
 800e250:	d0f8      	beq.n	800e244 <_dtoa_r+0x61c>
 800e252:	46bb      	mov	fp, r7
 800e254:	e04a      	b.n	800e2ec <_dtoa_r+0x6c4>
 800e256:	4b06      	ldr	r3, [pc, #24]	; (800e270 <_dtoa_r+0x648>)
 800e258:	f7f2 f9ce 	bl	80005f8 <__aeabi_dmul>
 800e25c:	4680      	mov	r8, r0
 800e25e:	4689      	mov	r9, r1
 800e260:	e7bd      	b.n	800e1de <_dtoa_r+0x5b6>
 800e262:	bf00      	nop
 800e264:	08012210 	.word	0x08012210
 800e268:	080121e8 	.word	0x080121e8
 800e26c:	3ff00000 	.word	0x3ff00000
 800e270:	40240000 	.word	0x40240000
 800e274:	401c0000 	.word	0x401c0000
 800e278:	40140000 	.word	0x40140000
 800e27c:	3fe00000 	.word	0x3fe00000
 800e280:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e284:	9d00      	ldr	r5, [sp, #0]
 800e286:	4642      	mov	r2, r8
 800e288:	464b      	mov	r3, r9
 800e28a:	4630      	mov	r0, r6
 800e28c:	4639      	mov	r1, r7
 800e28e:	f7f2 fadd 	bl	800084c <__aeabi_ddiv>
 800e292:	f7f2 fc61 	bl	8000b58 <__aeabi_d2iz>
 800e296:	9001      	str	r0, [sp, #4]
 800e298:	f7f2 f944 	bl	8000524 <__aeabi_i2d>
 800e29c:	4642      	mov	r2, r8
 800e29e:	464b      	mov	r3, r9
 800e2a0:	f7f2 f9aa 	bl	80005f8 <__aeabi_dmul>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	4639      	mov	r1, r7
 800e2ac:	f7f1 ffec 	bl	8000288 <__aeabi_dsub>
 800e2b0:	9e01      	ldr	r6, [sp, #4]
 800e2b2:	9f04      	ldr	r7, [sp, #16]
 800e2b4:	3630      	adds	r6, #48	; 0x30
 800e2b6:	f805 6b01 	strb.w	r6, [r5], #1
 800e2ba:	9e00      	ldr	r6, [sp, #0]
 800e2bc:	1bae      	subs	r6, r5, r6
 800e2be:	42b7      	cmp	r7, r6
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	d134      	bne.n	800e330 <_dtoa_r+0x708>
 800e2c6:	f7f1 ffe1 	bl	800028c <__adddf3>
 800e2ca:	4642      	mov	r2, r8
 800e2cc:	464b      	mov	r3, r9
 800e2ce:	4606      	mov	r6, r0
 800e2d0:	460f      	mov	r7, r1
 800e2d2:	f7f2 fc21 	bl	8000b18 <__aeabi_dcmpgt>
 800e2d6:	b9c8      	cbnz	r0, 800e30c <_dtoa_r+0x6e4>
 800e2d8:	4642      	mov	r2, r8
 800e2da:	464b      	mov	r3, r9
 800e2dc:	4630      	mov	r0, r6
 800e2de:	4639      	mov	r1, r7
 800e2e0:	f7f2 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2e4:	b110      	cbz	r0, 800e2ec <_dtoa_r+0x6c4>
 800e2e6:	9b01      	ldr	r3, [sp, #4]
 800e2e8:	07db      	lsls	r3, r3, #31
 800e2ea:	d40f      	bmi.n	800e30c <_dtoa_r+0x6e4>
 800e2ec:	4651      	mov	r1, sl
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f000 fbcc 	bl	800ea8c <_Bfree>
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2f8:	702b      	strb	r3, [r5, #0]
 800e2fa:	f10b 0301 	add.w	r3, fp, #1
 800e2fe:	6013      	str	r3, [r2, #0]
 800e300:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e302:	2b00      	cmp	r3, #0
 800e304:	f43f ace2 	beq.w	800dccc <_dtoa_r+0xa4>
 800e308:	601d      	str	r5, [r3, #0]
 800e30a:	e4df      	b.n	800dccc <_dtoa_r+0xa4>
 800e30c:	465f      	mov	r7, fp
 800e30e:	462b      	mov	r3, r5
 800e310:	461d      	mov	r5, r3
 800e312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e316:	2a39      	cmp	r2, #57	; 0x39
 800e318:	d106      	bne.n	800e328 <_dtoa_r+0x700>
 800e31a:	9a00      	ldr	r2, [sp, #0]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d1f7      	bne.n	800e310 <_dtoa_r+0x6e8>
 800e320:	9900      	ldr	r1, [sp, #0]
 800e322:	2230      	movs	r2, #48	; 0x30
 800e324:	3701      	adds	r7, #1
 800e326:	700a      	strb	r2, [r1, #0]
 800e328:	781a      	ldrb	r2, [r3, #0]
 800e32a:	3201      	adds	r2, #1
 800e32c:	701a      	strb	r2, [r3, #0]
 800e32e:	e790      	b.n	800e252 <_dtoa_r+0x62a>
 800e330:	4ba3      	ldr	r3, [pc, #652]	; (800e5c0 <_dtoa_r+0x998>)
 800e332:	2200      	movs	r2, #0
 800e334:	f7f2 f960 	bl	80005f8 <__aeabi_dmul>
 800e338:	2200      	movs	r2, #0
 800e33a:	2300      	movs	r3, #0
 800e33c:	4606      	mov	r6, r0
 800e33e:	460f      	mov	r7, r1
 800e340:	f7f2 fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e344:	2800      	cmp	r0, #0
 800e346:	d09e      	beq.n	800e286 <_dtoa_r+0x65e>
 800e348:	e7d0      	b.n	800e2ec <_dtoa_r+0x6c4>
 800e34a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e34c:	2a00      	cmp	r2, #0
 800e34e:	f000 80ca 	beq.w	800e4e6 <_dtoa_r+0x8be>
 800e352:	9a07      	ldr	r2, [sp, #28]
 800e354:	2a01      	cmp	r2, #1
 800e356:	f300 80ad 	bgt.w	800e4b4 <_dtoa_r+0x88c>
 800e35a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e35c:	2a00      	cmp	r2, #0
 800e35e:	f000 80a5 	beq.w	800e4ac <_dtoa_r+0x884>
 800e362:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e366:	9e08      	ldr	r6, [sp, #32]
 800e368:	9d05      	ldr	r5, [sp, #20]
 800e36a:	9a05      	ldr	r2, [sp, #20]
 800e36c:	441a      	add	r2, r3
 800e36e:	9205      	str	r2, [sp, #20]
 800e370:	9a06      	ldr	r2, [sp, #24]
 800e372:	2101      	movs	r1, #1
 800e374:	441a      	add	r2, r3
 800e376:	4620      	mov	r0, r4
 800e378:	9206      	str	r2, [sp, #24]
 800e37a:	f000 fc87 	bl	800ec8c <__i2b>
 800e37e:	4607      	mov	r7, r0
 800e380:	b165      	cbz	r5, 800e39c <_dtoa_r+0x774>
 800e382:	9b06      	ldr	r3, [sp, #24]
 800e384:	2b00      	cmp	r3, #0
 800e386:	dd09      	ble.n	800e39c <_dtoa_r+0x774>
 800e388:	42ab      	cmp	r3, r5
 800e38a:	9a05      	ldr	r2, [sp, #20]
 800e38c:	bfa8      	it	ge
 800e38e:	462b      	movge	r3, r5
 800e390:	1ad2      	subs	r2, r2, r3
 800e392:	9205      	str	r2, [sp, #20]
 800e394:	9a06      	ldr	r2, [sp, #24]
 800e396:	1aed      	subs	r5, r5, r3
 800e398:	1ad3      	subs	r3, r2, r3
 800e39a:	9306      	str	r3, [sp, #24]
 800e39c:	9b08      	ldr	r3, [sp, #32]
 800e39e:	b1f3      	cbz	r3, 800e3de <_dtoa_r+0x7b6>
 800e3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	f000 80a3 	beq.w	800e4ee <_dtoa_r+0x8c6>
 800e3a8:	2e00      	cmp	r6, #0
 800e3aa:	dd10      	ble.n	800e3ce <_dtoa_r+0x7a6>
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	4632      	mov	r2, r6
 800e3b0:	4620      	mov	r0, r4
 800e3b2:	f000 fd2b 	bl	800ee0c <__pow5mult>
 800e3b6:	4652      	mov	r2, sl
 800e3b8:	4601      	mov	r1, r0
 800e3ba:	4607      	mov	r7, r0
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 fc7b 	bl	800ecb8 <__multiply>
 800e3c2:	4651      	mov	r1, sl
 800e3c4:	4680      	mov	r8, r0
 800e3c6:	4620      	mov	r0, r4
 800e3c8:	f000 fb60 	bl	800ea8c <_Bfree>
 800e3cc:	46c2      	mov	sl, r8
 800e3ce:	9b08      	ldr	r3, [sp, #32]
 800e3d0:	1b9a      	subs	r2, r3, r6
 800e3d2:	d004      	beq.n	800e3de <_dtoa_r+0x7b6>
 800e3d4:	4651      	mov	r1, sl
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	f000 fd18 	bl	800ee0c <__pow5mult>
 800e3dc:	4682      	mov	sl, r0
 800e3de:	2101      	movs	r1, #1
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	f000 fc53 	bl	800ec8c <__i2b>
 800e3e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	4606      	mov	r6, r0
 800e3ec:	f340 8081 	ble.w	800e4f2 <_dtoa_r+0x8ca>
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	4601      	mov	r1, r0
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	f000 fd09 	bl	800ee0c <__pow5mult>
 800e3fa:	9b07      	ldr	r3, [sp, #28]
 800e3fc:	2b01      	cmp	r3, #1
 800e3fe:	4606      	mov	r6, r0
 800e400:	dd7a      	ble.n	800e4f8 <_dtoa_r+0x8d0>
 800e402:	f04f 0800 	mov.w	r8, #0
 800e406:	6933      	ldr	r3, [r6, #16]
 800e408:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e40c:	6918      	ldr	r0, [r3, #16]
 800e40e:	f000 fbef 	bl	800ebf0 <__hi0bits>
 800e412:	f1c0 0020 	rsb	r0, r0, #32
 800e416:	9b06      	ldr	r3, [sp, #24]
 800e418:	4418      	add	r0, r3
 800e41a:	f010 001f 	ands.w	r0, r0, #31
 800e41e:	f000 8094 	beq.w	800e54a <_dtoa_r+0x922>
 800e422:	f1c0 0320 	rsb	r3, r0, #32
 800e426:	2b04      	cmp	r3, #4
 800e428:	f340 8085 	ble.w	800e536 <_dtoa_r+0x90e>
 800e42c:	9b05      	ldr	r3, [sp, #20]
 800e42e:	f1c0 001c 	rsb	r0, r0, #28
 800e432:	4403      	add	r3, r0
 800e434:	9305      	str	r3, [sp, #20]
 800e436:	9b06      	ldr	r3, [sp, #24]
 800e438:	4403      	add	r3, r0
 800e43a:	4405      	add	r5, r0
 800e43c:	9306      	str	r3, [sp, #24]
 800e43e:	9b05      	ldr	r3, [sp, #20]
 800e440:	2b00      	cmp	r3, #0
 800e442:	dd05      	ble.n	800e450 <_dtoa_r+0x828>
 800e444:	4651      	mov	r1, sl
 800e446:	461a      	mov	r2, r3
 800e448:	4620      	mov	r0, r4
 800e44a:	f000 fd39 	bl	800eec0 <__lshift>
 800e44e:	4682      	mov	sl, r0
 800e450:	9b06      	ldr	r3, [sp, #24]
 800e452:	2b00      	cmp	r3, #0
 800e454:	dd05      	ble.n	800e462 <_dtoa_r+0x83a>
 800e456:	4631      	mov	r1, r6
 800e458:	461a      	mov	r2, r3
 800e45a:	4620      	mov	r0, r4
 800e45c:	f000 fd30 	bl	800eec0 <__lshift>
 800e460:	4606      	mov	r6, r0
 800e462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e464:	2b00      	cmp	r3, #0
 800e466:	d072      	beq.n	800e54e <_dtoa_r+0x926>
 800e468:	4631      	mov	r1, r6
 800e46a:	4650      	mov	r0, sl
 800e46c:	f000 fd94 	bl	800ef98 <__mcmp>
 800e470:	2800      	cmp	r0, #0
 800e472:	da6c      	bge.n	800e54e <_dtoa_r+0x926>
 800e474:	2300      	movs	r3, #0
 800e476:	4651      	mov	r1, sl
 800e478:	220a      	movs	r2, #10
 800e47a:	4620      	mov	r0, r4
 800e47c:	f000 fb28 	bl	800ead0 <__multadd>
 800e480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e482:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e486:	4682      	mov	sl, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	f000 81b0 	beq.w	800e7ee <_dtoa_r+0xbc6>
 800e48e:	2300      	movs	r3, #0
 800e490:	4639      	mov	r1, r7
 800e492:	220a      	movs	r2, #10
 800e494:	4620      	mov	r0, r4
 800e496:	f000 fb1b 	bl	800ead0 <__multadd>
 800e49a:	9b01      	ldr	r3, [sp, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	4607      	mov	r7, r0
 800e4a0:	f300 8096 	bgt.w	800e5d0 <_dtoa_r+0x9a8>
 800e4a4:	9b07      	ldr	r3, [sp, #28]
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	dc59      	bgt.n	800e55e <_dtoa_r+0x936>
 800e4aa:	e091      	b.n	800e5d0 <_dtoa_r+0x9a8>
 800e4ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e4ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e4b2:	e758      	b.n	800e366 <_dtoa_r+0x73e>
 800e4b4:	9b04      	ldr	r3, [sp, #16]
 800e4b6:	1e5e      	subs	r6, r3, #1
 800e4b8:	9b08      	ldr	r3, [sp, #32]
 800e4ba:	42b3      	cmp	r3, r6
 800e4bc:	bfbf      	itttt	lt
 800e4be:	9b08      	ldrlt	r3, [sp, #32]
 800e4c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e4c2:	9608      	strlt	r6, [sp, #32]
 800e4c4:	1af3      	sublt	r3, r6, r3
 800e4c6:	bfb4      	ite	lt
 800e4c8:	18d2      	addlt	r2, r2, r3
 800e4ca:	1b9e      	subge	r6, r3, r6
 800e4cc:	9b04      	ldr	r3, [sp, #16]
 800e4ce:	bfbc      	itt	lt
 800e4d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e4d2:	2600      	movlt	r6, #0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	bfb7      	itett	lt
 800e4d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e4dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e4e0:	1a9d      	sublt	r5, r3, r2
 800e4e2:	2300      	movlt	r3, #0
 800e4e4:	e741      	b.n	800e36a <_dtoa_r+0x742>
 800e4e6:	9e08      	ldr	r6, [sp, #32]
 800e4e8:	9d05      	ldr	r5, [sp, #20]
 800e4ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e4ec:	e748      	b.n	800e380 <_dtoa_r+0x758>
 800e4ee:	9a08      	ldr	r2, [sp, #32]
 800e4f0:	e770      	b.n	800e3d4 <_dtoa_r+0x7ac>
 800e4f2:	9b07      	ldr	r3, [sp, #28]
 800e4f4:	2b01      	cmp	r3, #1
 800e4f6:	dc19      	bgt.n	800e52c <_dtoa_r+0x904>
 800e4f8:	9b02      	ldr	r3, [sp, #8]
 800e4fa:	b9bb      	cbnz	r3, 800e52c <_dtoa_r+0x904>
 800e4fc:	9b03      	ldr	r3, [sp, #12]
 800e4fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e502:	b99b      	cbnz	r3, 800e52c <_dtoa_r+0x904>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e50a:	0d1b      	lsrs	r3, r3, #20
 800e50c:	051b      	lsls	r3, r3, #20
 800e50e:	b183      	cbz	r3, 800e532 <_dtoa_r+0x90a>
 800e510:	9b05      	ldr	r3, [sp, #20]
 800e512:	3301      	adds	r3, #1
 800e514:	9305      	str	r3, [sp, #20]
 800e516:	9b06      	ldr	r3, [sp, #24]
 800e518:	3301      	adds	r3, #1
 800e51a:	9306      	str	r3, [sp, #24]
 800e51c:	f04f 0801 	mov.w	r8, #1
 800e520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e522:	2b00      	cmp	r3, #0
 800e524:	f47f af6f 	bne.w	800e406 <_dtoa_r+0x7de>
 800e528:	2001      	movs	r0, #1
 800e52a:	e774      	b.n	800e416 <_dtoa_r+0x7ee>
 800e52c:	f04f 0800 	mov.w	r8, #0
 800e530:	e7f6      	b.n	800e520 <_dtoa_r+0x8f8>
 800e532:	4698      	mov	r8, r3
 800e534:	e7f4      	b.n	800e520 <_dtoa_r+0x8f8>
 800e536:	d082      	beq.n	800e43e <_dtoa_r+0x816>
 800e538:	9a05      	ldr	r2, [sp, #20]
 800e53a:	331c      	adds	r3, #28
 800e53c:	441a      	add	r2, r3
 800e53e:	9205      	str	r2, [sp, #20]
 800e540:	9a06      	ldr	r2, [sp, #24]
 800e542:	441a      	add	r2, r3
 800e544:	441d      	add	r5, r3
 800e546:	9206      	str	r2, [sp, #24]
 800e548:	e779      	b.n	800e43e <_dtoa_r+0x816>
 800e54a:	4603      	mov	r3, r0
 800e54c:	e7f4      	b.n	800e538 <_dtoa_r+0x910>
 800e54e:	9b04      	ldr	r3, [sp, #16]
 800e550:	2b00      	cmp	r3, #0
 800e552:	dc37      	bgt.n	800e5c4 <_dtoa_r+0x99c>
 800e554:	9b07      	ldr	r3, [sp, #28]
 800e556:	2b02      	cmp	r3, #2
 800e558:	dd34      	ble.n	800e5c4 <_dtoa_r+0x99c>
 800e55a:	9b04      	ldr	r3, [sp, #16]
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	9b01      	ldr	r3, [sp, #4]
 800e560:	b963      	cbnz	r3, 800e57c <_dtoa_r+0x954>
 800e562:	4631      	mov	r1, r6
 800e564:	2205      	movs	r2, #5
 800e566:	4620      	mov	r0, r4
 800e568:	f000 fab2 	bl	800ead0 <__multadd>
 800e56c:	4601      	mov	r1, r0
 800e56e:	4606      	mov	r6, r0
 800e570:	4650      	mov	r0, sl
 800e572:	f000 fd11 	bl	800ef98 <__mcmp>
 800e576:	2800      	cmp	r0, #0
 800e578:	f73f adbb 	bgt.w	800e0f2 <_dtoa_r+0x4ca>
 800e57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e57e:	9d00      	ldr	r5, [sp, #0]
 800e580:	ea6f 0b03 	mvn.w	fp, r3
 800e584:	f04f 0800 	mov.w	r8, #0
 800e588:	4631      	mov	r1, r6
 800e58a:	4620      	mov	r0, r4
 800e58c:	f000 fa7e 	bl	800ea8c <_Bfree>
 800e590:	2f00      	cmp	r7, #0
 800e592:	f43f aeab 	beq.w	800e2ec <_dtoa_r+0x6c4>
 800e596:	f1b8 0f00 	cmp.w	r8, #0
 800e59a:	d005      	beq.n	800e5a8 <_dtoa_r+0x980>
 800e59c:	45b8      	cmp	r8, r7
 800e59e:	d003      	beq.n	800e5a8 <_dtoa_r+0x980>
 800e5a0:	4641      	mov	r1, r8
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f000 fa72 	bl	800ea8c <_Bfree>
 800e5a8:	4639      	mov	r1, r7
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 fa6e 	bl	800ea8c <_Bfree>
 800e5b0:	e69c      	b.n	800e2ec <_dtoa_r+0x6c4>
 800e5b2:	2600      	movs	r6, #0
 800e5b4:	4637      	mov	r7, r6
 800e5b6:	e7e1      	b.n	800e57c <_dtoa_r+0x954>
 800e5b8:	46bb      	mov	fp, r7
 800e5ba:	4637      	mov	r7, r6
 800e5bc:	e599      	b.n	800e0f2 <_dtoa_r+0x4ca>
 800e5be:	bf00      	nop
 800e5c0:	40240000 	.word	0x40240000
 800e5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f000 80c8 	beq.w	800e75c <_dtoa_r+0xb34>
 800e5cc:	9b04      	ldr	r3, [sp, #16]
 800e5ce:	9301      	str	r3, [sp, #4]
 800e5d0:	2d00      	cmp	r5, #0
 800e5d2:	dd05      	ble.n	800e5e0 <_dtoa_r+0x9b8>
 800e5d4:	4639      	mov	r1, r7
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f000 fc71 	bl	800eec0 <__lshift>
 800e5de:	4607      	mov	r7, r0
 800e5e0:	f1b8 0f00 	cmp.w	r8, #0
 800e5e4:	d05b      	beq.n	800e69e <_dtoa_r+0xa76>
 800e5e6:	6879      	ldr	r1, [r7, #4]
 800e5e8:	4620      	mov	r0, r4
 800e5ea:	f000 fa0f 	bl	800ea0c <_Balloc>
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	b928      	cbnz	r0, 800e5fe <_dtoa_r+0x9d6>
 800e5f2:	4b83      	ldr	r3, [pc, #524]	; (800e800 <_dtoa_r+0xbd8>)
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e5fa:	f7ff bb2e 	b.w	800dc5a <_dtoa_r+0x32>
 800e5fe:	693a      	ldr	r2, [r7, #16]
 800e600:	3202      	adds	r2, #2
 800e602:	0092      	lsls	r2, r2, #2
 800e604:	f107 010c 	add.w	r1, r7, #12
 800e608:	300c      	adds	r0, #12
 800e60a:	f002 f94d 	bl	80108a8 <memcpy>
 800e60e:	2201      	movs	r2, #1
 800e610:	4629      	mov	r1, r5
 800e612:	4620      	mov	r0, r4
 800e614:	f000 fc54 	bl	800eec0 <__lshift>
 800e618:	9b00      	ldr	r3, [sp, #0]
 800e61a:	3301      	adds	r3, #1
 800e61c:	9304      	str	r3, [sp, #16]
 800e61e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e622:	4413      	add	r3, r2
 800e624:	9308      	str	r3, [sp, #32]
 800e626:	9b02      	ldr	r3, [sp, #8]
 800e628:	f003 0301 	and.w	r3, r3, #1
 800e62c:	46b8      	mov	r8, r7
 800e62e:	9306      	str	r3, [sp, #24]
 800e630:	4607      	mov	r7, r0
 800e632:	9b04      	ldr	r3, [sp, #16]
 800e634:	4631      	mov	r1, r6
 800e636:	3b01      	subs	r3, #1
 800e638:	4650      	mov	r0, sl
 800e63a:	9301      	str	r3, [sp, #4]
 800e63c:	f7ff fa6a 	bl	800db14 <quorem>
 800e640:	4641      	mov	r1, r8
 800e642:	9002      	str	r0, [sp, #8]
 800e644:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e648:	4650      	mov	r0, sl
 800e64a:	f000 fca5 	bl	800ef98 <__mcmp>
 800e64e:	463a      	mov	r2, r7
 800e650:	9005      	str	r0, [sp, #20]
 800e652:	4631      	mov	r1, r6
 800e654:	4620      	mov	r0, r4
 800e656:	f000 fcbb 	bl	800efd0 <__mdiff>
 800e65a:	68c2      	ldr	r2, [r0, #12]
 800e65c:	4605      	mov	r5, r0
 800e65e:	bb02      	cbnz	r2, 800e6a2 <_dtoa_r+0xa7a>
 800e660:	4601      	mov	r1, r0
 800e662:	4650      	mov	r0, sl
 800e664:	f000 fc98 	bl	800ef98 <__mcmp>
 800e668:	4602      	mov	r2, r0
 800e66a:	4629      	mov	r1, r5
 800e66c:	4620      	mov	r0, r4
 800e66e:	9209      	str	r2, [sp, #36]	; 0x24
 800e670:	f000 fa0c 	bl	800ea8c <_Bfree>
 800e674:	9b07      	ldr	r3, [sp, #28]
 800e676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e678:	9d04      	ldr	r5, [sp, #16]
 800e67a:	ea43 0102 	orr.w	r1, r3, r2
 800e67e:	9b06      	ldr	r3, [sp, #24]
 800e680:	4319      	orrs	r1, r3
 800e682:	d110      	bne.n	800e6a6 <_dtoa_r+0xa7e>
 800e684:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e688:	d029      	beq.n	800e6de <_dtoa_r+0xab6>
 800e68a:	9b05      	ldr	r3, [sp, #20]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	dd02      	ble.n	800e696 <_dtoa_r+0xa6e>
 800e690:	9b02      	ldr	r3, [sp, #8]
 800e692:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e696:	9b01      	ldr	r3, [sp, #4]
 800e698:	f883 9000 	strb.w	r9, [r3]
 800e69c:	e774      	b.n	800e588 <_dtoa_r+0x960>
 800e69e:	4638      	mov	r0, r7
 800e6a0:	e7ba      	b.n	800e618 <_dtoa_r+0x9f0>
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	e7e1      	b.n	800e66a <_dtoa_r+0xa42>
 800e6a6:	9b05      	ldr	r3, [sp, #20]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	db04      	blt.n	800e6b6 <_dtoa_r+0xa8e>
 800e6ac:	9907      	ldr	r1, [sp, #28]
 800e6ae:	430b      	orrs	r3, r1
 800e6b0:	9906      	ldr	r1, [sp, #24]
 800e6b2:	430b      	orrs	r3, r1
 800e6b4:	d120      	bne.n	800e6f8 <_dtoa_r+0xad0>
 800e6b6:	2a00      	cmp	r2, #0
 800e6b8:	dded      	ble.n	800e696 <_dtoa_r+0xa6e>
 800e6ba:	4651      	mov	r1, sl
 800e6bc:	2201      	movs	r2, #1
 800e6be:	4620      	mov	r0, r4
 800e6c0:	f000 fbfe 	bl	800eec0 <__lshift>
 800e6c4:	4631      	mov	r1, r6
 800e6c6:	4682      	mov	sl, r0
 800e6c8:	f000 fc66 	bl	800ef98 <__mcmp>
 800e6cc:	2800      	cmp	r0, #0
 800e6ce:	dc03      	bgt.n	800e6d8 <_dtoa_r+0xab0>
 800e6d0:	d1e1      	bne.n	800e696 <_dtoa_r+0xa6e>
 800e6d2:	f019 0f01 	tst.w	r9, #1
 800e6d6:	d0de      	beq.n	800e696 <_dtoa_r+0xa6e>
 800e6d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e6dc:	d1d8      	bne.n	800e690 <_dtoa_r+0xa68>
 800e6de:	9a01      	ldr	r2, [sp, #4]
 800e6e0:	2339      	movs	r3, #57	; 0x39
 800e6e2:	7013      	strb	r3, [r2, #0]
 800e6e4:	462b      	mov	r3, r5
 800e6e6:	461d      	mov	r5, r3
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e6ee:	2a39      	cmp	r2, #57	; 0x39
 800e6f0:	d06c      	beq.n	800e7cc <_dtoa_r+0xba4>
 800e6f2:	3201      	adds	r2, #1
 800e6f4:	701a      	strb	r2, [r3, #0]
 800e6f6:	e747      	b.n	800e588 <_dtoa_r+0x960>
 800e6f8:	2a00      	cmp	r2, #0
 800e6fa:	dd07      	ble.n	800e70c <_dtoa_r+0xae4>
 800e6fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e700:	d0ed      	beq.n	800e6de <_dtoa_r+0xab6>
 800e702:	9a01      	ldr	r2, [sp, #4]
 800e704:	f109 0301 	add.w	r3, r9, #1
 800e708:	7013      	strb	r3, [r2, #0]
 800e70a:	e73d      	b.n	800e588 <_dtoa_r+0x960>
 800e70c:	9b04      	ldr	r3, [sp, #16]
 800e70e:	9a08      	ldr	r2, [sp, #32]
 800e710:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e714:	4293      	cmp	r3, r2
 800e716:	d043      	beq.n	800e7a0 <_dtoa_r+0xb78>
 800e718:	4651      	mov	r1, sl
 800e71a:	2300      	movs	r3, #0
 800e71c:	220a      	movs	r2, #10
 800e71e:	4620      	mov	r0, r4
 800e720:	f000 f9d6 	bl	800ead0 <__multadd>
 800e724:	45b8      	cmp	r8, r7
 800e726:	4682      	mov	sl, r0
 800e728:	f04f 0300 	mov.w	r3, #0
 800e72c:	f04f 020a 	mov.w	r2, #10
 800e730:	4641      	mov	r1, r8
 800e732:	4620      	mov	r0, r4
 800e734:	d107      	bne.n	800e746 <_dtoa_r+0xb1e>
 800e736:	f000 f9cb 	bl	800ead0 <__multadd>
 800e73a:	4680      	mov	r8, r0
 800e73c:	4607      	mov	r7, r0
 800e73e:	9b04      	ldr	r3, [sp, #16]
 800e740:	3301      	adds	r3, #1
 800e742:	9304      	str	r3, [sp, #16]
 800e744:	e775      	b.n	800e632 <_dtoa_r+0xa0a>
 800e746:	f000 f9c3 	bl	800ead0 <__multadd>
 800e74a:	4639      	mov	r1, r7
 800e74c:	4680      	mov	r8, r0
 800e74e:	2300      	movs	r3, #0
 800e750:	220a      	movs	r2, #10
 800e752:	4620      	mov	r0, r4
 800e754:	f000 f9bc 	bl	800ead0 <__multadd>
 800e758:	4607      	mov	r7, r0
 800e75a:	e7f0      	b.n	800e73e <_dtoa_r+0xb16>
 800e75c:	9b04      	ldr	r3, [sp, #16]
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	9d00      	ldr	r5, [sp, #0]
 800e762:	4631      	mov	r1, r6
 800e764:	4650      	mov	r0, sl
 800e766:	f7ff f9d5 	bl	800db14 <quorem>
 800e76a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e76e:	9b00      	ldr	r3, [sp, #0]
 800e770:	f805 9b01 	strb.w	r9, [r5], #1
 800e774:	1aea      	subs	r2, r5, r3
 800e776:	9b01      	ldr	r3, [sp, #4]
 800e778:	4293      	cmp	r3, r2
 800e77a:	dd07      	ble.n	800e78c <_dtoa_r+0xb64>
 800e77c:	4651      	mov	r1, sl
 800e77e:	2300      	movs	r3, #0
 800e780:	220a      	movs	r2, #10
 800e782:	4620      	mov	r0, r4
 800e784:	f000 f9a4 	bl	800ead0 <__multadd>
 800e788:	4682      	mov	sl, r0
 800e78a:	e7ea      	b.n	800e762 <_dtoa_r+0xb3a>
 800e78c:	9b01      	ldr	r3, [sp, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	bfc8      	it	gt
 800e792:	461d      	movgt	r5, r3
 800e794:	9b00      	ldr	r3, [sp, #0]
 800e796:	bfd8      	it	le
 800e798:	2501      	movle	r5, #1
 800e79a:	441d      	add	r5, r3
 800e79c:	f04f 0800 	mov.w	r8, #0
 800e7a0:	4651      	mov	r1, sl
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	4620      	mov	r0, r4
 800e7a6:	f000 fb8b 	bl	800eec0 <__lshift>
 800e7aa:	4631      	mov	r1, r6
 800e7ac:	4682      	mov	sl, r0
 800e7ae:	f000 fbf3 	bl	800ef98 <__mcmp>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	dc96      	bgt.n	800e6e4 <_dtoa_r+0xabc>
 800e7b6:	d102      	bne.n	800e7be <_dtoa_r+0xb96>
 800e7b8:	f019 0f01 	tst.w	r9, #1
 800e7bc:	d192      	bne.n	800e6e4 <_dtoa_r+0xabc>
 800e7be:	462b      	mov	r3, r5
 800e7c0:	461d      	mov	r5, r3
 800e7c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7c6:	2a30      	cmp	r2, #48	; 0x30
 800e7c8:	d0fa      	beq.n	800e7c0 <_dtoa_r+0xb98>
 800e7ca:	e6dd      	b.n	800e588 <_dtoa_r+0x960>
 800e7cc:	9a00      	ldr	r2, [sp, #0]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d189      	bne.n	800e6e6 <_dtoa_r+0xabe>
 800e7d2:	f10b 0b01 	add.w	fp, fp, #1
 800e7d6:	2331      	movs	r3, #49	; 0x31
 800e7d8:	e796      	b.n	800e708 <_dtoa_r+0xae0>
 800e7da:	4b0a      	ldr	r3, [pc, #40]	; (800e804 <_dtoa_r+0xbdc>)
 800e7dc:	f7ff ba99 	b.w	800dd12 <_dtoa_r+0xea>
 800e7e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	f47f aa6d 	bne.w	800dcc2 <_dtoa_r+0x9a>
 800e7e8:	4b07      	ldr	r3, [pc, #28]	; (800e808 <_dtoa_r+0xbe0>)
 800e7ea:	f7ff ba92 	b.w	800dd12 <_dtoa_r+0xea>
 800e7ee:	9b01      	ldr	r3, [sp, #4]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	dcb5      	bgt.n	800e760 <_dtoa_r+0xb38>
 800e7f4:	9b07      	ldr	r3, [sp, #28]
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	f73f aeb1 	bgt.w	800e55e <_dtoa_r+0x936>
 800e7fc:	e7b0      	b.n	800e760 <_dtoa_r+0xb38>
 800e7fe:	bf00      	nop
 800e800:	08012179 	.word	0x08012179
 800e804:	080120d4 	.word	0x080120d4
 800e808:	080120fd 	.word	0x080120fd

0800e80c <_free_r>:
 800e80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e80e:	2900      	cmp	r1, #0
 800e810:	d044      	beq.n	800e89c <_free_r+0x90>
 800e812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e816:	9001      	str	r0, [sp, #4]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f1a1 0404 	sub.w	r4, r1, #4
 800e81e:	bfb8      	it	lt
 800e820:	18e4      	addlt	r4, r4, r3
 800e822:	f000 f8e7 	bl	800e9f4 <__malloc_lock>
 800e826:	4a1e      	ldr	r2, [pc, #120]	; (800e8a0 <_free_r+0x94>)
 800e828:	9801      	ldr	r0, [sp, #4]
 800e82a:	6813      	ldr	r3, [r2, #0]
 800e82c:	b933      	cbnz	r3, 800e83c <_free_r+0x30>
 800e82e:	6063      	str	r3, [r4, #4]
 800e830:	6014      	str	r4, [r2, #0]
 800e832:	b003      	add	sp, #12
 800e834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e838:	f000 b8e2 	b.w	800ea00 <__malloc_unlock>
 800e83c:	42a3      	cmp	r3, r4
 800e83e:	d908      	bls.n	800e852 <_free_r+0x46>
 800e840:	6825      	ldr	r5, [r4, #0]
 800e842:	1961      	adds	r1, r4, r5
 800e844:	428b      	cmp	r3, r1
 800e846:	bf01      	itttt	eq
 800e848:	6819      	ldreq	r1, [r3, #0]
 800e84a:	685b      	ldreq	r3, [r3, #4]
 800e84c:	1949      	addeq	r1, r1, r5
 800e84e:	6021      	streq	r1, [r4, #0]
 800e850:	e7ed      	b.n	800e82e <_free_r+0x22>
 800e852:	461a      	mov	r2, r3
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	b10b      	cbz	r3, 800e85c <_free_r+0x50>
 800e858:	42a3      	cmp	r3, r4
 800e85a:	d9fa      	bls.n	800e852 <_free_r+0x46>
 800e85c:	6811      	ldr	r1, [r2, #0]
 800e85e:	1855      	adds	r5, r2, r1
 800e860:	42a5      	cmp	r5, r4
 800e862:	d10b      	bne.n	800e87c <_free_r+0x70>
 800e864:	6824      	ldr	r4, [r4, #0]
 800e866:	4421      	add	r1, r4
 800e868:	1854      	adds	r4, r2, r1
 800e86a:	42a3      	cmp	r3, r4
 800e86c:	6011      	str	r1, [r2, #0]
 800e86e:	d1e0      	bne.n	800e832 <_free_r+0x26>
 800e870:	681c      	ldr	r4, [r3, #0]
 800e872:	685b      	ldr	r3, [r3, #4]
 800e874:	6053      	str	r3, [r2, #4]
 800e876:	440c      	add	r4, r1
 800e878:	6014      	str	r4, [r2, #0]
 800e87a:	e7da      	b.n	800e832 <_free_r+0x26>
 800e87c:	d902      	bls.n	800e884 <_free_r+0x78>
 800e87e:	230c      	movs	r3, #12
 800e880:	6003      	str	r3, [r0, #0]
 800e882:	e7d6      	b.n	800e832 <_free_r+0x26>
 800e884:	6825      	ldr	r5, [r4, #0]
 800e886:	1961      	adds	r1, r4, r5
 800e888:	428b      	cmp	r3, r1
 800e88a:	bf04      	itt	eq
 800e88c:	6819      	ldreq	r1, [r3, #0]
 800e88e:	685b      	ldreq	r3, [r3, #4]
 800e890:	6063      	str	r3, [r4, #4]
 800e892:	bf04      	itt	eq
 800e894:	1949      	addeq	r1, r1, r5
 800e896:	6021      	streq	r1, [r4, #0]
 800e898:	6054      	str	r4, [r2, #4]
 800e89a:	e7ca      	b.n	800e832 <_free_r+0x26>
 800e89c:	b003      	add	sp, #12
 800e89e:	bd30      	pop	{r4, r5, pc}
 800e8a0:	20002974 	.word	0x20002974

0800e8a4 <malloc>:
 800e8a4:	4b02      	ldr	r3, [pc, #8]	; (800e8b0 <malloc+0xc>)
 800e8a6:	4601      	mov	r1, r0
 800e8a8:	6818      	ldr	r0, [r3, #0]
 800e8aa:	f000 b823 	b.w	800e8f4 <_malloc_r>
 800e8ae:	bf00      	nop
 800e8b0:	2000007c 	.word	0x2000007c

0800e8b4 <sbrk_aligned>:
 800e8b4:	b570      	push	{r4, r5, r6, lr}
 800e8b6:	4e0e      	ldr	r6, [pc, #56]	; (800e8f0 <sbrk_aligned+0x3c>)
 800e8b8:	460c      	mov	r4, r1
 800e8ba:	6831      	ldr	r1, [r6, #0]
 800e8bc:	4605      	mov	r5, r0
 800e8be:	b911      	cbnz	r1, 800e8c6 <sbrk_aligned+0x12>
 800e8c0:	f001 ffe2 	bl	8010888 <_sbrk_r>
 800e8c4:	6030      	str	r0, [r6, #0]
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f001 ffdd 	bl	8010888 <_sbrk_r>
 800e8ce:	1c43      	adds	r3, r0, #1
 800e8d0:	d00a      	beq.n	800e8e8 <sbrk_aligned+0x34>
 800e8d2:	1cc4      	adds	r4, r0, #3
 800e8d4:	f024 0403 	bic.w	r4, r4, #3
 800e8d8:	42a0      	cmp	r0, r4
 800e8da:	d007      	beq.n	800e8ec <sbrk_aligned+0x38>
 800e8dc:	1a21      	subs	r1, r4, r0
 800e8de:	4628      	mov	r0, r5
 800e8e0:	f001 ffd2 	bl	8010888 <_sbrk_r>
 800e8e4:	3001      	adds	r0, #1
 800e8e6:	d101      	bne.n	800e8ec <sbrk_aligned+0x38>
 800e8e8:	f04f 34ff 	mov.w	r4, #4294967295
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	bd70      	pop	{r4, r5, r6, pc}
 800e8f0:	20002978 	.word	0x20002978

0800e8f4 <_malloc_r>:
 800e8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8f8:	1ccd      	adds	r5, r1, #3
 800e8fa:	f025 0503 	bic.w	r5, r5, #3
 800e8fe:	3508      	adds	r5, #8
 800e900:	2d0c      	cmp	r5, #12
 800e902:	bf38      	it	cc
 800e904:	250c      	movcc	r5, #12
 800e906:	2d00      	cmp	r5, #0
 800e908:	4607      	mov	r7, r0
 800e90a:	db01      	blt.n	800e910 <_malloc_r+0x1c>
 800e90c:	42a9      	cmp	r1, r5
 800e90e:	d905      	bls.n	800e91c <_malloc_r+0x28>
 800e910:	230c      	movs	r3, #12
 800e912:	603b      	str	r3, [r7, #0]
 800e914:	2600      	movs	r6, #0
 800e916:	4630      	mov	r0, r6
 800e918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e91c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e9f0 <_malloc_r+0xfc>
 800e920:	f000 f868 	bl	800e9f4 <__malloc_lock>
 800e924:	f8d8 3000 	ldr.w	r3, [r8]
 800e928:	461c      	mov	r4, r3
 800e92a:	bb5c      	cbnz	r4, 800e984 <_malloc_r+0x90>
 800e92c:	4629      	mov	r1, r5
 800e92e:	4638      	mov	r0, r7
 800e930:	f7ff ffc0 	bl	800e8b4 <sbrk_aligned>
 800e934:	1c43      	adds	r3, r0, #1
 800e936:	4604      	mov	r4, r0
 800e938:	d155      	bne.n	800e9e6 <_malloc_r+0xf2>
 800e93a:	f8d8 4000 	ldr.w	r4, [r8]
 800e93e:	4626      	mov	r6, r4
 800e940:	2e00      	cmp	r6, #0
 800e942:	d145      	bne.n	800e9d0 <_malloc_r+0xdc>
 800e944:	2c00      	cmp	r4, #0
 800e946:	d048      	beq.n	800e9da <_malloc_r+0xe6>
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	4631      	mov	r1, r6
 800e94c:	4638      	mov	r0, r7
 800e94e:	eb04 0903 	add.w	r9, r4, r3
 800e952:	f001 ff99 	bl	8010888 <_sbrk_r>
 800e956:	4581      	cmp	r9, r0
 800e958:	d13f      	bne.n	800e9da <_malloc_r+0xe6>
 800e95a:	6821      	ldr	r1, [r4, #0]
 800e95c:	1a6d      	subs	r5, r5, r1
 800e95e:	4629      	mov	r1, r5
 800e960:	4638      	mov	r0, r7
 800e962:	f7ff ffa7 	bl	800e8b4 <sbrk_aligned>
 800e966:	3001      	adds	r0, #1
 800e968:	d037      	beq.n	800e9da <_malloc_r+0xe6>
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	442b      	add	r3, r5
 800e96e:	6023      	str	r3, [r4, #0]
 800e970:	f8d8 3000 	ldr.w	r3, [r8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d038      	beq.n	800e9ea <_malloc_r+0xf6>
 800e978:	685a      	ldr	r2, [r3, #4]
 800e97a:	42a2      	cmp	r2, r4
 800e97c:	d12b      	bne.n	800e9d6 <_malloc_r+0xe2>
 800e97e:	2200      	movs	r2, #0
 800e980:	605a      	str	r2, [r3, #4]
 800e982:	e00f      	b.n	800e9a4 <_malloc_r+0xb0>
 800e984:	6822      	ldr	r2, [r4, #0]
 800e986:	1b52      	subs	r2, r2, r5
 800e988:	d41f      	bmi.n	800e9ca <_malloc_r+0xd6>
 800e98a:	2a0b      	cmp	r2, #11
 800e98c:	d917      	bls.n	800e9be <_malloc_r+0xca>
 800e98e:	1961      	adds	r1, r4, r5
 800e990:	42a3      	cmp	r3, r4
 800e992:	6025      	str	r5, [r4, #0]
 800e994:	bf18      	it	ne
 800e996:	6059      	strne	r1, [r3, #4]
 800e998:	6863      	ldr	r3, [r4, #4]
 800e99a:	bf08      	it	eq
 800e99c:	f8c8 1000 	streq.w	r1, [r8]
 800e9a0:	5162      	str	r2, [r4, r5]
 800e9a2:	604b      	str	r3, [r1, #4]
 800e9a4:	4638      	mov	r0, r7
 800e9a6:	f104 060b 	add.w	r6, r4, #11
 800e9aa:	f000 f829 	bl	800ea00 <__malloc_unlock>
 800e9ae:	f026 0607 	bic.w	r6, r6, #7
 800e9b2:	1d23      	adds	r3, r4, #4
 800e9b4:	1af2      	subs	r2, r6, r3
 800e9b6:	d0ae      	beq.n	800e916 <_malloc_r+0x22>
 800e9b8:	1b9b      	subs	r3, r3, r6
 800e9ba:	50a3      	str	r3, [r4, r2]
 800e9bc:	e7ab      	b.n	800e916 <_malloc_r+0x22>
 800e9be:	42a3      	cmp	r3, r4
 800e9c0:	6862      	ldr	r2, [r4, #4]
 800e9c2:	d1dd      	bne.n	800e980 <_malloc_r+0x8c>
 800e9c4:	f8c8 2000 	str.w	r2, [r8]
 800e9c8:	e7ec      	b.n	800e9a4 <_malloc_r+0xb0>
 800e9ca:	4623      	mov	r3, r4
 800e9cc:	6864      	ldr	r4, [r4, #4]
 800e9ce:	e7ac      	b.n	800e92a <_malloc_r+0x36>
 800e9d0:	4634      	mov	r4, r6
 800e9d2:	6876      	ldr	r6, [r6, #4]
 800e9d4:	e7b4      	b.n	800e940 <_malloc_r+0x4c>
 800e9d6:	4613      	mov	r3, r2
 800e9d8:	e7cc      	b.n	800e974 <_malloc_r+0x80>
 800e9da:	230c      	movs	r3, #12
 800e9dc:	603b      	str	r3, [r7, #0]
 800e9de:	4638      	mov	r0, r7
 800e9e0:	f000 f80e 	bl	800ea00 <__malloc_unlock>
 800e9e4:	e797      	b.n	800e916 <_malloc_r+0x22>
 800e9e6:	6025      	str	r5, [r4, #0]
 800e9e8:	e7dc      	b.n	800e9a4 <_malloc_r+0xb0>
 800e9ea:	605b      	str	r3, [r3, #4]
 800e9ec:	deff      	udf	#255	; 0xff
 800e9ee:	bf00      	nop
 800e9f0:	20002974 	.word	0x20002974

0800e9f4 <__malloc_lock>:
 800e9f4:	4801      	ldr	r0, [pc, #4]	; (800e9fc <__malloc_lock+0x8>)
 800e9f6:	f7ff b885 	b.w	800db04 <__retarget_lock_acquire_recursive>
 800e9fa:	bf00      	nop
 800e9fc:	20002970 	.word	0x20002970

0800ea00 <__malloc_unlock>:
 800ea00:	4801      	ldr	r0, [pc, #4]	; (800ea08 <__malloc_unlock+0x8>)
 800ea02:	f7ff b880 	b.w	800db06 <__retarget_lock_release_recursive>
 800ea06:	bf00      	nop
 800ea08:	20002970 	.word	0x20002970

0800ea0c <_Balloc>:
 800ea0c:	b570      	push	{r4, r5, r6, lr}
 800ea0e:	69c6      	ldr	r6, [r0, #28]
 800ea10:	4604      	mov	r4, r0
 800ea12:	460d      	mov	r5, r1
 800ea14:	b976      	cbnz	r6, 800ea34 <_Balloc+0x28>
 800ea16:	2010      	movs	r0, #16
 800ea18:	f7ff ff44 	bl	800e8a4 <malloc>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	61e0      	str	r0, [r4, #28]
 800ea20:	b920      	cbnz	r0, 800ea2c <_Balloc+0x20>
 800ea22:	4b18      	ldr	r3, [pc, #96]	; (800ea84 <_Balloc+0x78>)
 800ea24:	4818      	ldr	r0, [pc, #96]	; (800ea88 <_Balloc+0x7c>)
 800ea26:	216b      	movs	r1, #107	; 0x6b
 800ea28:	f001 ff56 	bl	80108d8 <__assert_func>
 800ea2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea30:	6006      	str	r6, [r0, #0]
 800ea32:	60c6      	str	r6, [r0, #12]
 800ea34:	69e6      	ldr	r6, [r4, #28]
 800ea36:	68f3      	ldr	r3, [r6, #12]
 800ea38:	b183      	cbz	r3, 800ea5c <_Balloc+0x50>
 800ea3a:	69e3      	ldr	r3, [r4, #28]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea42:	b9b8      	cbnz	r0, 800ea74 <_Balloc+0x68>
 800ea44:	2101      	movs	r1, #1
 800ea46:	fa01 f605 	lsl.w	r6, r1, r5
 800ea4a:	1d72      	adds	r2, r6, #5
 800ea4c:	0092      	lsls	r2, r2, #2
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f001 ff60 	bl	8010914 <_calloc_r>
 800ea54:	b160      	cbz	r0, 800ea70 <_Balloc+0x64>
 800ea56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea5a:	e00e      	b.n	800ea7a <_Balloc+0x6e>
 800ea5c:	2221      	movs	r2, #33	; 0x21
 800ea5e:	2104      	movs	r1, #4
 800ea60:	4620      	mov	r0, r4
 800ea62:	f001 ff57 	bl	8010914 <_calloc_r>
 800ea66:	69e3      	ldr	r3, [r4, #28]
 800ea68:	60f0      	str	r0, [r6, #12]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d1e4      	bne.n	800ea3a <_Balloc+0x2e>
 800ea70:	2000      	movs	r0, #0
 800ea72:	bd70      	pop	{r4, r5, r6, pc}
 800ea74:	6802      	ldr	r2, [r0, #0]
 800ea76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea80:	e7f7      	b.n	800ea72 <_Balloc+0x66>
 800ea82:	bf00      	nop
 800ea84:	0801210a 	.word	0x0801210a
 800ea88:	0801218a 	.word	0x0801218a

0800ea8c <_Bfree>:
 800ea8c:	b570      	push	{r4, r5, r6, lr}
 800ea8e:	69c6      	ldr	r6, [r0, #28]
 800ea90:	4605      	mov	r5, r0
 800ea92:	460c      	mov	r4, r1
 800ea94:	b976      	cbnz	r6, 800eab4 <_Bfree+0x28>
 800ea96:	2010      	movs	r0, #16
 800ea98:	f7ff ff04 	bl	800e8a4 <malloc>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	61e8      	str	r0, [r5, #28]
 800eaa0:	b920      	cbnz	r0, 800eaac <_Bfree+0x20>
 800eaa2:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <_Bfree+0x3c>)
 800eaa4:	4809      	ldr	r0, [pc, #36]	; (800eacc <_Bfree+0x40>)
 800eaa6:	218f      	movs	r1, #143	; 0x8f
 800eaa8:	f001 ff16 	bl	80108d8 <__assert_func>
 800eaac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eab0:	6006      	str	r6, [r0, #0]
 800eab2:	60c6      	str	r6, [r0, #12]
 800eab4:	b13c      	cbz	r4, 800eac6 <_Bfree+0x3a>
 800eab6:	69eb      	ldr	r3, [r5, #28]
 800eab8:	6862      	ldr	r2, [r4, #4]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eac0:	6021      	str	r1, [r4, #0]
 800eac2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eac6:	bd70      	pop	{r4, r5, r6, pc}
 800eac8:	0801210a 	.word	0x0801210a
 800eacc:	0801218a 	.word	0x0801218a

0800ead0 <__multadd>:
 800ead0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead4:	690d      	ldr	r5, [r1, #16]
 800ead6:	4607      	mov	r7, r0
 800ead8:	460c      	mov	r4, r1
 800eada:	461e      	mov	r6, r3
 800eadc:	f101 0c14 	add.w	ip, r1, #20
 800eae0:	2000      	movs	r0, #0
 800eae2:	f8dc 3000 	ldr.w	r3, [ip]
 800eae6:	b299      	uxth	r1, r3
 800eae8:	fb02 6101 	mla	r1, r2, r1, r6
 800eaec:	0c1e      	lsrs	r6, r3, #16
 800eaee:	0c0b      	lsrs	r3, r1, #16
 800eaf0:	fb02 3306 	mla	r3, r2, r6, r3
 800eaf4:	b289      	uxth	r1, r1
 800eaf6:	3001      	adds	r0, #1
 800eaf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eafc:	4285      	cmp	r5, r0
 800eafe:	f84c 1b04 	str.w	r1, [ip], #4
 800eb02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eb06:	dcec      	bgt.n	800eae2 <__multadd+0x12>
 800eb08:	b30e      	cbz	r6, 800eb4e <__multadd+0x7e>
 800eb0a:	68a3      	ldr	r3, [r4, #8]
 800eb0c:	42ab      	cmp	r3, r5
 800eb0e:	dc19      	bgt.n	800eb44 <__multadd+0x74>
 800eb10:	6861      	ldr	r1, [r4, #4]
 800eb12:	4638      	mov	r0, r7
 800eb14:	3101      	adds	r1, #1
 800eb16:	f7ff ff79 	bl	800ea0c <_Balloc>
 800eb1a:	4680      	mov	r8, r0
 800eb1c:	b928      	cbnz	r0, 800eb2a <__multadd+0x5a>
 800eb1e:	4602      	mov	r2, r0
 800eb20:	4b0c      	ldr	r3, [pc, #48]	; (800eb54 <__multadd+0x84>)
 800eb22:	480d      	ldr	r0, [pc, #52]	; (800eb58 <__multadd+0x88>)
 800eb24:	21ba      	movs	r1, #186	; 0xba
 800eb26:	f001 fed7 	bl	80108d8 <__assert_func>
 800eb2a:	6922      	ldr	r2, [r4, #16]
 800eb2c:	3202      	adds	r2, #2
 800eb2e:	f104 010c 	add.w	r1, r4, #12
 800eb32:	0092      	lsls	r2, r2, #2
 800eb34:	300c      	adds	r0, #12
 800eb36:	f001 feb7 	bl	80108a8 <memcpy>
 800eb3a:	4621      	mov	r1, r4
 800eb3c:	4638      	mov	r0, r7
 800eb3e:	f7ff ffa5 	bl	800ea8c <_Bfree>
 800eb42:	4644      	mov	r4, r8
 800eb44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb48:	3501      	adds	r5, #1
 800eb4a:	615e      	str	r6, [r3, #20]
 800eb4c:	6125      	str	r5, [r4, #16]
 800eb4e:	4620      	mov	r0, r4
 800eb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb54:	08012179 	.word	0x08012179
 800eb58:	0801218a 	.word	0x0801218a

0800eb5c <__s2b>:
 800eb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb60:	460c      	mov	r4, r1
 800eb62:	4615      	mov	r5, r2
 800eb64:	461f      	mov	r7, r3
 800eb66:	2209      	movs	r2, #9
 800eb68:	3308      	adds	r3, #8
 800eb6a:	4606      	mov	r6, r0
 800eb6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb70:	2100      	movs	r1, #0
 800eb72:	2201      	movs	r2, #1
 800eb74:	429a      	cmp	r2, r3
 800eb76:	db09      	blt.n	800eb8c <__s2b+0x30>
 800eb78:	4630      	mov	r0, r6
 800eb7a:	f7ff ff47 	bl	800ea0c <_Balloc>
 800eb7e:	b940      	cbnz	r0, 800eb92 <__s2b+0x36>
 800eb80:	4602      	mov	r2, r0
 800eb82:	4b19      	ldr	r3, [pc, #100]	; (800ebe8 <__s2b+0x8c>)
 800eb84:	4819      	ldr	r0, [pc, #100]	; (800ebec <__s2b+0x90>)
 800eb86:	21d3      	movs	r1, #211	; 0xd3
 800eb88:	f001 fea6 	bl	80108d8 <__assert_func>
 800eb8c:	0052      	lsls	r2, r2, #1
 800eb8e:	3101      	adds	r1, #1
 800eb90:	e7f0      	b.n	800eb74 <__s2b+0x18>
 800eb92:	9b08      	ldr	r3, [sp, #32]
 800eb94:	6143      	str	r3, [r0, #20]
 800eb96:	2d09      	cmp	r5, #9
 800eb98:	f04f 0301 	mov.w	r3, #1
 800eb9c:	6103      	str	r3, [r0, #16]
 800eb9e:	dd16      	ble.n	800ebce <__s2b+0x72>
 800eba0:	f104 0909 	add.w	r9, r4, #9
 800eba4:	46c8      	mov	r8, r9
 800eba6:	442c      	add	r4, r5
 800eba8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ebac:	4601      	mov	r1, r0
 800ebae:	3b30      	subs	r3, #48	; 0x30
 800ebb0:	220a      	movs	r2, #10
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f7ff ff8c 	bl	800ead0 <__multadd>
 800ebb8:	45a0      	cmp	r8, r4
 800ebba:	d1f5      	bne.n	800eba8 <__s2b+0x4c>
 800ebbc:	f1a5 0408 	sub.w	r4, r5, #8
 800ebc0:	444c      	add	r4, r9
 800ebc2:	1b2d      	subs	r5, r5, r4
 800ebc4:	1963      	adds	r3, r4, r5
 800ebc6:	42bb      	cmp	r3, r7
 800ebc8:	db04      	blt.n	800ebd4 <__s2b+0x78>
 800ebca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebce:	340a      	adds	r4, #10
 800ebd0:	2509      	movs	r5, #9
 800ebd2:	e7f6      	b.n	800ebc2 <__s2b+0x66>
 800ebd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ebd8:	4601      	mov	r1, r0
 800ebda:	3b30      	subs	r3, #48	; 0x30
 800ebdc:	220a      	movs	r2, #10
 800ebde:	4630      	mov	r0, r6
 800ebe0:	f7ff ff76 	bl	800ead0 <__multadd>
 800ebe4:	e7ee      	b.n	800ebc4 <__s2b+0x68>
 800ebe6:	bf00      	nop
 800ebe8:	08012179 	.word	0x08012179
 800ebec:	0801218a 	.word	0x0801218a

0800ebf0 <__hi0bits>:
 800ebf0:	0c03      	lsrs	r3, r0, #16
 800ebf2:	041b      	lsls	r3, r3, #16
 800ebf4:	b9d3      	cbnz	r3, 800ec2c <__hi0bits+0x3c>
 800ebf6:	0400      	lsls	r0, r0, #16
 800ebf8:	2310      	movs	r3, #16
 800ebfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebfe:	bf04      	itt	eq
 800ec00:	0200      	lsleq	r0, r0, #8
 800ec02:	3308      	addeq	r3, #8
 800ec04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ec08:	bf04      	itt	eq
 800ec0a:	0100      	lsleq	r0, r0, #4
 800ec0c:	3304      	addeq	r3, #4
 800ec0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ec12:	bf04      	itt	eq
 800ec14:	0080      	lsleq	r0, r0, #2
 800ec16:	3302      	addeq	r3, #2
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	db05      	blt.n	800ec28 <__hi0bits+0x38>
 800ec1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec20:	f103 0301 	add.w	r3, r3, #1
 800ec24:	bf08      	it	eq
 800ec26:	2320      	moveq	r3, #32
 800ec28:	4618      	mov	r0, r3
 800ec2a:	4770      	bx	lr
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	e7e4      	b.n	800ebfa <__hi0bits+0xa>

0800ec30 <__lo0bits>:
 800ec30:	6803      	ldr	r3, [r0, #0]
 800ec32:	f013 0207 	ands.w	r2, r3, #7
 800ec36:	d00c      	beq.n	800ec52 <__lo0bits+0x22>
 800ec38:	07d9      	lsls	r1, r3, #31
 800ec3a:	d422      	bmi.n	800ec82 <__lo0bits+0x52>
 800ec3c:	079a      	lsls	r2, r3, #30
 800ec3e:	bf49      	itett	mi
 800ec40:	085b      	lsrmi	r3, r3, #1
 800ec42:	089b      	lsrpl	r3, r3, #2
 800ec44:	6003      	strmi	r3, [r0, #0]
 800ec46:	2201      	movmi	r2, #1
 800ec48:	bf5c      	itt	pl
 800ec4a:	6003      	strpl	r3, [r0, #0]
 800ec4c:	2202      	movpl	r2, #2
 800ec4e:	4610      	mov	r0, r2
 800ec50:	4770      	bx	lr
 800ec52:	b299      	uxth	r1, r3
 800ec54:	b909      	cbnz	r1, 800ec5a <__lo0bits+0x2a>
 800ec56:	0c1b      	lsrs	r3, r3, #16
 800ec58:	2210      	movs	r2, #16
 800ec5a:	b2d9      	uxtb	r1, r3
 800ec5c:	b909      	cbnz	r1, 800ec62 <__lo0bits+0x32>
 800ec5e:	3208      	adds	r2, #8
 800ec60:	0a1b      	lsrs	r3, r3, #8
 800ec62:	0719      	lsls	r1, r3, #28
 800ec64:	bf04      	itt	eq
 800ec66:	091b      	lsreq	r3, r3, #4
 800ec68:	3204      	addeq	r2, #4
 800ec6a:	0799      	lsls	r1, r3, #30
 800ec6c:	bf04      	itt	eq
 800ec6e:	089b      	lsreq	r3, r3, #2
 800ec70:	3202      	addeq	r2, #2
 800ec72:	07d9      	lsls	r1, r3, #31
 800ec74:	d403      	bmi.n	800ec7e <__lo0bits+0x4e>
 800ec76:	085b      	lsrs	r3, r3, #1
 800ec78:	f102 0201 	add.w	r2, r2, #1
 800ec7c:	d003      	beq.n	800ec86 <__lo0bits+0x56>
 800ec7e:	6003      	str	r3, [r0, #0]
 800ec80:	e7e5      	b.n	800ec4e <__lo0bits+0x1e>
 800ec82:	2200      	movs	r2, #0
 800ec84:	e7e3      	b.n	800ec4e <__lo0bits+0x1e>
 800ec86:	2220      	movs	r2, #32
 800ec88:	e7e1      	b.n	800ec4e <__lo0bits+0x1e>
	...

0800ec8c <__i2b>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	460c      	mov	r4, r1
 800ec90:	2101      	movs	r1, #1
 800ec92:	f7ff febb 	bl	800ea0c <_Balloc>
 800ec96:	4602      	mov	r2, r0
 800ec98:	b928      	cbnz	r0, 800eca6 <__i2b+0x1a>
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <__i2b+0x24>)
 800ec9c:	4805      	ldr	r0, [pc, #20]	; (800ecb4 <__i2b+0x28>)
 800ec9e:	f240 1145 	movw	r1, #325	; 0x145
 800eca2:	f001 fe19 	bl	80108d8 <__assert_func>
 800eca6:	2301      	movs	r3, #1
 800eca8:	6144      	str	r4, [r0, #20]
 800ecaa:	6103      	str	r3, [r0, #16]
 800ecac:	bd10      	pop	{r4, pc}
 800ecae:	bf00      	nop
 800ecb0:	08012179 	.word	0x08012179
 800ecb4:	0801218a 	.word	0x0801218a

0800ecb8 <__multiply>:
 800ecb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecbc:	4691      	mov	r9, r2
 800ecbe:	690a      	ldr	r2, [r1, #16]
 800ecc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	bfb8      	it	lt
 800ecc8:	460b      	movlt	r3, r1
 800ecca:	460c      	mov	r4, r1
 800eccc:	bfbc      	itt	lt
 800ecce:	464c      	movlt	r4, r9
 800ecd0:	4699      	movlt	r9, r3
 800ecd2:	6927      	ldr	r7, [r4, #16]
 800ecd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ecd8:	68a3      	ldr	r3, [r4, #8]
 800ecda:	6861      	ldr	r1, [r4, #4]
 800ecdc:	eb07 060a 	add.w	r6, r7, sl
 800ece0:	42b3      	cmp	r3, r6
 800ece2:	b085      	sub	sp, #20
 800ece4:	bfb8      	it	lt
 800ece6:	3101      	addlt	r1, #1
 800ece8:	f7ff fe90 	bl	800ea0c <_Balloc>
 800ecec:	b930      	cbnz	r0, 800ecfc <__multiply+0x44>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	4b44      	ldr	r3, [pc, #272]	; (800ee04 <__multiply+0x14c>)
 800ecf2:	4845      	ldr	r0, [pc, #276]	; (800ee08 <__multiply+0x150>)
 800ecf4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ecf8:	f001 fdee 	bl	80108d8 <__assert_func>
 800ecfc:	f100 0514 	add.w	r5, r0, #20
 800ed00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed04:	462b      	mov	r3, r5
 800ed06:	2200      	movs	r2, #0
 800ed08:	4543      	cmp	r3, r8
 800ed0a:	d321      	bcc.n	800ed50 <__multiply+0x98>
 800ed0c:	f104 0314 	add.w	r3, r4, #20
 800ed10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ed14:	f109 0314 	add.w	r3, r9, #20
 800ed18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ed1c:	9202      	str	r2, [sp, #8]
 800ed1e:	1b3a      	subs	r2, r7, r4
 800ed20:	3a15      	subs	r2, #21
 800ed22:	f022 0203 	bic.w	r2, r2, #3
 800ed26:	3204      	adds	r2, #4
 800ed28:	f104 0115 	add.w	r1, r4, #21
 800ed2c:	428f      	cmp	r7, r1
 800ed2e:	bf38      	it	cc
 800ed30:	2204      	movcc	r2, #4
 800ed32:	9201      	str	r2, [sp, #4]
 800ed34:	9a02      	ldr	r2, [sp, #8]
 800ed36:	9303      	str	r3, [sp, #12]
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d80c      	bhi.n	800ed56 <__multiply+0x9e>
 800ed3c:	2e00      	cmp	r6, #0
 800ed3e:	dd03      	ble.n	800ed48 <__multiply+0x90>
 800ed40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d05b      	beq.n	800ee00 <__multiply+0x148>
 800ed48:	6106      	str	r6, [r0, #16]
 800ed4a:	b005      	add	sp, #20
 800ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed50:	f843 2b04 	str.w	r2, [r3], #4
 800ed54:	e7d8      	b.n	800ed08 <__multiply+0x50>
 800ed56:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed5a:	f1ba 0f00 	cmp.w	sl, #0
 800ed5e:	d024      	beq.n	800edaa <__multiply+0xf2>
 800ed60:	f104 0e14 	add.w	lr, r4, #20
 800ed64:	46a9      	mov	r9, r5
 800ed66:	f04f 0c00 	mov.w	ip, #0
 800ed6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ed6e:	f8d9 1000 	ldr.w	r1, [r9]
 800ed72:	fa1f fb82 	uxth.w	fp, r2
 800ed76:	b289      	uxth	r1, r1
 800ed78:	fb0a 110b 	mla	r1, sl, fp, r1
 800ed7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ed80:	f8d9 2000 	ldr.w	r2, [r9]
 800ed84:	4461      	add	r1, ip
 800ed86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed8a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ed8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed92:	b289      	uxth	r1, r1
 800ed94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed98:	4577      	cmp	r7, lr
 800ed9a:	f849 1b04 	str.w	r1, [r9], #4
 800ed9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eda2:	d8e2      	bhi.n	800ed6a <__multiply+0xb2>
 800eda4:	9a01      	ldr	r2, [sp, #4]
 800eda6:	f845 c002 	str.w	ip, [r5, r2]
 800edaa:	9a03      	ldr	r2, [sp, #12]
 800edac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800edb0:	3304      	adds	r3, #4
 800edb2:	f1b9 0f00 	cmp.w	r9, #0
 800edb6:	d021      	beq.n	800edfc <__multiply+0x144>
 800edb8:	6829      	ldr	r1, [r5, #0]
 800edba:	f104 0c14 	add.w	ip, r4, #20
 800edbe:	46ae      	mov	lr, r5
 800edc0:	f04f 0a00 	mov.w	sl, #0
 800edc4:	f8bc b000 	ldrh.w	fp, [ip]
 800edc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800edcc:	fb09 220b 	mla	r2, r9, fp, r2
 800edd0:	4452      	add	r2, sl
 800edd2:	b289      	uxth	r1, r1
 800edd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800edd8:	f84e 1b04 	str.w	r1, [lr], #4
 800eddc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ede0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ede4:	f8be 1000 	ldrh.w	r1, [lr]
 800ede8:	fb09 110a 	mla	r1, r9, sl, r1
 800edec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800edf0:	4567      	cmp	r7, ip
 800edf2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800edf6:	d8e5      	bhi.n	800edc4 <__multiply+0x10c>
 800edf8:	9a01      	ldr	r2, [sp, #4]
 800edfa:	50a9      	str	r1, [r5, r2]
 800edfc:	3504      	adds	r5, #4
 800edfe:	e799      	b.n	800ed34 <__multiply+0x7c>
 800ee00:	3e01      	subs	r6, #1
 800ee02:	e79b      	b.n	800ed3c <__multiply+0x84>
 800ee04:	08012179 	.word	0x08012179
 800ee08:	0801218a 	.word	0x0801218a

0800ee0c <__pow5mult>:
 800ee0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee10:	4615      	mov	r5, r2
 800ee12:	f012 0203 	ands.w	r2, r2, #3
 800ee16:	4606      	mov	r6, r0
 800ee18:	460f      	mov	r7, r1
 800ee1a:	d007      	beq.n	800ee2c <__pow5mult+0x20>
 800ee1c:	4c25      	ldr	r4, [pc, #148]	; (800eeb4 <__pow5mult+0xa8>)
 800ee1e:	3a01      	subs	r2, #1
 800ee20:	2300      	movs	r3, #0
 800ee22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee26:	f7ff fe53 	bl	800ead0 <__multadd>
 800ee2a:	4607      	mov	r7, r0
 800ee2c:	10ad      	asrs	r5, r5, #2
 800ee2e:	d03d      	beq.n	800eeac <__pow5mult+0xa0>
 800ee30:	69f4      	ldr	r4, [r6, #28]
 800ee32:	b97c      	cbnz	r4, 800ee54 <__pow5mult+0x48>
 800ee34:	2010      	movs	r0, #16
 800ee36:	f7ff fd35 	bl	800e8a4 <malloc>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	61f0      	str	r0, [r6, #28]
 800ee3e:	b928      	cbnz	r0, 800ee4c <__pow5mult+0x40>
 800ee40:	4b1d      	ldr	r3, [pc, #116]	; (800eeb8 <__pow5mult+0xac>)
 800ee42:	481e      	ldr	r0, [pc, #120]	; (800eebc <__pow5mult+0xb0>)
 800ee44:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ee48:	f001 fd46 	bl	80108d8 <__assert_func>
 800ee4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee50:	6004      	str	r4, [r0, #0]
 800ee52:	60c4      	str	r4, [r0, #12]
 800ee54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ee58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee5c:	b94c      	cbnz	r4, 800ee72 <__pow5mult+0x66>
 800ee5e:	f240 2171 	movw	r1, #625	; 0x271
 800ee62:	4630      	mov	r0, r6
 800ee64:	f7ff ff12 	bl	800ec8c <__i2b>
 800ee68:	2300      	movs	r3, #0
 800ee6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee6e:	4604      	mov	r4, r0
 800ee70:	6003      	str	r3, [r0, #0]
 800ee72:	f04f 0900 	mov.w	r9, #0
 800ee76:	07eb      	lsls	r3, r5, #31
 800ee78:	d50a      	bpl.n	800ee90 <__pow5mult+0x84>
 800ee7a:	4639      	mov	r1, r7
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	4630      	mov	r0, r6
 800ee80:	f7ff ff1a 	bl	800ecb8 <__multiply>
 800ee84:	4639      	mov	r1, r7
 800ee86:	4680      	mov	r8, r0
 800ee88:	4630      	mov	r0, r6
 800ee8a:	f7ff fdff 	bl	800ea8c <_Bfree>
 800ee8e:	4647      	mov	r7, r8
 800ee90:	106d      	asrs	r5, r5, #1
 800ee92:	d00b      	beq.n	800eeac <__pow5mult+0xa0>
 800ee94:	6820      	ldr	r0, [r4, #0]
 800ee96:	b938      	cbnz	r0, 800eea8 <__pow5mult+0x9c>
 800ee98:	4622      	mov	r2, r4
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	f7ff ff0b 	bl	800ecb8 <__multiply>
 800eea2:	6020      	str	r0, [r4, #0]
 800eea4:	f8c0 9000 	str.w	r9, [r0]
 800eea8:	4604      	mov	r4, r0
 800eeaa:	e7e4      	b.n	800ee76 <__pow5mult+0x6a>
 800eeac:	4638      	mov	r0, r7
 800eeae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeb2:	bf00      	nop
 800eeb4:	080122d8 	.word	0x080122d8
 800eeb8:	0801210a 	.word	0x0801210a
 800eebc:	0801218a 	.word	0x0801218a

0800eec0 <__lshift>:
 800eec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eec4:	460c      	mov	r4, r1
 800eec6:	6849      	ldr	r1, [r1, #4]
 800eec8:	6923      	ldr	r3, [r4, #16]
 800eeca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eece:	68a3      	ldr	r3, [r4, #8]
 800eed0:	4607      	mov	r7, r0
 800eed2:	4691      	mov	r9, r2
 800eed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eed8:	f108 0601 	add.w	r6, r8, #1
 800eedc:	42b3      	cmp	r3, r6
 800eede:	db0b      	blt.n	800eef8 <__lshift+0x38>
 800eee0:	4638      	mov	r0, r7
 800eee2:	f7ff fd93 	bl	800ea0c <_Balloc>
 800eee6:	4605      	mov	r5, r0
 800eee8:	b948      	cbnz	r0, 800eefe <__lshift+0x3e>
 800eeea:	4602      	mov	r2, r0
 800eeec:	4b28      	ldr	r3, [pc, #160]	; (800ef90 <__lshift+0xd0>)
 800eeee:	4829      	ldr	r0, [pc, #164]	; (800ef94 <__lshift+0xd4>)
 800eef0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800eef4:	f001 fcf0 	bl	80108d8 <__assert_func>
 800eef8:	3101      	adds	r1, #1
 800eefa:	005b      	lsls	r3, r3, #1
 800eefc:	e7ee      	b.n	800eedc <__lshift+0x1c>
 800eefe:	2300      	movs	r3, #0
 800ef00:	f100 0114 	add.w	r1, r0, #20
 800ef04:	f100 0210 	add.w	r2, r0, #16
 800ef08:	4618      	mov	r0, r3
 800ef0a:	4553      	cmp	r3, sl
 800ef0c:	db33      	blt.n	800ef76 <__lshift+0xb6>
 800ef0e:	6920      	ldr	r0, [r4, #16]
 800ef10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef14:	f104 0314 	add.w	r3, r4, #20
 800ef18:	f019 091f 	ands.w	r9, r9, #31
 800ef1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef24:	d02b      	beq.n	800ef7e <__lshift+0xbe>
 800ef26:	f1c9 0e20 	rsb	lr, r9, #32
 800ef2a:	468a      	mov	sl, r1
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	6818      	ldr	r0, [r3, #0]
 800ef30:	fa00 f009 	lsl.w	r0, r0, r9
 800ef34:	4310      	orrs	r0, r2
 800ef36:	f84a 0b04 	str.w	r0, [sl], #4
 800ef3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef3e:	459c      	cmp	ip, r3
 800ef40:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef44:	d8f3      	bhi.n	800ef2e <__lshift+0x6e>
 800ef46:	ebac 0304 	sub.w	r3, ip, r4
 800ef4a:	3b15      	subs	r3, #21
 800ef4c:	f023 0303 	bic.w	r3, r3, #3
 800ef50:	3304      	adds	r3, #4
 800ef52:	f104 0015 	add.w	r0, r4, #21
 800ef56:	4584      	cmp	ip, r0
 800ef58:	bf38      	it	cc
 800ef5a:	2304      	movcc	r3, #4
 800ef5c:	50ca      	str	r2, [r1, r3]
 800ef5e:	b10a      	cbz	r2, 800ef64 <__lshift+0xa4>
 800ef60:	f108 0602 	add.w	r6, r8, #2
 800ef64:	3e01      	subs	r6, #1
 800ef66:	4638      	mov	r0, r7
 800ef68:	612e      	str	r6, [r5, #16]
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	f7ff fd8e 	bl	800ea8c <_Bfree>
 800ef70:	4628      	mov	r0, r5
 800ef72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef76:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	e7c5      	b.n	800ef0a <__lshift+0x4a>
 800ef7e:	3904      	subs	r1, #4
 800ef80:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef84:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef88:	459c      	cmp	ip, r3
 800ef8a:	d8f9      	bhi.n	800ef80 <__lshift+0xc0>
 800ef8c:	e7ea      	b.n	800ef64 <__lshift+0xa4>
 800ef8e:	bf00      	nop
 800ef90:	08012179 	.word	0x08012179
 800ef94:	0801218a 	.word	0x0801218a

0800ef98 <__mcmp>:
 800ef98:	b530      	push	{r4, r5, lr}
 800ef9a:	6902      	ldr	r2, [r0, #16]
 800ef9c:	690c      	ldr	r4, [r1, #16]
 800ef9e:	1b12      	subs	r2, r2, r4
 800efa0:	d10e      	bne.n	800efc0 <__mcmp+0x28>
 800efa2:	f100 0314 	add.w	r3, r0, #20
 800efa6:	3114      	adds	r1, #20
 800efa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800efac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800efb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800efb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800efb8:	42a5      	cmp	r5, r4
 800efba:	d003      	beq.n	800efc4 <__mcmp+0x2c>
 800efbc:	d305      	bcc.n	800efca <__mcmp+0x32>
 800efbe:	2201      	movs	r2, #1
 800efc0:	4610      	mov	r0, r2
 800efc2:	bd30      	pop	{r4, r5, pc}
 800efc4:	4283      	cmp	r3, r0
 800efc6:	d3f3      	bcc.n	800efb0 <__mcmp+0x18>
 800efc8:	e7fa      	b.n	800efc0 <__mcmp+0x28>
 800efca:	f04f 32ff 	mov.w	r2, #4294967295
 800efce:	e7f7      	b.n	800efc0 <__mcmp+0x28>

0800efd0 <__mdiff>:
 800efd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	460c      	mov	r4, r1
 800efd6:	4606      	mov	r6, r0
 800efd8:	4611      	mov	r1, r2
 800efda:	4620      	mov	r0, r4
 800efdc:	4690      	mov	r8, r2
 800efde:	f7ff ffdb 	bl	800ef98 <__mcmp>
 800efe2:	1e05      	subs	r5, r0, #0
 800efe4:	d110      	bne.n	800f008 <__mdiff+0x38>
 800efe6:	4629      	mov	r1, r5
 800efe8:	4630      	mov	r0, r6
 800efea:	f7ff fd0f 	bl	800ea0c <_Balloc>
 800efee:	b930      	cbnz	r0, 800effe <__mdiff+0x2e>
 800eff0:	4b3a      	ldr	r3, [pc, #232]	; (800f0dc <__mdiff+0x10c>)
 800eff2:	4602      	mov	r2, r0
 800eff4:	f240 2137 	movw	r1, #567	; 0x237
 800eff8:	4839      	ldr	r0, [pc, #228]	; (800f0e0 <__mdiff+0x110>)
 800effa:	f001 fc6d 	bl	80108d8 <__assert_func>
 800effe:	2301      	movs	r3, #1
 800f000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f008:	bfa4      	itt	ge
 800f00a:	4643      	movge	r3, r8
 800f00c:	46a0      	movge	r8, r4
 800f00e:	4630      	mov	r0, r6
 800f010:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f014:	bfa6      	itte	ge
 800f016:	461c      	movge	r4, r3
 800f018:	2500      	movge	r5, #0
 800f01a:	2501      	movlt	r5, #1
 800f01c:	f7ff fcf6 	bl	800ea0c <_Balloc>
 800f020:	b920      	cbnz	r0, 800f02c <__mdiff+0x5c>
 800f022:	4b2e      	ldr	r3, [pc, #184]	; (800f0dc <__mdiff+0x10c>)
 800f024:	4602      	mov	r2, r0
 800f026:	f240 2145 	movw	r1, #581	; 0x245
 800f02a:	e7e5      	b.n	800eff8 <__mdiff+0x28>
 800f02c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f030:	6926      	ldr	r6, [r4, #16]
 800f032:	60c5      	str	r5, [r0, #12]
 800f034:	f104 0914 	add.w	r9, r4, #20
 800f038:	f108 0514 	add.w	r5, r8, #20
 800f03c:	f100 0e14 	add.w	lr, r0, #20
 800f040:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f044:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f048:	f108 0210 	add.w	r2, r8, #16
 800f04c:	46f2      	mov	sl, lr
 800f04e:	2100      	movs	r1, #0
 800f050:	f859 3b04 	ldr.w	r3, [r9], #4
 800f054:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f058:	fa11 f88b 	uxtah	r8, r1, fp
 800f05c:	b299      	uxth	r1, r3
 800f05e:	0c1b      	lsrs	r3, r3, #16
 800f060:	eba8 0801 	sub.w	r8, r8, r1
 800f064:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f068:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f06c:	fa1f f888 	uxth.w	r8, r8
 800f070:	1419      	asrs	r1, r3, #16
 800f072:	454e      	cmp	r6, r9
 800f074:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f078:	f84a 3b04 	str.w	r3, [sl], #4
 800f07c:	d8e8      	bhi.n	800f050 <__mdiff+0x80>
 800f07e:	1b33      	subs	r3, r6, r4
 800f080:	3b15      	subs	r3, #21
 800f082:	f023 0303 	bic.w	r3, r3, #3
 800f086:	3304      	adds	r3, #4
 800f088:	3415      	adds	r4, #21
 800f08a:	42a6      	cmp	r6, r4
 800f08c:	bf38      	it	cc
 800f08e:	2304      	movcc	r3, #4
 800f090:	441d      	add	r5, r3
 800f092:	4473      	add	r3, lr
 800f094:	469e      	mov	lr, r3
 800f096:	462e      	mov	r6, r5
 800f098:	4566      	cmp	r6, ip
 800f09a:	d30e      	bcc.n	800f0ba <__mdiff+0xea>
 800f09c:	f10c 0203 	add.w	r2, ip, #3
 800f0a0:	1b52      	subs	r2, r2, r5
 800f0a2:	f022 0203 	bic.w	r2, r2, #3
 800f0a6:	3d03      	subs	r5, #3
 800f0a8:	45ac      	cmp	ip, r5
 800f0aa:	bf38      	it	cc
 800f0ac:	2200      	movcc	r2, #0
 800f0ae:	4413      	add	r3, r2
 800f0b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f0b4:	b17a      	cbz	r2, 800f0d6 <__mdiff+0x106>
 800f0b6:	6107      	str	r7, [r0, #16]
 800f0b8:	e7a4      	b.n	800f004 <__mdiff+0x34>
 800f0ba:	f856 8b04 	ldr.w	r8, [r6], #4
 800f0be:	fa11 f288 	uxtah	r2, r1, r8
 800f0c2:	1414      	asrs	r4, r2, #16
 800f0c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f0c8:	b292      	uxth	r2, r2
 800f0ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f0ce:	f84e 2b04 	str.w	r2, [lr], #4
 800f0d2:	1421      	asrs	r1, r4, #16
 800f0d4:	e7e0      	b.n	800f098 <__mdiff+0xc8>
 800f0d6:	3f01      	subs	r7, #1
 800f0d8:	e7ea      	b.n	800f0b0 <__mdiff+0xe0>
 800f0da:	bf00      	nop
 800f0dc:	08012179 	.word	0x08012179
 800f0e0:	0801218a 	.word	0x0801218a

0800f0e4 <__ulp>:
 800f0e4:	b082      	sub	sp, #8
 800f0e6:	ed8d 0b00 	vstr	d0, [sp]
 800f0ea:	9a01      	ldr	r2, [sp, #4]
 800f0ec:	4b0f      	ldr	r3, [pc, #60]	; (800f12c <__ulp+0x48>)
 800f0ee:	4013      	ands	r3, r2
 800f0f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	dc08      	bgt.n	800f10a <__ulp+0x26>
 800f0f8:	425b      	negs	r3, r3
 800f0fa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f0fe:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f102:	da04      	bge.n	800f10e <__ulp+0x2a>
 800f104:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f108:	4113      	asrs	r3, r2
 800f10a:	2200      	movs	r2, #0
 800f10c:	e008      	b.n	800f120 <__ulp+0x3c>
 800f10e:	f1a2 0314 	sub.w	r3, r2, #20
 800f112:	2b1e      	cmp	r3, #30
 800f114:	bfda      	itte	le
 800f116:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f11a:	40da      	lsrle	r2, r3
 800f11c:	2201      	movgt	r2, #1
 800f11e:	2300      	movs	r3, #0
 800f120:	4619      	mov	r1, r3
 800f122:	4610      	mov	r0, r2
 800f124:	ec41 0b10 	vmov	d0, r0, r1
 800f128:	b002      	add	sp, #8
 800f12a:	4770      	bx	lr
 800f12c:	7ff00000 	.word	0x7ff00000

0800f130 <__b2d>:
 800f130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f134:	6906      	ldr	r6, [r0, #16]
 800f136:	f100 0814 	add.w	r8, r0, #20
 800f13a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f13e:	1f37      	subs	r7, r6, #4
 800f140:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f144:	4610      	mov	r0, r2
 800f146:	f7ff fd53 	bl	800ebf0 <__hi0bits>
 800f14a:	f1c0 0320 	rsb	r3, r0, #32
 800f14e:	280a      	cmp	r0, #10
 800f150:	600b      	str	r3, [r1, #0]
 800f152:	491b      	ldr	r1, [pc, #108]	; (800f1c0 <__b2d+0x90>)
 800f154:	dc15      	bgt.n	800f182 <__b2d+0x52>
 800f156:	f1c0 0c0b 	rsb	ip, r0, #11
 800f15a:	fa22 f30c 	lsr.w	r3, r2, ip
 800f15e:	45b8      	cmp	r8, r7
 800f160:	ea43 0501 	orr.w	r5, r3, r1
 800f164:	bf34      	ite	cc
 800f166:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f16a:	2300      	movcs	r3, #0
 800f16c:	3015      	adds	r0, #21
 800f16e:	fa02 f000 	lsl.w	r0, r2, r0
 800f172:	fa23 f30c 	lsr.w	r3, r3, ip
 800f176:	4303      	orrs	r3, r0
 800f178:	461c      	mov	r4, r3
 800f17a:	ec45 4b10 	vmov	d0, r4, r5
 800f17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f182:	45b8      	cmp	r8, r7
 800f184:	bf3a      	itte	cc
 800f186:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f18a:	f1a6 0708 	subcc.w	r7, r6, #8
 800f18e:	2300      	movcs	r3, #0
 800f190:	380b      	subs	r0, #11
 800f192:	d012      	beq.n	800f1ba <__b2d+0x8a>
 800f194:	f1c0 0120 	rsb	r1, r0, #32
 800f198:	fa23 f401 	lsr.w	r4, r3, r1
 800f19c:	4082      	lsls	r2, r0
 800f19e:	4322      	orrs	r2, r4
 800f1a0:	4547      	cmp	r7, r8
 800f1a2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800f1a6:	bf8c      	ite	hi
 800f1a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f1ac:	2200      	movls	r2, #0
 800f1ae:	4083      	lsls	r3, r0
 800f1b0:	40ca      	lsrs	r2, r1
 800f1b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	e7de      	b.n	800f178 <__b2d+0x48>
 800f1ba:	ea42 0501 	orr.w	r5, r2, r1
 800f1be:	e7db      	b.n	800f178 <__b2d+0x48>
 800f1c0:	3ff00000 	.word	0x3ff00000

0800f1c4 <__d2b>:
 800f1c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1c8:	460f      	mov	r7, r1
 800f1ca:	2101      	movs	r1, #1
 800f1cc:	ec59 8b10 	vmov	r8, r9, d0
 800f1d0:	4616      	mov	r6, r2
 800f1d2:	f7ff fc1b 	bl	800ea0c <_Balloc>
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	b930      	cbnz	r0, 800f1e8 <__d2b+0x24>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	4b24      	ldr	r3, [pc, #144]	; (800f270 <__d2b+0xac>)
 800f1de:	4825      	ldr	r0, [pc, #148]	; (800f274 <__d2b+0xb0>)
 800f1e0:	f240 310f 	movw	r1, #783	; 0x30f
 800f1e4:	f001 fb78 	bl	80108d8 <__assert_func>
 800f1e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f1ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f1f0:	bb2d      	cbnz	r5, 800f23e <__d2b+0x7a>
 800f1f2:	9301      	str	r3, [sp, #4]
 800f1f4:	f1b8 0300 	subs.w	r3, r8, #0
 800f1f8:	d026      	beq.n	800f248 <__d2b+0x84>
 800f1fa:	4668      	mov	r0, sp
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	f7ff fd17 	bl	800ec30 <__lo0bits>
 800f202:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f206:	b1e8      	cbz	r0, 800f244 <__d2b+0x80>
 800f208:	f1c0 0320 	rsb	r3, r0, #32
 800f20c:	fa02 f303 	lsl.w	r3, r2, r3
 800f210:	430b      	orrs	r3, r1
 800f212:	40c2      	lsrs	r2, r0
 800f214:	6163      	str	r3, [r4, #20]
 800f216:	9201      	str	r2, [sp, #4]
 800f218:	9b01      	ldr	r3, [sp, #4]
 800f21a:	61a3      	str	r3, [r4, #24]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	bf14      	ite	ne
 800f220:	2202      	movne	r2, #2
 800f222:	2201      	moveq	r2, #1
 800f224:	6122      	str	r2, [r4, #16]
 800f226:	b1bd      	cbz	r5, 800f258 <__d2b+0x94>
 800f228:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f22c:	4405      	add	r5, r0
 800f22e:	603d      	str	r5, [r7, #0]
 800f230:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f234:	6030      	str	r0, [r6, #0]
 800f236:	4620      	mov	r0, r4
 800f238:	b003      	add	sp, #12
 800f23a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f23e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f242:	e7d6      	b.n	800f1f2 <__d2b+0x2e>
 800f244:	6161      	str	r1, [r4, #20]
 800f246:	e7e7      	b.n	800f218 <__d2b+0x54>
 800f248:	a801      	add	r0, sp, #4
 800f24a:	f7ff fcf1 	bl	800ec30 <__lo0bits>
 800f24e:	9b01      	ldr	r3, [sp, #4]
 800f250:	6163      	str	r3, [r4, #20]
 800f252:	3020      	adds	r0, #32
 800f254:	2201      	movs	r2, #1
 800f256:	e7e5      	b.n	800f224 <__d2b+0x60>
 800f258:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f25c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f260:	6038      	str	r0, [r7, #0]
 800f262:	6918      	ldr	r0, [r3, #16]
 800f264:	f7ff fcc4 	bl	800ebf0 <__hi0bits>
 800f268:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f26c:	e7e2      	b.n	800f234 <__d2b+0x70>
 800f26e:	bf00      	nop
 800f270:	08012179 	.word	0x08012179
 800f274:	0801218a 	.word	0x0801218a

0800f278 <__ratio>:
 800f278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f27c:	4688      	mov	r8, r1
 800f27e:	4669      	mov	r1, sp
 800f280:	4681      	mov	r9, r0
 800f282:	f7ff ff55 	bl	800f130 <__b2d>
 800f286:	a901      	add	r1, sp, #4
 800f288:	4640      	mov	r0, r8
 800f28a:	ec55 4b10 	vmov	r4, r5, d0
 800f28e:	f7ff ff4f 	bl	800f130 <__b2d>
 800f292:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f296:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f29a:	eba3 0c02 	sub.w	ip, r3, r2
 800f29e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f2a2:	1a9b      	subs	r3, r3, r2
 800f2a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f2a8:	ec51 0b10 	vmov	r0, r1, d0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	bfd6      	itet	le
 800f2b0:	460a      	movle	r2, r1
 800f2b2:	462a      	movgt	r2, r5
 800f2b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f2b8:	468b      	mov	fp, r1
 800f2ba:	462f      	mov	r7, r5
 800f2bc:	bfd4      	ite	le
 800f2be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f2c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	ee10 2a10 	vmov	r2, s0
 800f2cc:	465b      	mov	r3, fp
 800f2ce:	4639      	mov	r1, r7
 800f2d0:	f7f1 fabc 	bl	800084c <__aeabi_ddiv>
 800f2d4:	ec41 0b10 	vmov	d0, r0, r1
 800f2d8:	b003      	add	sp, #12
 800f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f2de <__copybits>:
 800f2de:	3901      	subs	r1, #1
 800f2e0:	b570      	push	{r4, r5, r6, lr}
 800f2e2:	1149      	asrs	r1, r1, #5
 800f2e4:	6914      	ldr	r4, [r2, #16]
 800f2e6:	3101      	adds	r1, #1
 800f2e8:	f102 0314 	add.w	r3, r2, #20
 800f2ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f2f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f2f4:	1f05      	subs	r5, r0, #4
 800f2f6:	42a3      	cmp	r3, r4
 800f2f8:	d30c      	bcc.n	800f314 <__copybits+0x36>
 800f2fa:	1aa3      	subs	r3, r4, r2
 800f2fc:	3b11      	subs	r3, #17
 800f2fe:	f023 0303 	bic.w	r3, r3, #3
 800f302:	3211      	adds	r2, #17
 800f304:	42a2      	cmp	r2, r4
 800f306:	bf88      	it	hi
 800f308:	2300      	movhi	r3, #0
 800f30a:	4418      	add	r0, r3
 800f30c:	2300      	movs	r3, #0
 800f30e:	4288      	cmp	r0, r1
 800f310:	d305      	bcc.n	800f31e <__copybits+0x40>
 800f312:	bd70      	pop	{r4, r5, r6, pc}
 800f314:	f853 6b04 	ldr.w	r6, [r3], #4
 800f318:	f845 6f04 	str.w	r6, [r5, #4]!
 800f31c:	e7eb      	b.n	800f2f6 <__copybits+0x18>
 800f31e:	f840 3b04 	str.w	r3, [r0], #4
 800f322:	e7f4      	b.n	800f30e <__copybits+0x30>

0800f324 <__any_on>:
 800f324:	f100 0214 	add.w	r2, r0, #20
 800f328:	6900      	ldr	r0, [r0, #16]
 800f32a:	114b      	asrs	r3, r1, #5
 800f32c:	4298      	cmp	r0, r3
 800f32e:	b510      	push	{r4, lr}
 800f330:	db11      	blt.n	800f356 <__any_on+0x32>
 800f332:	dd0a      	ble.n	800f34a <__any_on+0x26>
 800f334:	f011 011f 	ands.w	r1, r1, #31
 800f338:	d007      	beq.n	800f34a <__any_on+0x26>
 800f33a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f33e:	fa24 f001 	lsr.w	r0, r4, r1
 800f342:	fa00 f101 	lsl.w	r1, r0, r1
 800f346:	428c      	cmp	r4, r1
 800f348:	d10b      	bne.n	800f362 <__any_on+0x3e>
 800f34a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f34e:	4293      	cmp	r3, r2
 800f350:	d803      	bhi.n	800f35a <__any_on+0x36>
 800f352:	2000      	movs	r0, #0
 800f354:	bd10      	pop	{r4, pc}
 800f356:	4603      	mov	r3, r0
 800f358:	e7f7      	b.n	800f34a <__any_on+0x26>
 800f35a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f35e:	2900      	cmp	r1, #0
 800f360:	d0f5      	beq.n	800f34e <__any_on+0x2a>
 800f362:	2001      	movs	r0, #1
 800f364:	e7f6      	b.n	800f354 <__any_on+0x30>

0800f366 <sulp>:
 800f366:	b570      	push	{r4, r5, r6, lr}
 800f368:	4604      	mov	r4, r0
 800f36a:	460d      	mov	r5, r1
 800f36c:	ec45 4b10 	vmov	d0, r4, r5
 800f370:	4616      	mov	r6, r2
 800f372:	f7ff feb7 	bl	800f0e4 <__ulp>
 800f376:	ec51 0b10 	vmov	r0, r1, d0
 800f37a:	b17e      	cbz	r6, 800f39c <sulp+0x36>
 800f37c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f380:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f384:	2b00      	cmp	r3, #0
 800f386:	dd09      	ble.n	800f39c <sulp+0x36>
 800f388:	051b      	lsls	r3, r3, #20
 800f38a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f38e:	2400      	movs	r4, #0
 800f390:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f394:	4622      	mov	r2, r4
 800f396:	462b      	mov	r3, r5
 800f398:	f7f1 f92e 	bl	80005f8 <__aeabi_dmul>
 800f39c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f3a0 <_strtod_l>:
 800f3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3a4:	ed2d 8b02 	vpush	{d8}
 800f3a8:	b09b      	sub	sp, #108	; 0x6c
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	9213      	str	r2, [sp, #76]	; 0x4c
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	9216      	str	r2, [sp, #88]	; 0x58
 800f3b2:	460d      	mov	r5, r1
 800f3b4:	f04f 0800 	mov.w	r8, #0
 800f3b8:	f04f 0900 	mov.w	r9, #0
 800f3bc:	460a      	mov	r2, r1
 800f3be:	9215      	str	r2, [sp, #84]	; 0x54
 800f3c0:	7811      	ldrb	r1, [r2, #0]
 800f3c2:	292b      	cmp	r1, #43	; 0x2b
 800f3c4:	d04c      	beq.n	800f460 <_strtod_l+0xc0>
 800f3c6:	d83a      	bhi.n	800f43e <_strtod_l+0x9e>
 800f3c8:	290d      	cmp	r1, #13
 800f3ca:	d834      	bhi.n	800f436 <_strtod_l+0x96>
 800f3cc:	2908      	cmp	r1, #8
 800f3ce:	d834      	bhi.n	800f43a <_strtod_l+0x9a>
 800f3d0:	2900      	cmp	r1, #0
 800f3d2:	d03d      	beq.n	800f450 <_strtod_l+0xb0>
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	920a      	str	r2, [sp, #40]	; 0x28
 800f3d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800f3da:	7832      	ldrb	r2, [r6, #0]
 800f3dc:	2a30      	cmp	r2, #48	; 0x30
 800f3de:	f040 80b4 	bne.w	800f54a <_strtod_l+0x1aa>
 800f3e2:	7872      	ldrb	r2, [r6, #1]
 800f3e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800f3e8:	2a58      	cmp	r2, #88	; 0x58
 800f3ea:	d170      	bne.n	800f4ce <_strtod_l+0x12e>
 800f3ec:	9302      	str	r3, [sp, #8]
 800f3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3f0:	9301      	str	r3, [sp, #4]
 800f3f2:	ab16      	add	r3, sp, #88	; 0x58
 800f3f4:	9300      	str	r3, [sp, #0]
 800f3f6:	4a8e      	ldr	r2, [pc, #568]	; (800f630 <_strtod_l+0x290>)
 800f3f8:	ab17      	add	r3, sp, #92	; 0x5c
 800f3fa:	a915      	add	r1, sp, #84	; 0x54
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f001 fb07 	bl	8010a10 <__gethex>
 800f402:	f010 070f 	ands.w	r7, r0, #15
 800f406:	4605      	mov	r5, r0
 800f408:	d005      	beq.n	800f416 <_strtod_l+0x76>
 800f40a:	2f06      	cmp	r7, #6
 800f40c:	d12a      	bne.n	800f464 <_strtod_l+0xc4>
 800f40e:	3601      	adds	r6, #1
 800f410:	2300      	movs	r3, #0
 800f412:	9615      	str	r6, [sp, #84]	; 0x54
 800f414:	930a      	str	r3, [sp, #40]	; 0x28
 800f416:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f418:	2b00      	cmp	r3, #0
 800f41a:	f040 857f 	bne.w	800ff1c <_strtod_l+0xb7c>
 800f41e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f420:	b1db      	cbz	r3, 800f45a <_strtod_l+0xba>
 800f422:	4642      	mov	r2, r8
 800f424:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f428:	ec43 2b10 	vmov	d0, r2, r3
 800f42c:	b01b      	add	sp, #108	; 0x6c
 800f42e:	ecbd 8b02 	vpop	{d8}
 800f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f436:	2920      	cmp	r1, #32
 800f438:	d1cc      	bne.n	800f3d4 <_strtod_l+0x34>
 800f43a:	3201      	adds	r2, #1
 800f43c:	e7bf      	b.n	800f3be <_strtod_l+0x1e>
 800f43e:	292d      	cmp	r1, #45	; 0x2d
 800f440:	d1c8      	bne.n	800f3d4 <_strtod_l+0x34>
 800f442:	2101      	movs	r1, #1
 800f444:	910a      	str	r1, [sp, #40]	; 0x28
 800f446:	1c51      	adds	r1, r2, #1
 800f448:	9115      	str	r1, [sp, #84]	; 0x54
 800f44a:	7852      	ldrb	r2, [r2, #1]
 800f44c:	2a00      	cmp	r2, #0
 800f44e:	d1c3      	bne.n	800f3d8 <_strtod_l+0x38>
 800f450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f452:	9515      	str	r5, [sp, #84]	; 0x54
 800f454:	2b00      	cmp	r3, #0
 800f456:	f040 855f 	bne.w	800ff18 <_strtod_l+0xb78>
 800f45a:	4642      	mov	r2, r8
 800f45c:	464b      	mov	r3, r9
 800f45e:	e7e3      	b.n	800f428 <_strtod_l+0x88>
 800f460:	2100      	movs	r1, #0
 800f462:	e7ef      	b.n	800f444 <_strtod_l+0xa4>
 800f464:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f466:	b13a      	cbz	r2, 800f478 <_strtod_l+0xd8>
 800f468:	2135      	movs	r1, #53	; 0x35
 800f46a:	a818      	add	r0, sp, #96	; 0x60
 800f46c:	f7ff ff37 	bl	800f2de <__copybits>
 800f470:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f472:	4620      	mov	r0, r4
 800f474:	f7ff fb0a 	bl	800ea8c <_Bfree>
 800f478:	3f01      	subs	r7, #1
 800f47a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f47c:	2f04      	cmp	r7, #4
 800f47e:	d806      	bhi.n	800f48e <_strtod_l+0xee>
 800f480:	e8df f007 	tbb	[pc, r7]
 800f484:	201d0314 	.word	0x201d0314
 800f488:	14          	.byte	0x14
 800f489:	00          	.byte	0x00
 800f48a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800f48e:	05e9      	lsls	r1, r5, #23
 800f490:	bf48      	it	mi
 800f492:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800f496:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f49a:	0d1b      	lsrs	r3, r3, #20
 800f49c:	051b      	lsls	r3, r3, #20
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1b9      	bne.n	800f416 <_strtod_l+0x76>
 800f4a2:	f7fe fb05 	bl	800dab0 <__errno>
 800f4a6:	2322      	movs	r3, #34	; 0x22
 800f4a8:	6003      	str	r3, [r0, #0]
 800f4aa:	e7b4      	b.n	800f416 <_strtod_l+0x76>
 800f4ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800f4b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f4b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f4b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800f4bc:	e7e7      	b.n	800f48e <_strtod_l+0xee>
 800f4be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f638 <_strtod_l+0x298>
 800f4c2:	e7e4      	b.n	800f48e <_strtod_l+0xee>
 800f4c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800f4c8:	f04f 38ff 	mov.w	r8, #4294967295
 800f4cc:	e7df      	b.n	800f48e <_strtod_l+0xee>
 800f4ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4d0:	1c5a      	adds	r2, r3, #1
 800f4d2:	9215      	str	r2, [sp, #84]	; 0x54
 800f4d4:	785b      	ldrb	r3, [r3, #1]
 800f4d6:	2b30      	cmp	r3, #48	; 0x30
 800f4d8:	d0f9      	beq.n	800f4ce <_strtod_l+0x12e>
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d09b      	beq.n	800f416 <_strtod_l+0x76>
 800f4de:	2301      	movs	r3, #1
 800f4e0:	f04f 0a00 	mov.w	sl, #0
 800f4e4:	9304      	str	r3, [sp, #16]
 800f4e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f4e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f4ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f4ee:	46d3      	mov	fp, sl
 800f4f0:	220a      	movs	r2, #10
 800f4f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800f4f4:	7806      	ldrb	r6, [r0, #0]
 800f4f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f4fa:	b2d9      	uxtb	r1, r3
 800f4fc:	2909      	cmp	r1, #9
 800f4fe:	d926      	bls.n	800f54e <_strtod_l+0x1ae>
 800f500:	494c      	ldr	r1, [pc, #304]	; (800f634 <_strtod_l+0x294>)
 800f502:	2201      	movs	r2, #1
 800f504:	f001 f98c 	bl	8010820 <strncmp>
 800f508:	2800      	cmp	r0, #0
 800f50a:	d030      	beq.n	800f56e <_strtod_l+0x1ce>
 800f50c:	2000      	movs	r0, #0
 800f50e:	4632      	mov	r2, r6
 800f510:	9005      	str	r0, [sp, #20]
 800f512:	465e      	mov	r6, fp
 800f514:	4603      	mov	r3, r0
 800f516:	2a65      	cmp	r2, #101	; 0x65
 800f518:	d001      	beq.n	800f51e <_strtod_l+0x17e>
 800f51a:	2a45      	cmp	r2, #69	; 0x45
 800f51c:	d113      	bne.n	800f546 <_strtod_l+0x1a6>
 800f51e:	b91e      	cbnz	r6, 800f528 <_strtod_l+0x188>
 800f520:	9a04      	ldr	r2, [sp, #16]
 800f522:	4302      	orrs	r2, r0
 800f524:	d094      	beq.n	800f450 <_strtod_l+0xb0>
 800f526:	2600      	movs	r6, #0
 800f528:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800f52a:	1c6a      	adds	r2, r5, #1
 800f52c:	9215      	str	r2, [sp, #84]	; 0x54
 800f52e:	786a      	ldrb	r2, [r5, #1]
 800f530:	2a2b      	cmp	r2, #43	; 0x2b
 800f532:	d074      	beq.n	800f61e <_strtod_l+0x27e>
 800f534:	2a2d      	cmp	r2, #45	; 0x2d
 800f536:	d078      	beq.n	800f62a <_strtod_l+0x28a>
 800f538:	f04f 0c00 	mov.w	ip, #0
 800f53c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f540:	2909      	cmp	r1, #9
 800f542:	d97f      	bls.n	800f644 <_strtod_l+0x2a4>
 800f544:	9515      	str	r5, [sp, #84]	; 0x54
 800f546:	2700      	movs	r7, #0
 800f548:	e09e      	b.n	800f688 <_strtod_l+0x2e8>
 800f54a:	2300      	movs	r3, #0
 800f54c:	e7c8      	b.n	800f4e0 <_strtod_l+0x140>
 800f54e:	f1bb 0f08 	cmp.w	fp, #8
 800f552:	bfd8      	it	le
 800f554:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f556:	f100 0001 	add.w	r0, r0, #1
 800f55a:	bfda      	itte	le
 800f55c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f560:	9309      	strle	r3, [sp, #36]	; 0x24
 800f562:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800f566:	f10b 0b01 	add.w	fp, fp, #1
 800f56a:	9015      	str	r0, [sp, #84]	; 0x54
 800f56c:	e7c1      	b.n	800f4f2 <_strtod_l+0x152>
 800f56e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f570:	1c5a      	adds	r2, r3, #1
 800f572:	9215      	str	r2, [sp, #84]	; 0x54
 800f574:	785a      	ldrb	r2, [r3, #1]
 800f576:	f1bb 0f00 	cmp.w	fp, #0
 800f57a:	d037      	beq.n	800f5ec <_strtod_l+0x24c>
 800f57c:	9005      	str	r0, [sp, #20]
 800f57e:	465e      	mov	r6, fp
 800f580:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f584:	2b09      	cmp	r3, #9
 800f586:	d912      	bls.n	800f5ae <_strtod_l+0x20e>
 800f588:	2301      	movs	r3, #1
 800f58a:	e7c4      	b.n	800f516 <_strtod_l+0x176>
 800f58c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f58e:	1c5a      	adds	r2, r3, #1
 800f590:	9215      	str	r2, [sp, #84]	; 0x54
 800f592:	785a      	ldrb	r2, [r3, #1]
 800f594:	3001      	adds	r0, #1
 800f596:	2a30      	cmp	r2, #48	; 0x30
 800f598:	d0f8      	beq.n	800f58c <_strtod_l+0x1ec>
 800f59a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f59e:	2b08      	cmp	r3, #8
 800f5a0:	f200 84c1 	bhi.w	800ff26 <_strtod_l+0xb86>
 800f5a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5a6:	9005      	str	r0, [sp, #20]
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5ac:	4606      	mov	r6, r0
 800f5ae:	3a30      	subs	r2, #48	; 0x30
 800f5b0:	f100 0301 	add.w	r3, r0, #1
 800f5b4:	d014      	beq.n	800f5e0 <_strtod_l+0x240>
 800f5b6:	9905      	ldr	r1, [sp, #20]
 800f5b8:	4419      	add	r1, r3
 800f5ba:	9105      	str	r1, [sp, #20]
 800f5bc:	4633      	mov	r3, r6
 800f5be:	eb00 0c06 	add.w	ip, r0, r6
 800f5c2:	210a      	movs	r1, #10
 800f5c4:	4563      	cmp	r3, ip
 800f5c6:	d113      	bne.n	800f5f0 <_strtod_l+0x250>
 800f5c8:	1833      	adds	r3, r6, r0
 800f5ca:	2b08      	cmp	r3, #8
 800f5cc:	f106 0601 	add.w	r6, r6, #1
 800f5d0:	4406      	add	r6, r0
 800f5d2:	dc1a      	bgt.n	800f60a <_strtod_l+0x26a>
 800f5d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5d6:	230a      	movs	r3, #10
 800f5d8:	fb03 2301 	mla	r3, r3, r1, r2
 800f5dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f5de:	2300      	movs	r3, #0
 800f5e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f5e2:	1c51      	adds	r1, r2, #1
 800f5e4:	9115      	str	r1, [sp, #84]	; 0x54
 800f5e6:	7852      	ldrb	r2, [r2, #1]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	e7c9      	b.n	800f580 <_strtod_l+0x1e0>
 800f5ec:	4658      	mov	r0, fp
 800f5ee:	e7d2      	b.n	800f596 <_strtod_l+0x1f6>
 800f5f0:	2b08      	cmp	r3, #8
 800f5f2:	f103 0301 	add.w	r3, r3, #1
 800f5f6:	dc03      	bgt.n	800f600 <_strtod_l+0x260>
 800f5f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f5fa:	434f      	muls	r7, r1
 800f5fc:	9709      	str	r7, [sp, #36]	; 0x24
 800f5fe:	e7e1      	b.n	800f5c4 <_strtod_l+0x224>
 800f600:	2b10      	cmp	r3, #16
 800f602:	bfd8      	it	le
 800f604:	fb01 fa0a 	mulle.w	sl, r1, sl
 800f608:	e7dc      	b.n	800f5c4 <_strtod_l+0x224>
 800f60a:	2e10      	cmp	r6, #16
 800f60c:	bfdc      	itt	le
 800f60e:	230a      	movle	r3, #10
 800f610:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800f614:	e7e3      	b.n	800f5de <_strtod_l+0x23e>
 800f616:	2300      	movs	r3, #0
 800f618:	9305      	str	r3, [sp, #20]
 800f61a:	2301      	movs	r3, #1
 800f61c:	e780      	b.n	800f520 <_strtod_l+0x180>
 800f61e:	f04f 0c00 	mov.w	ip, #0
 800f622:	1caa      	adds	r2, r5, #2
 800f624:	9215      	str	r2, [sp, #84]	; 0x54
 800f626:	78aa      	ldrb	r2, [r5, #2]
 800f628:	e788      	b.n	800f53c <_strtod_l+0x19c>
 800f62a:	f04f 0c01 	mov.w	ip, #1
 800f62e:	e7f8      	b.n	800f622 <_strtod_l+0x282>
 800f630:	080122e8 	.word	0x080122e8
 800f634:	080122e4 	.word	0x080122e4
 800f638:	7ff00000 	.word	0x7ff00000
 800f63c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f63e:	1c51      	adds	r1, r2, #1
 800f640:	9115      	str	r1, [sp, #84]	; 0x54
 800f642:	7852      	ldrb	r2, [r2, #1]
 800f644:	2a30      	cmp	r2, #48	; 0x30
 800f646:	d0f9      	beq.n	800f63c <_strtod_l+0x29c>
 800f648:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f64c:	2908      	cmp	r1, #8
 800f64e:	f63f af7a 	bhi.w	800f546 <_strtod_l+0x1a6>
 800f652:	3a30      	subs	r2, #48	; 0x30
 800f654:	9208      	str	r2, [sp, #32]
 800f656:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f658:	920c      	str	r2, [sp, #48]	; 0x30
 800f65a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800f65c:	1c57      	adds	r7, r2, #1
 800f65e:	9715      	str	r7, [sp, #84]	; 0x54
 800f660:	7852      	ldrb	r2, [r2, #1]
 800f662:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f666:	f1be 0f09 	cmp.w	lr, #9
 800f66a:	d938      	bls.n	800f6de <_strtod_l+0x33e>
 800f66c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f66e:	1a7f      	subs	r7, r7, r1
 800f670:	2f08      	cmp	r7, #8
 800f672:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f676:	dc03      	bgt.n	800f680 <_strtod_l+0x2e0>
 800f678:	9908      	ldr	r1, [sp, #32]
 800f67a:	428f      	cmp	r7, r1
 800f67c:	bfa8      	it	ge
 800f67e:	460f      	movge	r7, r1
 800f680:	f1bc 0f00 	cmp.w	ip, #0
 800f684:	d000      	beq.n	800f688 <_strtod_l+0x2e8>
 800f686:	427f      	negs	r7, r7
 800f688:	2e00      	cmp	r6, #0
 800f68a:	d14f      	bne.n	800f72c <_strtod_l+0x38c>
 800f68c:	9904      	ldr	r1, [sp, #16]
 800f68e:	4301      	orrs	r1, r0
 800f690:	f47f aec1 	bne.w	800f416 <_strtod_l+0x76>
 800f694:	2b00      	cmp	r3, #0
 800f696:	f47f aedb 	bne.w	800f450 <_strtod_l+0xb0>
 800f69a:	2a69      	cmp	r2, #105	; 0x69
 800f69c:	d029      	beq.n	800f6f2 <_strtod_l+0x352>
 800f69e:	dc26      	bgt.n	800f6ee <_strtod_l+0x34e>
 800f6a0:	2a49      	cmp	r2, #73	; 0x49
 800f6a2:	d026      	beq.n	800f6f2 <_strtod_l+0x352>
 800f6a4:	2a4e      	cmp	r2, #78	; 0x4e
 800f6a6:	f47f aed3 	bne.w	800f450 <_strtod_l+0xb0>
 800f6aa:	499b      	ldr	r1, [pc, #620]	; (800f918 <_strtod_l+0x578>)
 800f6ac:	a815      	add	r0, sp, #84	; 0x54
 800f6ae:	f001 fbef 	bl	8010e90 <__match>
 800f6b2:	2800      	cmp	r0, #0
 800f6b4:	f43f aecc 	beq.w	800f450 <_strtod_l+0xb0>
 800f6b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	2b28      	cmp	r3, #40	; 0x28
 800f6be:	d12f      	bne.n	800f720 <_strtod_l+0x380>
 800f6c0:	4996      	ldr	r1, [pc, #600]	; (800f91c <_strtod_l+0x57c>)
 800f6c2:	aa18      	add	r2, sp, #96	; 0x60
 800f6c4:	a815      	add	r0, sp, #84	; 0x54
 800f6c6:	f001 fbf7 	bl	8010eb8 <__hexnan>
 800f6ca:	2805      	cmp	r0, #5
 800f6cc:	d128      	bne.n	800f720 <_strtod_l+0x380>
 800f6ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f6d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f6d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800f6d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800f6dc:	e69b      	b.n	800f416 <_strtod_l+0x76>
 800f6de:	9f08      	ldr	r7, [sp, #32]
 800f6e0:	210a      	movs	r1, #10
 800f6e2:	fb01 2107 	mla	r1, r1, r7, r2
 800f6e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800f6ea:	9208      	str	r2, [sp, #32]
 800f6ec:	e7b5      	b.n	800f65a <_strtod_l+0x2ba>
 800f6ee:	2a6e      	cmp	r2, #110	; 0x6e
 800f6f0:	e7d9      	b.n	800f6a6 <_strtod_l+0x306>
 800f6f2:	498b      	ldr	r1, [pc, #556]	; (800f920 <_strtod_l+0x580>)
 800f6f4:	a815      	add	r0, sp, #84	; 0x54
 800f6f6:	f001 fbcb 	bl	8010e90 <__match>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	f43f aea8 	beq.w	800f450 <_strtod_l+0xb0>
 800f700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f702:	4988      	ldr	r1, [pc, #544]	; (800f924 <_strtod_l+0x584>)
 800f704:	3b01      	subs	r3, #1
 800f706:	a815      	add	r0, sp, #84	; 0x54
 800f708:	9315      	str	r3, [sp, #84]	; 0x54
 800f70a:	f001 fbc1 	bl	8010e90 <__match>
 800f70e:	b910      	cbnz	r0, 800f716 <_strtod_l+0x376>
 800f710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f712:	3301      	adds	r3, #1
 800f714:	9315      	str	r3, [sp, #84]	; 0x54
 800f716:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800f934 <_strtod_l+0x594>
 800f71a:	f04f 0800 	mov.w	r8, #0
 800f71e:	e67a      	b.n	800f416 <_strtod_l+0x76>
 800f720:	4881      	ldr	r0, [pc, #516]	; (800f928 <_strtod_l+0x588>)
 800f722:	f001 f8d1 	bl	80108c8 <nan>
 800f726:	ec59 8b10 	vmov	r8, r9, d0
 800f72a:	e674      	b.n	800f416 <_strtod_l+0x76>
 800f72c:	9b05      	ldr	r3, [sp, #20]
 800f72e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f730:	1afb      	subs	r3, r7, r3
 800f732:	f1bb 0f00 	cmp.w	fp, #0
 800f736:	bf08      	it	eq
 800f738:	46b3      	moveq	fp, r6
 800f73a:	2e10      	cmp	r6, #16
 800f73c:	9308      	str	r3, [sp, #32]
 800f73e:	4635      	mov	r5, r6
 800f740:	bfa8      	it	ge
 800f742:	2510      	movge	r5, #16
 800f744:	f7f0 fede 	bl	8000504 <__aeabi_ui2d>
 800f748:	2e09      	cmp	r6, #9
 800f74a:	4680      	mov	r8, r0
 800f74c:	4689      	mov	r9, r1
 800f74e:	dd13      	ble.n	800f778 <_strtod_l+0x3d8>
 800f750:	4b76      	ldr	r3, [pc, #472]	; (800f92c <_strtod_l+0x58c>)
 800f752:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f756:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f75a:	f7f0 ff4d 	bl	80005f8 <__aeabi_dmul>
 800f75e:	4680      	mov	r8, r0
 800f760:	4650      	mov	r0, sl
 800f762:	4689      	mov	r9, r1
 800f764:	f7f0 fece 	bl	8000504 <__aeabi_ui2d>
 800f768:	4602      	mov	r2, r0
 800f76a:	460b      	mov	r3, r1
 800f76c:	4640      	mov	r0, r8
 800f76e:	4649      	mov	r1, r9
 800f770:	f7f0 fd8c 	bl	800028c <__adddf3>
 800f774:	4680      	mov	r8, r0
 800f776:	4689      	mov	r9, r1
 800f778:	2e0f      	cmp	r6, #15
 800f77a:	dc38      	bgt.n	800f7ee <_strtod_l+0x44e>
 800f77c:	9b08      	ldr	r3, [sp, #32]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f43f ae49 	beq.w	800f416 <_strtod_l+0x76>
 800f784:	dd24      	ble.n	800f7d0 <_strtod_l+0x430>
 800f786:	2b16      	cmp	r3, #22
 800f788:	dc0b      	bgt.n	800f7a2 <_strtod_l+0x402>
 800f78a:	4968      	ldr	r1, [pc, #416]	; (800f92c <_strtod_l+0x58c>)
 800f78c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f790:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f794:	4642      	mov	r2, r8
 800f796:	464b      	mov	r3, r9
 800f798:	f7f0 ff2e 	bl	80005f8 <__aeabi_dmul>
 800f79c:	4680      	mov	r8, r0
 800f79e:	4689      	mov	r9, r1
 800f7a0:	e639      	b.n	800f416 <_strtod_l+0x76>
 800f7a2:	9a08      	ldr	r2, [sp, #32]
 800f7a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	db20      	blt.n	800f7ee <_strtod_l+0x44e>
 800f7ac:	4c5f      	ldr	r4, [pc, #380]	; (800f92c <_strtod_l+0x58c>)
 800f7ae:	f1c6 060f 	rsb	r6, r6, #15
 800f7b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800f7b6:	4642      	mov	r2, r8
 800f7b8:	464b      	mov	r3, r9
 800f7ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7be:	f7f0 ff1b 	bl	80005f8 <__aeabi_dmul>
 800f7c2:	9b08      	ldr	r3, [sp, #32]
 800f7c4:	1b9e      	subs	r6, r3, r6
 800f7c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f7ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f7ce:	e7e3      	b.n	800f798 <_strtod_l+0x3f8>
 800f7d0:	9b08      	ldr	r3, [sp, #32]
 800f7d2:	3316      	adds	r3, #22
 800f7d4:	db0b      	blt.n	800f7ee <_strtod_l+0x44e>
 800f7d6:	9b05      	ldr	r3, [sp, #20]
 800f7d8:	1bdf      	subs	r7, r3, r7
 800f7da:	4b54      	ldr	r3, [pc, #336]	; (800f92c <_strtod_l+0x58c>)
 800f7dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f7e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7e4:	4640      	mov	r0, r8
 800f7e6:	4649      	mov	r1, r9
 800f7e8:	f7f1 f830 	bl	800084c <__aeabi_ddiv>
 800f7ec:	e7d6      	b.n	800f79c <_strtod_l+0x3fc>
 800f7ee:	9b08      	ldr	r3, [sp, #32]
 800f7f0:	1b75      	subs	r5, r6, r5
 800f7f2:	441d      	add	r5, r3
 800f7f4:	2d00      	cmp	r5, #0
 800f7f6:	dd70      	ble.n	800f8da <_strtod_l+0x53a>
 800f7f8:	f015 030f 	ands.w	r3, r5, #15
 800f7fc:	d00a      	beq.n	800f814 <_strtod_l+0x474>
 800f7fe:	494b      	ldr	r1, [pc, #300]	; (800f92c <_strtod_l+0x58c>)
 800f800:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f804:	4642      	mov	r2, r8
 800f806:	464b      	mov	r3, r9
 800f808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f80c:	f7f0 fef4 	bl	80005f8 <__aeabi_dmul>
 800f810:	4680      	mov	r8, r0
 800f812:	4689      	mov	r9, r1
 800f814:	f035 050f 	bics.w	r5, r5, #15
 800f818:	d04d      	beq.n	800f8b6 <_strtod_l+0x516>
 800f81a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800f81e:	dd22      	ble.n	800f866 <_strtod_l+0x4c6>
 800f820:	2500      	movs	r5, #0
 800f822:	46ab      	mov	fp, r5
 800f824:	9509      	str	r5, [sp, #36]	; 0x24
 800f826:	9505      	str	r5, [sp, #20]
 800f828:	2322      	movs	r3, #34	; 0x22
 800f82a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800f934 <_strtod_l+0x594>
 800f82e:	6023      	str	r3, [r4, #0]
 800f830:	f04f 0800 	mov.w	r8, #0
 800f834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f836:	2b00      	cmp	r3, #0
 800f838:	f43f aded 	beq.w	800f416 <_strtod_l+0x76>
 800f83c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f83e:	4620      	mov	r0, r4
 800f840:	f7ff f924 	bl	800ea8c <_Bfree>
 800f844:	9905      	ldr	r1, [sp, #20]
 800f846:	4620      	mov	r0, r4
 800f848:	f7ff f920 	bl	800ea8c <_Bfree>
 800f84c:	4659      	mov	r1, fp
 800f84e:	4620      	mov	r0, r4
 800f850:	f7ff f91c 	bl	800ea8c <_Bfree>
 800f854:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f856:	4620      	mov	r0, r4
 800f858:	f7ff f918 	bl	800ea8c <_Bfree>
 800f85c:	4629      	mov	r1, r5
 800f85e:	4620      	mov	r0, r4
 800f860:	f7ff f914 	bl	800ea8c <_Bfree>
 800f864:	e5d7      	b.n	800f416 <_strtod_l+0x76>
 800f866:	4b32      	ldr	r3, [pc, #200]	; (800f930 <_strtod_l+0x590>)
 800f868:	9304      	str	r3, [sp, #16]
 800f86a:	2300      	movs	r3, #0
 800f86c:	112d      	asrs	r5, r5, #4
 800f86e:	4640      	mov	r0, r8
 800f870:	4649      	mov	r1, r9
 800f872:	469a      	mov	sl, r3
 800f874:	2d01      	cmp	r5, #1
 800f876:	dc21      	bgt.n	800f8bc <_strtod_l+0x51c>
 800f878:	b10b      	cbz	r3, 800f87e <_strtod_l+0x4de>
 800f87a:	4680      	mov	r8, r0
 800f87c:	4689      	mov	r9, r1
 800f87e:	492c      	ldr	r1, [pc, #176]	; (800f930 <_strtod_l+0x590>)
 800f880:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800f884:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f888:	4642      	mov	r2, r8
 800f88a:	464b      	mov	r3, r9
 800f88c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f890:	f7f0 feb2 	bl	80005f8 <__aeabi_dmul>
 800f894:	4b27      	ldr	r3, [pc, #156]	; (800f934 <_strtod_l+0x594>)
 800f896:	460a      	mov	r2, r1
 800f898:	400b      	ands	r3, r1
 800f89a:	4927      	ldr	r1, [pc, #156]	; (800f938 <_strtod_l+0x598>)
 800f89c:	428b      	cmp	r3, r1
 800f89e:	4680      	mov	r8, r0
 800f8a0:	d8be      	bhi.n	800f820 <_strtod_l+0x480>
 800f8a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f8a6:	428b      	cmp	r3, r1
 800f8a8:	bf86      	itte	hi
 800f8aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800f93c <_strtod_l+0x59c>
 800f8ae:	f04f 38ff 	movhi.w	r8, #4294967295
 800f8b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	9304      	str	r3, [sp, #16]
 800f8ba:	e07b      	b.n	800f9b4 <_strtod_l+0x614>
 800f8bc:	07ea      	lsls	r2, r5, #31
 800f8be:	d505      	bpl.n	800f8cc <_strtod_l+0x52c>
 800f8c0:	9b04      	ldr	r3, [sp, #16]
 800f8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c6:	f7f0 fe97 	bl	80005f8 <__aeabi_dmul>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	9a04      	ldr	r2, [sp, #16]
 800f8ce:	3208      	adds	r2, #8
 800f8d0:	f10a 0a01 	add.w	sl, sl, #1
 800f8d4:	106d      	asrs	r5, r5, #1
 800f8d6:	9204      	str	r2, [sp, #16]
 800f8d8:	e7cc      	b.n	800f874 <_strtod_l+0x4d4>
 800f8da:	d0ec      	beq.n	800f8b6 <_strtod_l+0x516>
 800f8dc:	426d      	negs	r5, r5
 800f8de:	f015 020f 	ands.w	r2, r5, #15
 800f8e2:	d00a      	beq.n	800f8fa <_strtod_l+0x55a>
 800f8e4:	4b11      	ldr	r3, [pc, #68]	; (800f92c <_strtod_l+0x58c>)
 800f8e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	4649      	mov	r1, r9
 800f8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f2:	f7f0 ffab 	bl	800084c <__aeabi_ddiv>
 800f8f6:	4680      	mov	r8, r0
 800f8f8:	4689      	mov	r9, r1
 800f8fa:	112d      	asrs	r5, r5, #4
 800f8fc:	d0db      	beq.n	800f8b6 <_strtod_l+0x516>
 800f8fe:	2d1f      	cmp	r5, #31
 800f900:	dd1e      	ble.n	800f940 <_strtod_l+0x5a0>
 800f902:	2500      	movs	r5, #0
 800f904:	46ab      	mov	fp, r5
 800f906:	9509      	str	r5, [sp, #36]	; 0x24
 800f908:	9505      	str	r5, [sp, #20]
 800f90a:	2322      	movs	r3, #34	; 0x22
 800f90c:	f04f 0800 	mov.w	r8, #0
 800f910:	f04f 0900 	mov.w	r9, #0
 800f914:	6023      	str	r3, [r4, #0]
 800f916:	e78d      	b.n	800f834 <_strtod_l+0x494>
 800f918:	080120d1 	.word	0x080120d1
 800f91c:	080122fc 	.word	0x080122fc
 800f920:	080120c9 	.word	0x080120c9
 800f924:	08012100 	.word	0x08012100
 800f928:	0801248d 	.word	0x0801248d
 800f92c:	08012210 	.word	0x08012210
 800f930:	080121e8 	.word	0x080121e8
 800f934:	7ff00000 	.word	0x7ff00000
 800f938:	7ca00000 	.word	0x7ca00000
 800f93c:	7fefffff 	.word	0x7fefffff
 800f940:	f015 0310 	ands.w	r3, r5, #16
 800f944:	bf18      	it	ne
 800f946:	236a      	movne	r3, #106	; 0x6a
 800f948:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800fcec <_strtod_l+0x94c>
 800f94c:	9304      	str	r3, [sp, #16]
 800f94e:	4640      	mov	r0, r8
 800f950:	4649      	mov	r1, r9
 800f952:	2300      	movs	r3, #0
 800f954:	07ea      	lsls	r2, r5, #31
 800f956:	d504      	bpl.n	800f962 <_strtod_l+0x5c2>
 800f958:	e9da 2300 	ldrd	r2, r3, [sl]
 800f95c:	f7f0 fe4c 	bl	80005f8 <__aeabi_dmul>
 800f960:	2301      	movs	r3, #1
 800f962:	106d      	asrs	r5, r5, #1
 800f964:	f10a 0a08 	add.w	sl, sl, #8
 800f968:	d1f4      	bne.n	800f954 <_strtod_l+0x5b4>
 800f96a:	b10b      	cbz	r3, 800f970 <_strtod_l+0x5d0>
 800f96c:	4680      	mov	r8, r0
 800f96e:	4689      	mov	r9, r1
 800f970:	9b04      	ldr	r3, [sp, #16]
 800f972:	b1bb      	cbz	r3, 800f9a4 <_strtod_l+0x604>
 800f974:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800f978:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	4649      	mov	r1, r9
 800f980:	dd10      	ble.n	800f9a4 <_strtod_l+0x604>
 800f982:	2b1f      	cmp	r3, #31
 800f984:	f340 811e 	ble.w	800fbc4 <_strtod_l+0x824>
 800f988:	2b34      	cmp	r3, #52	; 0x34
 800f98a:	bfde      	ittt	le
 800f98c:	f04f 33ff 	movle.w	r3, #4294967295
 800f990:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f994:	4093      	lslle	r3, r2
 800f996:	f04f 0800 	mov.w	r8, #0
 800f99a:	bfcc      	ite	gt
 800f99c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800f9a0:	ea03 0901 	andle.w	r9, r3, r1
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	4640      	mov	r0, r8
 800f9aa:	4649      	mov	r1, r9
 800f9ac:	f7f1 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	d1a6      	bne.n	800f902 <_strtod_l+0x562>
 800f9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9ba:	4633      	mov	r3, r6
 800f9bc:	465a      	mov	r2, fp
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f7ff f8cc 	bl	800eb5c <__s2b>
 800f9c4:	9009      	str	r0, [sp, #36]	; 0x24
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	f43f af2a 	beq.w	800f820 <_strtod_l+0x480>
 800f9cc:	9a08      	ldr	r2, [sp, #32]
 800f9ce:	9b05      	ldr	r3, [sp, #20]
 800f9d0:	2a00      	cmp	r2, #0
 800f9d2:	eba3 0307 	sub.w	r3, r3, r7
 800f9d6:	bfa8      	it	ge
 800f9d8:	2300      	movge	r3, #0
 800f9da:	930c      	str	r3, [sp, #48]	; 0x30
 800f9dc:	2500      	movs	r5, #0
 800f9de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f9e2:	9312      	str	r3, [sp, #72]	; 0x48
 800f9e4:	46ab      	mov	fp, r5
 800f9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	6859      	ldr	r1, [r3, #4]
 800f9ec:	f7ff f80e 	bl	800ea0c <_Balloc>
 800f9f0:	9005      	str	r0, [sp, #20]
 800f9f2:	2800      	cmp	r0, #0
 800f9f4:	f43f af18 	beq.w	800f828 <_strtod_l+0x488>
 800f9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9fa:	691a      	ldr	r2, [r3, #16]
 800f9fc:	3202      	adds	r2, #2
 800f9fe:	f103 010c 	add.w	r1, r3, #12
 800fa02:	0092      	lsls	r2, r2, #2
 800fa04:	300c      	adds	r0, #12
 800fa06:	f000 ff4f 	bl	80108a8 <memcpy>
 800fa0a:	ec49 8b10 	vmov	d0, r8, r9
 800fa0e:	aa18      	add	r2, sp, #96	; 0x60
 800fa10:	a917      	add	r1, sp, #92	; 0x5c
 800fa12:	4620      	mov	r0, r4
 800fa14:	f7ff fbd6 	bl	800f1c4 <__d2b>
 800fa18:	ec49 8b18 	vmov	d8, r8, r9
 800fa1c:	9016      	str	r0, [sp, #88]	; 0x58
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	f43f af02 	beq.w	800f828 <_strtod_l+0x488>
 800fa24:	2101      	movs	r1, #1
 800fa26:	4620      	mov	r0, r4
 800fa28:	f7ff f930 	bl	800ec8c <__i2b>
 800fa2c:	4683      	mov	fp, r0
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	f43f aefa 	beq.w	800f828 <_strtod_l+0x488>
 800fa34:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fa36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fa38:	2e00      	cmp	r6, #0
 800fa3a:	bfab      	itete	ge
 800fa3c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800fa3e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800fa40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800fa42:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800fa46:	bfac      	ite	ge
 800fa48:	eb06 0a03 	addge.w	sl, r6, r3
 800fa4c:	1b9f      	sublt	r7, r3, r6
 800fa4e:	9b04      	ldr	r3, [sp, #16]
 800fa50:	1af6      	subs	r6, r6, r3
 800fa52:	4416      	add	r6, r2
 800fa54:	4ba0      	ldr	r3, [pc, #640]	; (800fcd8 <_strtod_l+0x938>)
 800fa56:	3e01      	subs	r6, #1
 800fa58:	429e      	cmp	r6, r3
 800fa5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fa5e:	f280 80c4 	bge.w	800fbea <_strtod_l+0x84a>
 800fa62:	1b9b      	subs	r3, r3, r6
 800fa64:	2b1f      	cmp	r3, #31
 800fa66:	eba2 0203 	sub.w	r2, r2, r3
 800fa6a:	f04f 0101 	mov.w	r1, #1
 800fa6e:	f300 80b0 	bgt.w	800fbd2 <_strtod_l+0x832>
 800fa72:	fa01 f303 	lsl.w	r3, r1, r3
 800fa76:	930e      	str	r3, [sp, #56]	; 0x38
 800fa78:	2300      	movs	r3, #0
 800fa7a:	930d      	str	r3, [sp, #52]	; 0x34
 800fa7c:	eb0a 0602 	add.w	r6, sl, r2
 800fa80:	9b04      	ldr	r3, [sp, #16]
 800fa82:	45b2      	cmp	sl, r6
 800fa84:	4417      	add	r7, r2
 800fa86:	441f      	add	r7, r3
 800fa88:	4653      	mov	r3, sl
 800fa8a:	bfa8      	it	ge
 800fa8c:	4633      	movge	r3, r6
 800fa8e:	42bb      	cmp	r3, r7
 800fa90:	bfa8      	it	ge
 800fa92:	463b      	movge	r3, r7
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	bfc2      	ittt	gt
 800fa98:	1af6      	subgt	r6, r6, r3
 800fa9a:	1aff      	subgt	r7, r7, r3
 800fa9c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800faa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	dd17      	ble.n	800fad6 <_strtod_l+0x736>
 800faa6:	4659      	mov	r1, fp
 800faa8:	461a      	mov	r2, r3
 800faaa:	4620      	mov	r0, r4
 800faac:	f7ff f9ae 	bl	800ee0c <__pow5mult>
 800fab0:	4683      	mov	fp, r0
 800fab2:	2800      	cmp	r0, #0
 800fab4:	f43f aeb8 	beq.w	800f828 <_strtod_l+0x488>
 800fab8:	4601      	mov	r1, r0
 800faba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fabc:	4620      	mov	r0, r4
 800fabe:	f7ff f8fb 	bl	800ecb8 <__multiply>
 800fac2:	900b      	str	r0, [sp, #44]	; 0x2c
 800fac4:	2800      	cmp	r0, #0
 800fac6:	f43f aeaf 	beq.w	800f828 <_strtod_l+0x488>
 800faca:	9916      	ldr	r1, [sp, #88]	; 0x58
 800facc:	4620      	mov	r0, r4
 800face:	f7fe ffdd 	bl	800ea8c <_Bfree>
 800fad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fad4:	9316      	str	r3, [sp, #88]	; 0x58
 800fad6:	2e00      	cmp	r6, #0
 800fad8:	f300 808c 	bgt.w	800fbf4 <_strtod_l+0x854>
 800fadc:	9b08      	ldr	r3, [sp, #32]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	dd08      	ble.n	800faf4 <_strtod_l+0x754>
 800fae2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fae4:	9905      	ldr	r1, [sp, #20]
 800fae6:	4620      	mov	r0, r4
 800fae8:	f7ff f990 	bl	800ee0c <__pow5mult>
 800faec:	9005      	str	r0, [sp, #20]
 800faee:	2800      	cmp	r0, #0
 800faf0:	f43f ae9a 	beq.w	800f828 <_strtod_l+0x488>
 800faf4:	2f00      	cmp	r7, #0
 800faf6:	dd08      	ble.n	800fb0a <_strtod_l+0x76a>
 800faf8:	9905      	ldr	r1, [sp, #20]
 800fafa:	463a      	mov	r2, r7
 800fafc:	4620      	mov	r0, r4
 800fafe:	f7ff f9df 	bl	800eec0 <__lshift>
 800fb02:	9005      	str	r0, [sp, #20]
 800fb04:	2800      	cmp	r0, #0
 800fb06:	f43f ae8f 	beq.w	800f828 <_strtod_l+0x488>
 800fb0a:	f1ba 0f00 	cmp.w	sl, #0
 800fb0e:	dd08      	ble.n	800fb22 <_strtod_l+0x782>
 800fb10:	4659      	mov	r1, fp
 800fb12:	4652      	mov	r2, sl
 800fb14:	4620      	mov	r0, r4
 800fb16:	f7ff f9d3 	bl	800eec0 <__lshift>
 800fb1a:	4683      	mov	fp, r0
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	f43f ae83 	beq.w	800f828 <_strtod_l+0x488>
 800fb22:	9a05      	ldr	r2, [sp, #20]
 800fb24:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fb26:	4620      	mov	r0, r4
 800fb28:	f7ff fa52 	bl	800efd0 <__mdiff>
 800fb2c:	4605      	mov	r5, r0
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	f43f ae7a 	beq.w	800f828 <_strtod_l+0x488>
 800fb34:	68c3      	ldr	r3, [r0, #12]
 800fb36:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb38:	2300      	movs	r3, #0
 800fb3a:	60c3      	str	r3, [r0, #12]
 800fb3c:	4659      	mov	r1, fp
 800fb3e:	f7ff fa2b 	bl	800ef98 <__mcmp>
 800fb42:	2800      	cmp	r0, #0
 800fb44:	da60      	bge.n	800fc08 <_strtod_l+0x868>
 800fb46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb48:	ea53 0308 	orrs.w	r3, r3, r8
 800fb4c:	f040 8084 	bne.w	800fc58 <_strtod_l+0x8b8>
 800fb50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d17f      	bne.n	800fc58 <_strtod_l+0x8b8>
 800fb58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fb5c:	0d1b      	lsrs	r3, r3, #20
 800fb5e:	051b      	lsls	r3, r3, #20
 800fb60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fb64:	d978      	bls.n	800fc58 <_strtod_l+0x8b8>
 800fb66:	696b      	ldr	r3, [r5, #20]
 800fb68:	b913      	cbnz	r3, 800fb70 <_strtod_l+0x7d0>
 800fb6a:	692b      	ldr	r3, [r5, #16]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	dd73      	ble.n	800fc58 <_strtod_l+0x8b8>
 800fb70:	4629      	mov	r1, r5
 800fb72:	2201      	movs	r2, #1
 800fb74:	4620      	mov	r0, r4
 800fb76:	f7ff f9a3 	bl	800eec0 <__lshift>
 800fb7a:	4659      	mov	r1, fp
 800fb7c:	4605      	mov	r5, r0
 800fb7e:	f7ff fa0b 	bl	800ef98 <__mcmp>
 800fb82:	2800      	cmp	r0, #0
 800fb84:	dd68      	ble.n	800fc58 <_strtod_l+0x8b8>
 800fb86:	9904      	ldr	r1, [sp, #16]
 800fb88:	4a54      	ldr	r2, [pc, #336]	; (800fcdc <_strtod_l+0x93c>)
 800fb8a:	464b      	mov	r3, r9
 800fb8c:	2900      	cmp	r1, #0
 800fb8e:	f000 8084 	beq.w	800fc9a <_strtod_l+0x8fa>
 800fb92:	ea02 0109 	and.w	r1, r2, r9
 800fb96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fb9a:	dc7e      	bgt.n	800fc9a <_strtod_l+0x8fa>
 800fb9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fba0:	f77f aeb3 	ble.w	800f90a <_strtod_l+0x56a>
 800fba4:	4b4e      	ldr	r3, [pc, #312]	; (800fce0 <_strtod_l+0x940>)
 800fba6:	4640      	mov	r0, r8
 800fba8:	4649      	mov	r1, r9
 800fbaa:	2200      	movs	r2, #0
 800fbac:	f7f0 fd24 	bl	80005f8 <__aeabi_dmul>
 800fbb0:	4b4a      	ldr	r3, [pc, #296]	; (800fcdc <_strtod_l+0x93c>)
 800fbb2:	400b      	ands	r3, r1
 800fbb4:	4680      	mov	r8, r0
 800fbb6:	4689      	mov	r9, r1
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f47f ae3f 	bne.w	800f83c <_strtod_l+0x49c>
 800fbbe:	2322      	movs	r3, #34	; 0x22
 800fbc0:	6023      	str	r3, [r4, #0]
 800fbc2:	e63b      	b.n	800f83c <_strtod_l+0x49c>
 800fbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800fbcc:	ea03 0808 	and.w	r8, r3, r8
 800fbd0:	e6e8      	b.n	800f9a4 <_strtod_l+0x604>
 800fbd2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800fbd6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800fbda:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800fbde:	36e2      	adds	r6, #226	; 0xe2
 800fbe0:	fa01 f306 	lsl.w	r3, r1, r6
 800fbe4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800fbe8:	e748      	b.n	800fa7c <_strtod_l+0x6dc>
 800fbea:	2100      	movs	r1, #0
 800fbec:	2301      	movs	r3, #1
 800fbee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800fbf2:	e743      	b.n	800fa7c <_strtod_l+0x6dc>
 800fbf4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fbf6:	4632      	mov	r2, r6
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	f7ff f961 	bl	800eec0 <__lshift>
 800fbfe:	9016      	str	r0, [sp, #88]	; 0x58
 800fc00:	2800      	cmp	r0, #0
 800fc02:	f47f af6b 	bne.w	800fadc <_strtod_l+0x73c>
 800fc06:	e60f      	b.n	800f828 <_strtod_l+0x488>
 800fc08:	46ca      	mov	sl, r9
 800fc0a:	d171      	bne.n	800fcf0 <_strtod_l+0x950>
 800fc0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc12:	b352      	cbz	r2, 800fc6a <_strtod_l+0x8ca>
 800fc14:	4a33      	ldr	r2, [pc, #204]	; (800fce4 <_strtod_l+0x944>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d12a      	bne.n	800fc70 <_strtod_l+0x8d0>
 800fc1a:	9b04      	ldr	r3, [sp, #16]
 800fc1c:	4641      	mov	r1, r8
 800fc1e:	b1fb      	cbz	r3, 800fc60 <_strtod_l+0x8c0>
 800fc20:	4b2e      	ldr	r3, [pc, #184]	; (800fcdc <_strtod_l+0x93c>)
 800fc22:	ea09 0303 	and.w	r3, r9, r3
 800fc26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800fc2e:	d81a      	bhi.n	800fc66 <_strtod_l+0x8c6>
 800fc30:	0d1b      	lsrs	r3, r3, #20
 800fc32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fc36:	fa02 f303 	lsl.w	r3, r2, r3
 800fc3a:	4299      	cmp	r1, r3
 800fc3c:	d118      	bne.n	800fc70 <_strtod_l+0x8d0>
 800fc3e:	4b2a      	ldr	r3, [pc, #168]	; (800fce8 <_strtod_l+0x948>)
 800fc40:	459a      	cmp	sl, r3
 800fc42:	d102      	bne.n	800fc4a <_strtod_l+0x8aa>
 800fc44:	3101      	adds	r1, #1
 800fc46:	f43f adef 	beq.w	800f828 <_strtod_l+0x488>
 800fc4a:	4b24      	ldr	r3, [pc, #144]	; (800fcdc <_strtod_l+0x93c>)
 800fc4c:	ea0a 0303 	and.w	r3, sl, r3
 800fc50:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800fc54:	f04f 0800 	mov.w	r8, #0
 800fc58:	9b04      	ldr	r3, [sp, #16]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d1a2      	bne.n	800fba4 <_strtod_l+0x804>
 800fc5e:	e5ed      	b.n	800f83c <_strtod_l+0x49c>
 800fc60:	f04f 33ff 	mov.w	r3, #4294967295
 800fc64:	e7e9      	b.n	800fc3a <_strtod_l+0x89a>
 800fc66:	4613      	mov	r3, r2
 800fc68:	e7e7      	b.n	800fc3a <_strtod_l+0x89a>
 800fc6a:	ea53 0308 	orrs.w	r3, r3, r8
 800fc6e:	d08a      	beq.n	800fb86 <_strtod_l+0x7e6>
 800fc70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc72:	b1e3      	cbz	r3, 800fcae <_strtod_l+0x90e>
 800fc74:	ea13 0f0a 	tst.w	r3, sl
 800fc78:	d0ee      	beq.n	800fc58 <_strtod_l+0x8b8>
 800fc7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fc7c:	9a04      	ldr	r2, [sp, #16]
 800fc7e:	4640      	mov	r0, r8
 800fc80:	4649      	mov	r1, r9
 800fc82:	b1c3      	cbz	r3, 800fcb6 <_strtod_l+0x916>
 800fc84:	f7ff fb6f 	bl	800f366 <sulp>
 800fc88:	4602      	mov	r2, r0
 800fc8a:	460b      	mov	r3, r1
 800fc8c:	ec51 0b18 	vmov	r0, r1, d8
 800fc90:	f7f0 fafc 	bl	800028c <__adddf3>
 800fc94:	4680      	mov	r8, r0
 800fc96:	4689      	mov	r9, r1
 800fc98:	e7de      	b.n	800fc58 <_strtod_l+0x8b8>
 800fc9a:	4013      	ands	r3, r2
 800fc9c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fca0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800fca4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800fca8:	f04f 38ff 	mov.w	r8, #4294967295
 800fcac:	e7d4      	b.n	800fc58 <_strtod_l+0x8b8>
 800fcae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcb0:	ea13 0f08 	tst.w	r3, r8
 800fcb4:	e7e0      	b.n	800fc78 <_strtod_l+0x8d8>
 800fcb6:	f7ff fb56 	bl	800f366 <sulp>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	ec51 0b18 	vmov	r0, r1, d8
 800fcc2:	f7f0 fae1 	bl	8000288 <__aeabi_dsub>
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	2300      	movs	r3, #0
 800fcca:	4680      	mov	r8, r0
 800fccc:	4689      	mov	r9, r1
 800fcce:	f7f0 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d0c0      	beq.n	800fc58 <_strtod_l+0x8b8>
 800fcd6:	e618      	b.n	800f90a <_strtod_l+0x56a>
 800fcd8:	fffffc02 	.word	0xfffffc02
 800fcdc:	7ff00000 	.word	0x7ff00000
 800fce0:	39500000 	.word	0x39500000
 800fce4:	000fffff 	.word	0x000fffff
 800fce8:	7fefffff 	.word	0x7fefffff
 800fcec:	08012310 	.word	0x08012310
 800fcf0:	4659      	mov	r1, fp
 800fcf2:	4628      	mov	r0, r5
 800fcf4:	f7ff fac0 	bl	800f278 <__ratio>
 800fcf8:	ec57 6b10 	vmov	r6, r7, d0
 800fcfc:	ee10 0a10 	vmov	r0, s0
 800fd00:	2200      	movs	r2, #0
 800fd02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fd06:	4639      	mov	r1, r7
 800fd08:	f7f0 fef2 	bl	8000af0 <__aeabi_dcmple>
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d071      	beq.n	800fdf4 <_strtod_l+0xa54>
 800fd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d17c      	bne.n	800fe10 <_strtod_l+0xa70>
 800fd16:	f1b8 0f00 	cmp.w	r8, #0
 800fd1a:	d15a      	bne.n	800fdd2 <_strtod_l+0xa32>
 800fd1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d15d      	bne.n	800fde0 <_strtod_l+0xa40>
 800fd24:	4b90      	ldr	r3, [pc, #576]	; (800ff68 <_strtod_l+0xbc8>)
 800fd26:	2200      	movs	r2, #0
 800fd28:	4630      	mov	r0, r6
 800fd2a:	4639      	mov	r1, r7
 800fd2c:	f7f0 fed6 	bl	8000adc <__aeabi_dcmplt>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d15c      	bne.n	800fdee <_strtod_l+0xa4e>
 800fd34:	4630      	mov	r0, r6
 800fd36:	4639      	mov	r1, r7
 800fd38:	4b8c      	ldr	r3, [pc, #560]	; (800ff6c <_strtod_l+0xbcc>)
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f7f0 fc5c 	bl	80005f8 <__aeabi_dmul>
 800fd40:	4606      	mov	r6, r0
 800fd42:	460f      	mov	r7, r1
 800fd44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800fd48:	9606      	str	r6, [sp, #24]
 800fd4a:	9307      	str	r3, [sp, #28]
 800fd4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800fd54:	4b86      	ldr	r3, [pc, #536]	; (800ff70 <_strtod_l+0xbd0>)
 800fd56:	ea0a 0303 	and.w	r3, sl, r3
 800fd5a:	930d      	str	r3, [sp, #52]	; 0x34
 800fd5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd5e:	4b85      	ldr	r3, [pc, #532]	; (800ff74 <_strtod_l+0xbd4>)
 800fd60:	429a      	cmp	r2, r3
 800fd62:	f040 8090 	bne.w	800fe86 <_strtod_l+0xae6>
 800fd66:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800fd6a:	ec49 8b10 	vmov	d0, r8, r9
 800fd6e:	f7ff f9b9 	bl	800f0e4 <__ulp>
 800fd72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd76:	ec51 0b10 	vmov	r0, r1, d0
 800fd7a:	f7f0 fc3d 	bl	80005f8 <__aeabi_dmul>
 800fd7e:	4642      	mov	r2, r8
 800fd80:	464b      	mov	r3, r9
 800fd82:	f7f0 fa83 	bl	800028c <__adddf3>
 800fd86:	460b      	mov	r3, r1
 800fd88:	4979      	ldr	r1, [pc, #484]	; (800ff70 <_strtod_l+0xbd0>)
 800fd8a:	4a7b      	ldr	r2, [pc, #492]	; (800ff78 <_strtod_l+0xbd8>)
 800fd8c:	4019      	ands	r1, r3
 800fd8e:	4291      	cmp	r1, r2
 800fd90:	4680      	mov	r8, r0
 800fd92:	d944      	bls.n	800fe1e <_strtod_l+0xa7e>
 800fd94:	ee18 2a90 	vmov	r2, s17
 800fd98:	4b78      	ldr	r3, [pc, #480]	; (800ff7c <_strtod_l+0xbdc>)
 800fd9a:	429a      	cmp	r2, r3
 800fd9c:	d104      	bne.n	800fda8 <_strtod_l+0xa08>
 800fd9e:	ee18 3a10 	vmov	r3, s16
 800fda2:	3301      	adds	r3, #1
 800fda4:	f43f ad40 	beq.w	800f828 <_strtod_l+0x488>
 800fda8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ff7c <_strtod_l+0xbdc>
 800fdac:	f04f 38ff 	mov.w	r8, #4294967295
 800fdb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	f7fe fe6a 	bl	800ea8c <_Bfree>
 800fdb8:	9905      	ldr	r1, [sp, #20]
 800fdba:	4620      	mov	r0, r4
 800fdbc:	f7fe fe66 	bl	800ea8c <_Bfree>
 800fdc0:	4659      	mov	r1, fp
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f7fe fe62 	bl	800ea8c <_Bfree>
 800fdc8:	4629      	mov	r1, r5
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f7fe fe5e 	bl	800ea8c <_Bfree>
 800fdd0:	e609      	b.n	800f9e6 <_strtod_l+0x646>
 800fdd2:	f1b8 0f01 	cmp.w	r8, #1
 800fdd6:	d103      	bne.n	800fde0 <_strtod_l+0xa40>
 800fdd8:	f1b9 0f00 	cmp.w	r9, #0
 800fddc:	f43f ad95 	beq.w	800f90a <_strtod_l+0x56a>
 800fde0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ff38 <_strtod_l+0xb98>
 800fde4:	4f60      	ldr	r7, [pc, #384]	; (800ff68 <_strtod_l+0xbc8>)
 800fde6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fdea:	2600      	movs	r6, #0
 800fdec:	e7ae      	b.n	800fd4c <_strtod_l+0x9ac>
 800fdee:	4f5f      	ldr	r7, [pc, #380]	; (800ff6c <_strtod_l+0xbcc>)
 800fdf0:	2600      	movs	r6, #0
 800fdf2:	e7a7      	b.n	800fd44 <_strtod_l+0x9a4>
 800fdf4:	4b5d      	ldr	r3, [pc, #372]	; (800ff6c <_strtod_l+0xbcc>)
 800fdf6:	4630      	mov	r0, r6
 800fdf8:	4639      	mov	r1, r7
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f7f0 fbfc 	bl	80005f8 <__aeabi_dmul>
 800fe00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe02:	4606      	mov	r6, r0
 800fe04:	460f      	mov	r7, r1
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d09c      	beq.n	800fd44 <_strtod_l+0x9a4>
 800fe0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800fe0e:	e79d      	b.n	800fd4c <_strtod_l+0x9ac>
 800fe10:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ff40 <_strtod_l+0xba0>
 800fe14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fe18:	ec57 6b17 	vmov	r6, r7, d7
 800fe1c:	e796      	b.n	800fd4c <_strtod_l+0x9ac>
 800fe1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800fe22:	9b04      	ldr	r3, [sp, #16]
 800fe24:	46ca      	mov	sl, r9
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1c2      	bne.n	800fdb0 <_strtod_l+0xa10>
 800fe2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fe2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe30:	0d1b      	lsrs	r3, r3, #20
 800fe32:	051b      	lsls	r3, r3, #20
 800fe34:	429a      	cmp	r2, r3
 800fe36:	d1bb      	bne.n	800fdb0 <_strtod_l+0xa10>
 800fe38:	4630      	mov	r0, r6
 800fe3a:	4639      	mov	r1, r7
 800fe3c:	f7f0 ff24 	bl	8000c88 <__aeabi_d2lz>
 800fe40:	f7f0 fbac 	bl	800059c <__aeabi_l2d>
 800fe44:	4602      	mov	r2, r0
 800fe46:	460b      	mov	r3, r1
 800fe48:	4630      	mov	r0, r6
 800fe4a:	4639      	mov	r1, r7
 800fe4c:	f7f0 fa1c 	bl	8000288 <__aeabi_dsub>
 800fe50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fe52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fe56:	ea43 0308 	orr.w	r3, r3, r8
 800fe5a:	4313      	orrs	r3, r2
 800fe5c:	4606      	mov	r6, r0
 800fe5e:	460f      	mov	r7, r1
 800fe60:	d054      	beq.n	800ff0c <_strtod_l+0xb6c>
 800fe62:	a339      	add	r3, pc, #228	; (adr r3, 800ff48 <_strtod_l+0xba8>)
 800fe64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe68:	f7f0 fe38 	bl	8000adc <__aeabi_dcmplt>
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	f47f ace5 	bne.w	800f83c <_strtod_l+0x49c>
 800fe72:	a337      	add	r3, pc, #220	; (adr r3, 800ff50 <_strtod_l+0xbb0>)
 800fe74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe78:	4630      	mov	r0, r6
 800fe7a:	4639      	mov	r1, r7
 800fe7c:	f7f0 fe4c 	bl	8000b18 <__aeabi_dcmpgt>
 800fe80:	2800      	cmp	r0, #0
 800fe82:	d095      	beq.n	800fdb0 <_strtod_l+0xa10>
 800fe84:	e4da      	b.n	800f83c <_strtod_l+0x49c>
 800fe86:	9b04      	ldr	r3, [sp, #16]
 800fe88:	b333      	cbz	r3, 800fed8 <_strtod_l+0xb38>
 800fe8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fe8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fe90:	d822      	bhi.n	800fed8 <_strtod_l+0xb38>
 800fe92:	a331      	add	r3, pc, #196	; (adr r3, 800ff58 <_strtod_l+0xbb8>)
 800fe94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe98:	4630      	mov	r0, r6
 800fe9a:	4639      	mov	r1, r7
 800fe9c:	f7f0 fe28 	bl	8000af0 <__aeabi_dcmple>
 800fea0:	b1a0      	cbz	r0, 800fecc <_strtod_l+0xb2c>
 800fea2:	4639      	mov	r1, r7
 800fea4:	4630      	mov	r0, r6
 800fea6:	f7f0 fe7f 	bl	8000ba8 <__aeabi_d2uiz>
 800feaa:	2801      	cmp	r0, #1
 800feac:	bf38      	it	cc
 800feae:	2001      	movcc	r0, #1
 800feb0:	f7f0 fb28 	bl	8000504 <__aeabi_ui2d>
 800feb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800feb6:	4606      	mov	r6, r0
 800feb8:	460f      	mov	r7, r1
 800feba:	bb23      	cbnz	r3, 800ff06 <_strtod_l+0xb66>
 800febc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fec0:	9010      	str	r0, [sp, #64]	; 0x40
 800fec2:	9311      	str	r3, [sp, #68]	; 0x44
 800fec4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fec8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800fecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fed0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fed4:	1a9b      	subs	r3, r3, r2
 800fed6:	930f      	str	r3, [sp, #60]	; 0x3c
 800fed8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fedc:	eeb0 0a48 	vmov.f32	s0, s16
 800fee0:	eef0 0a68 	vmov.f32	s1, s17
 800fee4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800fee8:	f7ff f8fc 	bl	800f0e4 <__ulp>
 800feec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fef0:	ec53 2b10 	vmov	r2, r3, d0
 800fef4:	f7f0 fb80 	bl	80005f8 <__aeabi_dmul>
 800fef8:	ec53 2b18 	vmov	r2, r3, d8
 800fefc:	f7f0 f9c6 	bl	800028c <__adddf3>
 800ff00:	4680      	mov	r8, r0
 800ff02:	4689      	mov	r9, r1
 800ff04:	e78d      	b.n	800fe22 <_strtod_l+0xa82>
 800ff06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ff0a:	e7db      	b.n	800fec4 <_strtod_l+0xb24>
 800ff0c:	a314      	add	r3, pc, #80	; (adr r3, 800ff60 <_strtod_l+0xbc0>)
 800ff0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff12:	f7f0 fde3 	bl	8000adc <__aeabi_dcmplt>
 800ff16:	e7b3      	b.n	800fe80 <_strtod_l+0xae0>
 800ff18:	2300      	movs	r3, #0
 800ff1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ff1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ff1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff20:	6013      	str	r3, [r2, #0]
 800ff22:	f7ff ba7c 	b.w	800f41e <_strtod_l+0x7e>
 800ff26:	2a65      	cmp	r2, #101	; 0x65
 800ff28:	f43f ab75 	beq.w	800f616 <_strtod_l+0x276>
 800ff2c:	2a45      	cmp	r2, #69	; 0x45
 800ff2e:	f43f ab72 	beq.w	800f616 <_strtod_l+0x276>
 800ff32:	2301      	movs	r3, #1
 800ff34:	f7ff bbaa 	b.w	800f68c <_strtod_l+0x2ec>
 800ff38:	00000000 	.word	0x00000000
 800ff3c:	bff00000 	.word	0xbff00000
 800ff40:	00000000 	.word	0x00000000
 800ff44:	3ff00000 	.word	0x3ff00000
 800ff48:	94a03595 	.word	0x94a03595
 800ff4c:	3fdfffff 	.word	0x3fdfffff
 800ff50:	35afe535 	.word	0x35afe535
 800ff54:	3fe00000 	.word	0x3fe00000
 800ff58:	ffc00000 	.word	0xffc00000
 800ff5c:	41dfffff 	.word	0x41dfffff
 800ff60:	94a03595 	.word	0x94a03595
 800ff64:	3fcfffff 	.word	0x3fcfffff
 800ff68:	3ff00000 	.word	0x3ff00000
 800ff6c:	3fe00000 	.word	0x3fe00000
 800ff70:	7ff00000 	.word	0x7ff00000
 800ff74:	7fe00000 	.word	0x7fe00000
 800ff78:	7c9fffff 	.word	0x7c9fffff
 800ff7c:	7fefffff 	.word	0x7fefffff

0800ff80 <_strtod_r>:
 800ff80:	4b01      	ldr	r3, [pc, #4]	; (800ff88 <_strtod_r+0x8>)
 800ff82:	f7ff ba0d 	b.w	800f3a0 <_strtod_l>
 800ff86:	bf00      	nop
 800ff88:	20000080 	.word	0x20000080

0800ff8c <_strtol_l.constprop.0>:
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff92:	d001      	beq.n	800ff98 <_strtol_l.constprop.0+0xc>
 800ff94:	2b24      	cmp	r3, #36	; 0x24
 800ff96:	d906      	bls.n	800ffa6 <_strtol_l.constprop.0+0x1a>
 800ff98:	f7fd fd8a 	bl	800dab0 <__errno>
 800ff9c:	2316      	movs	r3, #22
 800ff9e:	6003      	str	r3, [r0, #0]
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffa6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801008c <_strtol_l.constprop.0+0x100>
 800ffaa:	460d      	mov	r5, r1
 800ffac:	462e      	mov	r6, r5
 800ffae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffb2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ffb6:	f017 0708 	ands.w	r7, r7, #8
 800ffba:	d1f7      	bne.n	800ffac <_strtol_l.constprop.0+0x20>
 800ffbc:	2c2d      	cmp	r4, #45	; 0x2d
 800ffbe:	d132      	bne.n	8010026 <_strtol_l.constprop.0+0x9a>
 800ffc0:	782c      	ldrb	r4, [r5, #0]
 800ffc2:	2701      	movs	r7, #1
 800ffc4:	1cb5      	adds	r5, r6, #2
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d05b      	beq.n	8010082 <_strtol_l.constprop.0+0xf6>
 800ffca:	2b10      	cmp	r3, #16
 800ffcc:	d109      	bne.n	800ffe2 <_strtol_l.constprop.0+0x56>
 800ffce:	2c30      	cmp	r4, #48	; 0x30
 800ffd0:	d107      	bne.n	800ffe2 <_strtol_l.constprop.0+0x56>
 800ffd2:	782c      	ldrb	r4, [r5, #0]
 800ffd4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ffd8:	2c58      	cmp	r4, #88	; 0x58
 800ffda:	d14d      	bne.n	8010078 <_strtol_l.constprop.0+0xec>
 800ffdc:	786c      	ldrb	r4, [r5, #1]
 800ffde:	2310      	movs	r3, #16
 800ffe0:	3502      	adds	r5, #2
 800ffe2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ffe6:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffea:	f04f 0e00 	mov.w	lr, #0
 800ffee:	fbb8 f9f3 	udiv	r9, r8, r3
 800fff2:	4676      	mov	r6, lr
 800fff4:	fb03 8a19 	mls	sl, r3, r9, r8
 800fff8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800fffc:	f1bc 0f09 	cmp.w	ip, #9
 8010000:	d816      	bhi.n	8010030 <_strtol_l.constprop.0+0xa4>
 8010002:	4664      	mov	r4, ip
 8010004:	42a3      	cmp	r3, r4
 8010006:	dd24      	ble.n	8010052 <_strtol_l.constprop.0+0xc6>
 8010008:	f1be 3fff 	cmp.w	lr, #4294967295
 801000c:	d008      	beq.n	8010020 <_strtol_l.constprop.0+0x94>
 801000e:	45b1      	cmp	r9, r6
 8010010:	d31c      	bcc.n	801004c <_strtol_l.constprop.0+0xc0>
 8010012:	d101      	bne.n	8010018 <_strtol_l.constprop.0+0x8c>
 8010014:	45a2      	cmp	sl, r4
 8010016:	db19      	blt.n	801004c <_strtol_l.constprop.0+0xc0>
 8010018:	fb06 4603 	mla	r6, r6, r3, r4
 801001c:	f04f 0e01 	mov.w	lr, #1
 8010020:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010024:	e7e8      	b.n	800fff8 <_strtol_l.constprop.0+0x6c>
 8010026:	2c2b      	cmp	r4, #43	; 0x2b
 8010028:	bf04      	itt	eq
 801002a:	782c      	ldrbeq	r4, [r5, #0]
 801002c:	1cb5      	addeq	r5, r6, #2
 801002e:	e7ca      	b.n	800ffc6 <_strtol_l.constprop.0+0x3a>
 8010030:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8010034:	f1bc 0f19 	cmp.w	ip, #25
 8010038:	d801      	bhi.n	801003e <_strtol_l.constprop.0+0xb2>
 801003a:	3c37      	subs	r4, #55	; 0x37
 801003c:	e7e2      	b.n	8010004 <_strtol_l.constprop.0+0x78>
 801003e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8010042:	f1bc 0f19 	cmp.w	ip, #25
 8010046:	d804      	bhi.n	8010052 <_strtol_l.constprop.0+0xc6>
 8010048:	3c57      	subs	r4, #87	; 0x57
 801004a:	e7db      	b.n	8010004 <_strtol_l.constprop.0+0x78>
 801004c:	f04f 3eff 	mov.w	lr, #4294967295
 8010050:	e7e6      	b.n	8010020 <_strtol_l.constprop.0+0x94>
 8010052:	f1be 3fff 	cmp.w	lr, #4294967295
 8010056:	d105      	bne.n	8010064 <_strtol_l.constprop.0+0xd8>
 8010058:	2322      	movs	r3, #34	; 0x22
 801005a:	6003      	str	r3, [r0, #0]
 801005c:	4646      	mov	r6, r8
 801005e:	b942      	cbnz	r2, 8010072 <_strtol_l.constprop.0+0xe6>
 8010060:	4630      	mov	r0, r6
 8010062:	e79e      	b.n	800ffa2 <_strtol_l.constprop.0+0x16>
 8010064:	b107      	cbz	r7, 8010068 <_strtol_l.constprop.0+0xdc>
 8010066:	4276      	negs	r6, r6
 8010068:	2a00      	cmp	r2, #0
 801006a:	d0f9      	beq.n	8010060 <_strtol_l.constprop.0+0xd4>
 801006c:	f1be 0f00 	cmp.w	lr, #0
 8010070:	d000      	beq.n	8010074 <_strtol_l.constprop.0+0xe8>
 8010072:	1e69      	subs	r1, r5, #1
 8010074:	6011      	str	r1, [r2, #0]
 8010076:	e7f3      	b.n	8010060 <_strtol_l.constprop.0+0xd4>
 8010078:	2430      	movs	r4, #48	; 0x30
 801007a:	2b00      	cmp	r3, #0
 801007c:	d1b1      	bne.n	800ffe2 <_strtol_l.constprop.0+0x56>
 801007e:	2308      	movs	r3, #8
 8010080:	e7af      	b.n	800ffe2 <_strtol_l.constprop.0+0x56>
 8010082:	2c30      	cmp	r4, #48	; 0x30
 8010084:	d0a5      	beq.n	800ffd2 <_strtol_l.constprop.0+0x46>
 8010086:	230a      	movs	r3, #10
 8010088:	e7ab      	b.n	800ffe2 <_strtol_l.constprop.0+0x56>
 801008a:	bf00      	nop
 801008c:	08012339 	.word	0x08012339

08010090 <_strtol_r>:
 8010090:	f7ff bf7c 	b.w	800ff8c <_strtol_l.constprop.0>

08010094 <__ssputs_r>:
 8010094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	688e      	ldr	r6, [r1, #8]
 801009a:	461f      	mov	r7, r3
 801009c:	42be      	cmp	r6, r7
 801009e:	680b      	ldr	r3, [r1, #0]
 80100a0:	4682      	mov	sl, r0
 80100a2:	460c      	mov	r4, r1
 80100a4:	4690      	mov	r8, r2
 80100a6:	d82c      	bhi.n	8010102 <__ssputs_r+0x6e>
 80100a8:	898a      	ldrh	r2, [r1, #12]
 80100aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100ae:	d026      	beq.n	80100fe <__ssputs_r+0x6a>
 80100b0:	6965      	ldr	r5, [r4, #20]
 80100b2:	6909      	ldr	r1, [r1, #16]
 80100b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100b8:	eba3 0901 	sub.w	r9, r3, r1
 80100bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100c0:	1c7b      	adds	r3, r7, #1
 80100c2:	444b      	add	r3, r9
 80100c4:	106d      	asrs	r5, r5, #1
 80100c6:	429d      	cmp	r5, r3
 80100c8:	bf38      	it	cc
 80100ca:	461d      	movcc	r5, r3
 80100cc:	0553      	lsls	r3, r2, #21
 80100ce:	d527      	bpl.n	8010120 <__ssputs_r+0x8c>
 80100d0:	4629      	mov	r1, r5
 80100d2:	f7fe fc0f 	bl	800e8f4 <_malloc_r>
 80100d6:	4606      	mov	r6, r0
 80100d8:	b360      	cbz	r0, 8010134 <__ssputs_r+0xa0>
 80100da:	6921      	ldr	r1, [r4, #16]
 80100dc:	464a      	mov	r2, r9
 80100de:	f000 fbe3 	bl	80108a8 <memcpy>
 80100e2:	89a3      	ldrh	r3, [r4, #12]
 80100e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100ec:	81a3      	strh	r3, [r4, #12]
 80100ee:	6126      	str	r6, [r4, #16]
 80100f0:	6165      	str	r5, [r4, #20]
 80100f2:	444e      	add	r6, r9
 80100f4:	eba5 0509 	sub.w	r5, r5, r9
 80100f8:	6026      	str	r6, [r4, #0]
 80100fa:	60a5      	str	r5, [r4, #8]
 80100fc:	463e      	mov	r6, r7
 80100fe:	42be      	cmp	r6, r7
 8010100:	d900      	bls.n	8010104 <__ssputs_r+0x70>
 8010102:	463e      	mov	r6, r7
 8010104:	6820      	ldr	r0, [r4, #0]
 8010106:	4632      	mov	r2, r6
 8010108:	4641      	mov	r1, r8
 801010a:	f000 fb6f 	bl	80107ec <memmove>
 801010e:	68a3      	ldr	r3, [r4, #8]
 8010110:	1b9b      	subs	r3, r3, r6
 8010112:	60a3      	str	r3, [r4, #8]
 8010114:	6823      	ldr	r3, [r4, #0]
 8010116:	4433      	add	r3, r6
 8010118:	6023      	str	r3, [r4, #0]
 801011a:	2000      	movs	r0, #0
 801011c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010120:	462a      	mov	r2, r5
 8010122:	f000 ff76 	bl	8011012 <_realloc_r>
 8010126:	4606      	mov	r6, r0
 8010128:	2800      	cmp	r0, #0
 801012a:	d1e0      	bne.n	80100ee <__ssputs_r+0x5a>
 801012c:	6921      	ldr	r1, [r4, #16]
 801012e:	4650      	mov	r0, sl
 8010130:	f7fe fb6c 	bl	800e80c <_free_r>
 8010134:	230c      	movs	r3, #12
 8010136:	f8ca 3000 	str.w	r3, [sl]
 801013a:	89a3      	ldrh	r3, [r4, #12]
 801013c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010140:	81a3      	strh	r3, [r4, #12]
 8010142:	f04f 30ff 	mov.w	r0, #4294967295
 8010146:	e7e9      	b.n	801011c <__ssputs_r+0x88>

08010148 <_svfiprintf_r>:
 8010148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014c:	4698      	mov	r8, r3
 801014e:	898b      	ldrh	r3, [r1, #12]
 8010150:	061b      	lsls	r3, r3, #24
 8010152:	b09d      	sub	sp, #116	; 0x74
 8010154:	4607      	mov	r7, r0
 8010156:	460d      	mov	r5, r1
 8010158:	4614      	mov	r4, r2
 801015a:	d50e      	bpl.n	801017a <_svfiprintf_r+0x32>
 801015c:	690b      	ldr	r3, [r1, #16]
 801015e:	b963      	cbnz	r3, 801017a <_svfiprintf_r+0x32>
 8010160:	2140      	movs	r1, #64	; 0x40
 8010162:	f7fe fbc7 	bl	800e8f4 <_malloc_r>
 8010166:	6028      	str	r0, [r5, #0]
 8010168:	6128      	str	r0, [r5, #16]
 801016a:	b920      	cbnz	r0, 8010176 <_svfiprintf_r+0x2e>
 801016c:	230c      	movs	r3, #12
 801016e:	603b      	str	r3, [r7, #0]
 8010170:	f04f 30ff 	mov.w	r0, #4294967295
 8010174:	e0d0      	b.n	8010318 <_svfiprintf_r+0x1d0>
 8010176:	2340      	movs	r3, #64	; 0x40
 8010178:	616b      	str	r3, [r5, #20]
 801017a:	2300      	movs	r3, #0
 801017c:	9309      	str	r3, [sp, #36]	; 0x24
 801017e:	2320      	movs	r3, #32
 8010180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010184:	f8cd 800c 	str.w	r8, [sp, #12]
 8010188:	2330      	movs	r3, #48	; 0x30
 801018a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010330 <_svfiprintf_r+0x1e8>
 801018e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010192:	f04f 0901 	mov.w	r9, #1
 8010196:	4623      	mov	r3, r4
 8010198:	469a      	mov	sl, r3
 801019a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801019e:	b10a      	cbz	r2, 80101a4 <_svfiprintf_r+0x5c>
 80101a0:	2a25      	cmp	r2, #37	; 0x25
 80101a2:	d1f9      	bne.n	8010198 <_svfiprintf_r+0x50>
 80101a4:	ebba 0b04 	subs.w	fp, sl, r4
 80101a8:	d00b      	beq.n	80101c2 <_svfiprintf_r+0x7a>
 80101aa:	465b      	mov	r3, fp
 80101ac:	4622      	mov	r2, r4
 80101ae:	4629      	mov	r1, r5
 80101b0:	4638      	mov	r0, r7
 80101b2:	f7ff ff6f 	bl	8010094 <__ssputs_r>
 80101b6:	3001      	adds	r0, #1
 80101b8:	f000 80a9 	beq.w	801030e <_svfiprintf_r+0x1c6>
 80101bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101be:	445a      	add	r2, fp
 80101c0:	9209      	str	r2, [sp, #36]	; 0x24
 80101c2:	f89a 3000 	ldrb.w	r3, [sl]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	f000 80a1 	beq.w	801030e <_svfiprintf_r+0x1c6>
 80101cc:	2300      	movs	r3, #0
 80101ce:	f04f 32ff 	mov.w	r2, #4294967295
 80101d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101d6:	f10a 0a01 	add.w	sl, sl, #1
 80101da:	9304      	str	r3, [sp, #16]
 80101dc:	9307      	str	r3, [sp, #28]
 80101de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101e2:	931a      	str	r3, [sp, #104]	; 0x68
 80101e4:	4654      	mov	r4, sl
 80101e6:	2205      	movs	r2, #5
 80101e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ec:	4850      	ldr	r0, [pc, #320]	; (8010330 <_svfiprintf_r+0x1e8>)
 80101ee:	f7ef ffef 	bl	80001d0 <memchr>
 80101f2:	9a04      	ldr	r2, [sp, #16]
 80101f4:	b9d8      	cbnz	r0, 801022e <_svfiprintf_r+0xe6>
 80101f6:	06d0      	lsls	r0, r2, #27
 80101f8:	bf44      	itt	mi
 80101fa:	2320      	movmi	r3, #32
 80101fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010200:	0711      	lsls	r1, r2, #28
 8010202:	bf44      	itt	mi
 8010204:	232b      	movmi	r3, #43	; 0x2b
 8010206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801020a:	f89a 3000 	ldrb.w	r3, [sl]
 801020e:	2b2a      	cmp	r3, #42	; 0x2a
 8010210:	d015      	beq.n	801023e <_svfiprintf_r+0xf6>
 8010212:	9a07      	ldr	r2, [sp, #28]
 8010214:	4654      	mov	r4, sl
 8010216:	2000      	movs	r0, #0
 8010218:	f04f 0c0a 	mov.w	ip, #10
 801021c:	4621      	mov	r1, r4
 801021e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010222:	3b30      	subs	r3, #48	; 0x30
 8010224:	2b09      	cmp	r3, #9
 8010226:	d94d      	bls.n	80102c4 <_svfiprintf_r+0x17c>
 8010228:	b1b0      	cbz	r0, 8010258 <_svfiprintf_r+0x110>
 801022a:	9207      	str	r2, [sp, #28]
 801022c:	e014      	b.n	8010258 <_svfiprintf_r+0x110>
 801022e:	eba0 0308 	sub.w	r3, r0, r8
 8010232:	fa09 f303 	lsl.w	r3, r9, r3
 8010236:	4313      	orrs	r3, r2
 8010238:	9304      	str	r3, [sp, #16]
 801023a:	46a2      	mov	sl, r4
 801023c:	e7d2      	b.n	80101e4 <_svfiprintf_r+0x9c>
 801023e:	9b03      	ldr	r3, [sp, #12]
 8010240:	1d19      	adds	r1, r3, #4
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	9103      	str	r1, [sp, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	bfbb      	ittet	lt
 801024a:	425b      	neglt	r3, r3
 801024c:	f042 0202 	orrlt.w	r2, r2, #2
 8010250:	9307      	strge	r3, [sp, #28]
 8010252:	9307      	strlt	r3, [sp, #28]
 8010254:	bfb8      	it	lt
 8010256:	9204      	strlt	r2, [sp, #16]
 8010258:	7823      	ldrb	r3, [r4, #0]
 801025a:	2b2e      	cmp	r3, #46	; 0x2e
 801025c:	d10c      	bne.n	8010278 <_svfiprintf_r+0x130>
 801025e:	7863      	ldrb	r3, [r4, #1]
 8010260:	2b2a      	cmp	r3, #42	; 0x2a
 8010262:	d134      	bne.n	80102ce <_svfiprintf_r+0x186>
 8010264:	9b03      	ldr	r3, [sp, #12]
 8010266:	1d1a      	adds	r2, r3, #4
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	9203      	str	r2, [sp, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	bfb8      	it	lt
 8010270:	f04f 33ff 	movlt.w	r3, #4294967295
 8010274:	3402      	adds	r4, #2
 8010276:	9305      	str	r3, [sp, #20]
 8010278:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010340 <_svfiprintf_r+0x1f8>
 801027c:	7821      	ldrb	r1, [r4, #0]
 801027e:	2203      	movs	r2, #3
 8010280:	4650      	mov	r0, sl
 8010282:	f7ef ffa5 	bl	80001d0 <memchr>
 8010286:	b138      	cbz	r0, 8010298 <_svfiprintf_r+0x150>
 8010288:	9b04      	ldr	r3, [sp, #16]
 801028a:	eba0 000a 	sub.w	r0, r0, sl
 801028e:	2240      	movs	r2, #64	; 0x40
 8010290:	4082      	lsls	r2, r0
 8010292:	4313      	orrs	r3, r2
 8010294:	3401      	adds	r4, #1
 8010296:	9304      	str	r3, [sp, #16]
 8010298:	f814 1b01 	ldrb.w	r1, [r4], #1
 801029c:	4825      	ldr	r0, [pc, #148]	; (8010334 <_svfiprintf_r+0x1ec>)
 801029e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102a2:	2206      	movs	r2, #6
 80102a4:	f7ef ff94 	bl	80001d0 <memchr>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	d038      	beq.n	801031e <_svfiprintf_r+0x1d6>
 80102ac:	4b22      	ldr	r3, [pc, #136]	; (8010338 <_svfiprintf_r+0x1f0>)
 80102ae:	bb1b      	cbnz	r3, 80102f8 <_svfiprintf_r+0x1b0>
 80102b0:	9b03      	ldr	r3, [sp, #12]
 80102b2:	3307      	adds	r3, #7
 80102b4:	f023 0307 	bic.w	r3, r3, #7
 80102b8:	3308      	adds	r3, #8
 80102ba:	9303      	str	r3, [sp, #12]
 80102bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102be:	4433      	add	r3, r6
 80102c0:	9309      	str	r3, [sp, #36]	; 0x24
 80102c2:	e768      	b.n	8010196 <_svfiprintf_r+0x4e>
 80102c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80102c8:	460c      	mov	r4, r1
 80102ca:	2001      	movs	r0, #1
 80102cc:	e7a6      	b.n	801021c <_svfiprintf_r+0xd4>
 80102ce:	2300      	movs	r3, #0
 80102d0:	3401      	adds	r4, #1
 80102d2:	9305      	str	r3, [sp, #20]
 80102d4:	4619      	mov	r1, r3
 80102d6:	f04f 0c0a 	mov.w	ip, #10
 80102da:	4620      	mov	r0, r4
 80102dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102e0:	3a30      	subs	r2, #48	; 0x30
 80102e2:	2a09      	cmp	r2, #9
 80102e4:	d903      	bls.n	80102ee <_svfiprintf_r+0x1a6>
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d0c6      	beq.n	8010278 <_svfiprintf_r+0x130>
 80102ea:	9105      	str	r1, [sp, #20]
 80102ec:	e7c4      	b.n	8010278 <_svfiprintf_r+0x130>
 80102ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80102f2:	4604      	mov	r4, r0
 80102f4:	2301      	movs	r3, #1
 80102f6:	e7f0      	b.n	80102da <_svfiprintf_r+0x192>
 80102f8:	ab03      	add	r3, sp, #12
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	462a      	mov	r2, r5
 80102fe:	4b0f      	ldr	r3, [pc, #60]	; (801033c <_svfiprintf_r+0x1f4>)
 8010300:	a904      	add	r1, sp, #16
 8010302:	4638      	mov	r0, r7
 8010304:	f7fc fb96 	bl	800ca34 <_printf_float>
 8010308:	1c42      	adds	r2, r0, #1
 801030a:	4606      	mov	r6, r0
 801030c:	d1d6      	bne.n	80102bc <_svfiprintf_r+0x174>
 801030e:	89ab      	ldrh	r3, [r5, #12]
 8010310:	065b      	lsls	r3, r3, #25
 8010312:	f53f af2d 	bmi.w	8010170 <_svfiprintf_r+0x28>
 8010316:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010318:	b01d      	add	sp, #116	; 0x74
 801031a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801031e:	ab03      	add	r3, sp, #12
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	462a      	mov	r2, r5
 8010324:	4b05      	ldr	r3, [pc, #20]	; (801033c <_svfiprintf_r+0x1f4>)
 8010326:	a904      	add	r1, sp, #16
 8010328:	4638      	mov	r0, r7
 801032a:	f7fc fe27 	bl	800cf7c <_printf_i>
 801032e:	e7eb      	b.n	8010308 <_svfiprintf_r+0x1c0>
 8010330:	08012439 	.word	0x08012439
 8010334:	08012443 	.word	0x08012443
 8010338:	0800ca35 	.word	0x0800ca35
 801033c:	08010095 	.word	0x08010095
 8010340:	0801243f 	.word	0x0801243f

08010344 <__sfputc_r>:
 8010344:	6893      	ldr	r3, [r2, #8]
 8010346:	3b01      	subs	r3, #1
 8010348:	2b00      	cmp	r3, #0
 801034a:	b410      	push	{r4}
 801034c:	6093      	str	r3, [r2, #8]
 801034e:	da08      	bge.n	8010362 <__sfputc_r+0x1e>
 8010350:	6994      	ldr	r4, [r2, #24]
 8010352:	42a3      	cmp	r3, r4
 8010354:	db01      	blt.n	801035a <__sfputc_r+0x16>
 8010356:	290a      	cmp	r1, #10
 8010358:	d103      	bne.n	8010362 <__sfputc_r+0x1e>
 801035a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801035e:	f7fd bac0 	b.w	800d8e2 <__swbuf_r>
 8010362:	6813      	ldr	r3, [r2, #0]
 8010364:	1c58      	adds	r0, r3, #1
 8010366:	6010      	str	r0, [r2, #0]
 8010368:	7019      	strb	r1, [r3, #0]
 801036a:	4608      	mov	r0, r1
 801036c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010370:	4770      	bx	lr

08010372 <__sfputs_r>:
 8010372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010374:	4606      	mov	r6, r0
 8010376:	460f      	mov	r7, r1
 8010378:	4614      	mov	r4, r2
 801037a:	18d5      	adds	r5, r2, r3
 801037c:	42ac      	cmp	r4, r5
 801037e:	d101      	bne.n	8010384 <__sfputs_r+0x12>
 8010380:	2000      	movs	r0, #0
 8010382:	e007      	b.n	8010394 <__sfputs_r+0x22>
 8010384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010388:	463a      	mov	r2, r7
 801038a:	4630      	mov	r0, r6
 801038c:	f7ff ffda 	bl	8010344 <__sfputc_r>
 8010390:	1c43      	adds	r3, r0, #1
 8010392:	d1f3      	bne.n	801037c <__sfputs_r+0xa>
 8010394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010398 <_vfiprintf_r>:
 8010398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801039c:	460d      	mov	r5, r1
 801039e:	b09d      	sub	sp, #116	; 0x74
 80103a0:	4614      	mov	r4, r2
 80103a2:	4698      	mov	r8, r3
 80103a4:	4606      	mov	r6, r0
 80103a6:	b118      	cbz	r0, 80103b0 <_vfiprintf_r+0x18>
 80103a8:	6a03      	ldr	r3, [r0, #32]
 80103aa:	b90b      	cbnz	r3, 80103b0 <_vfiprintf_r+0x18>
 80103ac:	f7fd f992 	bl	800d6d4 <__sinit>
 80103b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103b2:	07d9      	lsls	r1, r3, #31
 80103b4:	d405      	bmi.n	80103c2 <_vfiprintf_r+0x2a>
 80103b6:	89ab      	ldrh	r3, [r5, #12]
 80103b8:	059a      	lsls	r2, r3, #22
 80103ba:	d402      	bmi.n	80103c2 <_vfiprintf_r+0x2a>
 80103bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103be:	f7fd fba1 	bl	800db04 <__retarget_lock_acquire_recursive>
 80103c2:	89ab      	ldrh	r3, [r5, #12]
 80103c4:	071b      	lsls	r3, r3, #28
 80103c6:	d501      	bpl.n	80103cc <_vfiprintf_r+0x34>
 80103c8:	692b      	ldr	r3, [r5, #16]
 80103ca:	b99b      	cbnz	r3, 80103f4 <_vfiprintf_r+0x5c>
 80103cc:	4629      	mov	r1, r5
 80103ce:	4630      	mov	r0, r6
 80103d0:	f7fd fac4 	bl	800d95c <__swsetup_r>
 80103d4:	b170      	cbz	r0, 80103f4 <_vfiprintf_r+0x5c>
 80103d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103d8:	07dc      	lsls	r4, r3, #31
 80103da:	d504      	bpl.n	80103e6 <_vfiprintf_r+0x4e>
 80103dc:	f04f 30ff 	mov.w	r0, #4294967295
 80103e0:	b01d      	add	sp, #116	; 0x74
 80103e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e6:	89ab      	ldrh	r3, [r5, #12]
 80103e8:	0598      	lsls	r0, r3, #22
 80103ea:	d4f7      	bmi.n	80103dc <_vfiprintf_r+0x44>
 80103ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103ee:	f7fd fb8a 	bl	800db06 <__retarget_lock_release_recursive>
 80103f2:	e7f3      	b.n	80103dc <_vfiprintf_r+0x44>
 80103f4:	2300      	movs	r3, #0
 80103f6:	9309      	str	r3, [sp, #36]	; 0x24
 80103f8:	2320      	movs	r3, #32
 80103fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8010402:	2330      	movs	r3, #48	; 0x30
 8010404:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80105b8 <_vfiprintf_r+0x220>
 8010408:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801040c:	f04f 0901 	mov.w	r9, #1
 8010410:	4623      	mov	r3, r4
 8010412:	469a      	mov	sl, r3
 8010414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010418:	b10a      	cbz	r2, 801041e <_vfiprintf_r+0x86>
 801041a:	2a25      	cmp	r2, #37	; 0x25
 801041c:	d1f9      	bne.n	8010412 <_vfiprintf_r+0x7a>
 801041e:	ebba 0b04 	subs.w	fp, sl, r4
 8010422:	d00b      	beq.n	801043c <_vfiprintf_r+0xa4>
 8010424:	465b      	mov	r3, fp
 8010426:	4622      	mov	r2, r4
 8010428:	4629      	mov	r1, r5
 801042a:	4630      	mov	r0, r6
 801042c:	f7ff ffa1 	bl	8010372 <__sfputs_r>
 8010430:	3001      	adds	r0, #1
 8010432:	f000 80a9 	beq.w	8010588 <_vfiprintf_r+0x1f0>
 8010436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010438:	445a      	add	r2, fp
 801043a:	9209      	str	r2, [sp, #36]	; 0x24
 801043c:	f89a 3000 	ldrb.w	r3, [sl]
 8010440:	2b00      	cmp	r3, #0
 8010442:	f000 80a1 	beq.w	8010588 <_vfiprintf_r+0x1f0>
 8010446:	2300      	movs	r3, #0
 8010448:	f04f 32ff 	mov.w	r2, #4294967295
 801044c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010450:	f10a 0a01 	add.w	sl, sl, #1
 8010454:	9304      	str	r3, [sp, #16]
 8010456:	9307      	str	r3, [sp, #28]
 8010458:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801045c:	931a      	str	r3, [sp, #104]	; 0x68
 801045e:	4654      	mov	r4, sl
 8010460:	2205      	movs	r2, #5
 8010462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010466:	4854      	ldr	r0, [pc, #336]	; (80105b8 <_vfiprintf_r+0x220>)
 8010468:	f7ef feb2 	bl	80001d0 <memchr>
 801046c:	9a04      	ldr	r2, [sp, #16]
 801046e:	b9d8      	cbnz	r0, 80104a8 <_vfiprintf_r+0x110>
 8010470:	06d1      	lsls	r1, r2, #27
 8010472:	bf44      	itt	mi
 8010474:	2320      	movmi	r3, #32
 8010476:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801047a:	0713      	lsls	r3, r2, #28
 801047c:	bf44      	itt	mi
 801047e:	232b      	movmi	r3, #43	; 0x2b
 8010480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010484:	f89a 3000 	ldrb.w	r3, [sl]
 8010488:	2b2a      	cmp	r3, #42	; 0x2a
 801048a:	d015      	beq.n	80104b8 <_vfiprintf_r+0x120>
 801048c:	9a07      	ldr	r2, [sp, #28]
 801048e:	4654      	mov	r4, sl
 8010490:	2000      	movs	r0, #0
 8010492:	f04f 0c0a 	mov.w	ip, #10
 8010496:	4621      	mov	r1, r4
 8010498:	f811 3b01 	ldrb.w	r3, [r1], #1
 801049c:	3b30      	subs	r3, #48	; 0x30
 801049e:	2b09      	cmp	r3, #9
 80104a0:	d94d      	bls.n	801053e <_vfiprintf_r+0x1a6>
 80104a2:	b1b0      	cbz	r0, 80104d2 <_vfiprintf_r+0x13a>
 80104a4:	9207      	str	r2, [sp, #28]
 80104a6:	e014      	b.n	80104d2 <_vfiprintf_r+0x13a>
 80104a8:	eba0 0308 	sub.w	r3, r0, r8
 80104ac:	fa09 f303 	lsl.w	r3, r9, r3
 80104b0:	4313      	orrs	r3, r2
 80104b2:	9304      	str	r3, [sp, #16]
 80104b4:	46a2      	mov	sl, r4
 80104b6:	e7d2      	b.n	801045e <_vfiprintf_r+0xc6>
 80104b8:	9b03      	ldr	r3, [sp, #12]
 80104ba:	1d19      	adds	r1, r3, #4
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	9103      	str	r1, [sp, #12]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	bfbb      	ittet	lt
 80104c4:	425b      	neglt	r3, r3
 80104c6:	f042 0202 	orrlt.w	r2, r2, #2
 80104ca:	9307      	strge	r3, [sp, #28]
 80104cc:	9307      	strlt	r3, [sp, #28]
 80104ce:	bfb8      	it	lt
 80104d0:	9204      	strlt	r2, [sp, #16]
 80104d2:	7823      	ldrb	r3, [r4, #0]
 80104d4:	2b2e      	cmp	r3, #46	; 0x2e
 80104d6:	d10c      	bne.n	80104f2 <_vfiprintf_r+0x15a>
 80104d8:	7863      	ldrb	r3, [r4, #1]
 80104da:	2b2a      	cmp	r3, #42	; 0x2a
 80104dc:	d134      	bne.n	8010548 <_vfiprintf_r+0x1b0>
 80104de:	9b03      	ldr	r3, [sp, #12]
 80104e0:	1d1a      	adds	r2, r3, #4
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	9203      	str	r2, [sp, #12]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	bfb8      	it	lt
 80104ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80104ee:	3402      	adds	r4, #2
 80104f0:	9305      	str	r3, [sp, #20]
 80104f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80105c8 <_vfiprintf_r+0x230>
 80104f6:	7821      	ldrb	r1, [r4, #0]
 80104f8:	2203      	movs	r2, #3
 80104fa:	4650      	mov	r0, sl
 80104fc:	f7ef fe68 	bl	80001d0 <memchr>
 8010500:	b138      	cbz	r0, 8010512 <_vfiprintf_r+0x17a>
 8010502:	9b04      	ldr	r3, [sp, #16]
 8010504:	eba0 000a 	sub.w	r0, r0, sl
 8010508:	2240      	movs	r2, #64	; 0x40
 801050a:	4082      	lsls	r2, r0
 801050c:	4313      	orrs	r3, r2
 801050e:	3401      	adds	r4, #1
 8010510:	9304      	str	r3, [sp, #16]
 8010512:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010516:	4829      	ldr	r0, [pc, #164]	; (80105bc <_vfiprintf_r+0x224>)
 8010518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801051c:	2206      	movs	r2, #6
 801051e:	f7ef fe57 	bl	80001d0 <memchr>
 8010522:	2800      	cmp	r0, #0
 8010524:	d03f      	beq.n	80105a6 <_vfiprintf_r+0x20e>
 8010526:	4b26      	ldr	r3, [pc, #152]	; (80105c0 <_vfiprintf_r+0x228>)
 8010528:	bb1b      	cbnz	r3, 8010572 <_vfiprintf_r+0x1da>
 801052a:	9b03      	ldr	r3, [sp, #12]
 801052c:	3307      	adds	r3, #7
 801052e:	f023 0307 	bic.w	r3, r3, #7
 8010532:	3308      	adds	r3, #8
 8010534:	9303      	str	r3, [sp, #12]
 8010536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010538:	443b      	add	r3, r7
 801053a:	9309      	str	r3, [sp, #36]	; 0x24
 801053c:	e768      	b.n	8010410 <_vfiprintf_r+0x78>
 801053e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010542:	460c      	mov	r4, r1
 8010544:	2001      	movs	r0, #1
 8010546:	e7a6      	b.n	8010496 <_vfiprintf_r+0xfe>
 8010548:	2300      	movs	r3, #0
 801054a:	3401      	adds	r4, #1
 801054c:	9305      	str	r3, [sp, #20]
 801054e:	4619      	mov	r1, r3
 8010550:	f04f 0c0a 	mov.w	ip, #10
 8010554:	4620      	mov	r0, r4
 8010556:	f810 2b01 	ldrb.w	r2, [r0], #1
 801055a:	3a30      	subs	r2, #48	; 0x30
 801055c:	2a09      	cmp	r2, #9
 801055e:	d903      	bls.n	8010568 <_vfiprintf_r+0x1d0>
 8010560:	2b00      	cmp	r3, #0
 8010562:	d0c6      	beq.n	80104f2 <_vfiprintf_r+0x15a>
 8010564:	9105      	str	r1, [sp, #20]
 8010566:	e7c4      	b.n	80104f2 <_vfiprintf_r+0x15a>
 8010568:	fb0c 2101 	mla	r1, ip, r1, r2
 801056c:	4604      	mov	r4, r0
 801056e:	2301      	movs	r3, #1
 8010570:	e7f0      	b.n	8010554 <_vfiprintf_r+0x1bc>
 8010572:	ab03      	add	r3, sp, #12
 8010574:	9300      	str	r3, [sp, #0]
 8010576:	462a      	mov	r2, r5
 8010578:	4b12      	ldr	r3, [pc, #72]	; (80105c4 <_vfiprintf_r+0x22c>)
 801057a:	a904      	add	r1, sp, #16
 801057c:	4630      	mov	r0, r6
 801057e:	f7fc fa59 	bl	800ca34 <_printf_float>
 8010582:	4607      	mov	r7, r0
 8010584:	1c78      	adds	r0, r7, #1
 8010586:	d1d6      	bne.n	8010536 <_vfiprintf_r+0x19e>
 8010588:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801058a:	07d9      	lsls	r1, r3, #31
 801058c:	d405      	bmi.n	801059a <_vfiprintf_r+0x202>
 801058e:	89ab      	ldrh	r3, [r5, #12]
 8010590:	059a      	lsls	r2, r3, #22
 8010592:	d402      	bmi.n	801059a <_vfiprintf_r+0x202>
 8010594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010596:	f7fd fab6 	bl	800db06 <__retarget_lock_release_recursive>
 801059a:	89ab      	ldrh	r3, [r5, #12]
 801059c:	065b      	lsls	r3, r3, #25
 801059e:	f53f af1d 	bmi.w	80103dc <_vfiprintf_r+0x44>
 80105a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80105a4:	e71c      	b.n	80103e0 <_vfiprintf_r+0x48>
 80105a6:	ab03      	add	r3, sp, #12
 80105a8:	9300      	str	r3, [sp, #0]
 80105aa:	462a      	mov	r2, r5
 80105ac:	4b05      	ldr	r3, [pc, #20]	; (80105c4 <_vfiprintf_r+0x22c>)
 80105ae:	a904      	add	r1, sp, #16
 80105b0:	4630      	mov	r0, r6
 80105b2:	f7fc fce3 	bl	800cf7c <_printf_i>
 80105b6:	e7e4      	b.n	8010582 <_vfiprintf_r+0x1ea>
 80105b8:	08012439 	.word	0x08012439
 80105bc:	08012443 	.word	0x08012443
 80105c0:	0800ca35 	.word	0x0800ca35
 80105c4:	08010373 	.word	0x08010373
 80105c8:	0801243f 	.word	0x0801243f

080105cc <__sflush_r>:
 80105cc:	898a      	ldrh	r2, [r1, #12]
 80105ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105d2:	4605      	mov	r5, r0
 80105d4:	0710      	lsls	r0, r2, #28
 80105d6:	460c      	mov	r4, r1
 80105d8:	d458      	bmi.n	801068c <__sflush_r+0xc0>
 80105da:	684b      	ldr	r3, [r1, #4]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	dc05      	bgt.n	80105ec <__sflush_r+0x20>
 80105e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	dc02      	bgt.n	80105ec <__sflush_r+0x20>
 80105e6:	2000      	movs	r0, #0
 80105e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105ee:	2e00      	cmp	r6, #0
 80105f0:	d0f9      	beq.n	80105e6 <__sflush_r+0x1a>
 80105f2:	2300      	movs	r3, #0
 80105f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105f8:	682f      	ldr	r7, [r5, #0]
 80105fa:	6a21      	ldr	r1, [r4, #32]
 80105fc:	602b      	str	r3, [r5, #0]
 80105fe:	d032      	beq.n	8010666 <__sflush_r+0x9a>
 8010600:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010602:	89a3      	ldrh	r3, [r4, #12]
 8010604:	075a      	lsls	r2, r3, #29
 8010606:	d505      	bpl.n	8010614 <__sflush_r+0x48>
 8010608:	6863      	ldr	r3, [r4, #4]
 801060a:	1ac0      	subs	r0, r0, r3
 801060c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801060e:	b10b      	cbz	r3, 8010614 <__sflush_r+0x48>
 8010610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010612:	1ac0      	subs	r0, r0, r3
 8010614:	2300      	movs	r3, #0
 8010616:	4602      	mov	r2, r0
 8010618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801061a:	6a21      	ldr	r1, [r4, #32]
 801061c:	4628      	mov	r0, r5
 801061e:	47b0      	blx	r6
 8010620:	1c43      	adds	r3, r0, #1
 8010622:	89a3      	ldrh	r3, [r4, #12]
 8010624:	d106      	bne.n	8010634 <__sflush_r+0x68>
 8010626:	6829      	ldr	r1, [r5, #0]
 8010628:	291d      	cmp	r1, #29
 801062a:	d82b      	bhi.n	8010684 <__sflush_r+0xb8>
 801062c:	4a29      	ldr	r2, [pc, #164]	; (80106d4 <__sflush_r+0x108>)
 801062e:	410a      	asrs	r2, r1
 8010630:	07d6      	lsls	r6, r2, #31
 8010632:	d427      	bmi.n	8010684 <__sflush_r+0xb8>
 8010634:	2200      	movs	r2, #0
 8010636:	6062      	str	r2, [r4, #4]
 8010638:	04d9      	lsls	r1, r3, #19
 801063a:	6922      	ldr	r2, [r4, #16]
 801063c:	6022      	str	r2, [r4, #0]
 801063e:	d504      	bpl.n	801064a <__sflush_r+0x7e>
 8010640:	1c42      	adds	r2, r0, #1
 8010642:	d101      	bne.n	8010648 <__sflush_r+0x7c>
 8010644:	682b      	ldr	r3, [r5, #0]
 8010646:	b903      	cbnz	r3, 801064a <__sflush_r+0x7e>
 8010648:	6560      	str	r0, [r4, #84]	; 0x54
 801064a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801064c:	602f      	str	r7, [r5, #0]
 801064e:	2900      	cmp	r1, #0
 8010650:	d0c9      	beq.n	80105e6 <__sflush_r+0x1a>
 8010652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010656:	4299      	cmp	r1, r3
 8010658:	d002      	beq.n	8010660 <__sflush_r+0x94>
 801065a:	4628      	mov	r0, r5
 801065c:	f7fe f8d6 	bl	800e80c <_free_r>
 8010660:	2000      	movs	r0, #0
 8010662:	6360      	str	r0, [r4, #52]	; 0x34
 8010664:	e7c0      	b.n	80105e8 <__sflush_r+0x1c>
 8010666:	2301      	movs	r3, #1
 8010668:	4628      	mov	r0, r5
 801066a:	47b0      	blx	r6
 801066c:	1c41      	adds	r1, r0, #1
 801066e:	d1c8      	bne.n	8010602 <__sflush_r+0x36>
 8010670:	682b      	ldr	r3, [r5, #0]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d0c5      	beq.n	8010602 <__sflush_r+0x36>
 8010676:	2b1d      	cmp	r3, #29
 8010678:	d001      	beq.n	801067e <__sflush_r+0xb2>
 801067a:	2b16      	cmp	r3, #22
 801067c:	d101      	bne.n	8010682 <__sflush_r+0xb6>
 801067e:	602f      	str	r7, [r5, #0]
 8010680:	e7b1      	b.n	80105e6 <__sflush_r+0x1a>
 8010682:	89a3      	ldrh	r3, [r4, #12]
 8010684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010688:	81a3      	strh	r3, [r4, #12]
 801068a:	e7ad      	b.n	80105e8 <__sflush_r+0x1c>
 801068c:	690f      	ldr	r7, [r1, #16]
 801068e:	2f00      	cmp	r7, #0
 8010690:	d0a9      	beq.n	80105e6 <__sflush_r+0x1a>
 8010692:	0793      	lsls	r3, r2, #30
 8010694:	680e      	ldr	r6, [r1, #0]
 8010696:	bf08      	it	eq
 8010698:	694b      	ldreq	r3, [r1, #20]
 801069a:	600f      	str	r7, [r1, #0]
 801069c:	bf18      	it	ne
 801069e:	2300      	movne	r3, #0
 80106a0:	eba6 0807 	sub.w	r8, r6, r7
 80106a4:	608b      	str	r3, [r1, #8]
 80106a6:	f1b8 0f00 	cmp.w	r8, #0
 80106aa:	dd9c      	ble.n	80105e6 <__sflush_r+0x1a>
 80106ac:	6a21      	ldr	r1, [r4, #32]
 80106ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106b0:	4643      	mov	r3, r8
 80106b2:	463a      	mov	r2, r7
 80106b4:	4628      	mov	r0, r5
 80106b6:	47b0      	blx	r6
 80106b8:	2800      	cmp	r0, #0
 80106ba:	dc06      	bgt.n	80106ca <__sflush_r+0xfe>
 80106bc:	89a3      	ldrh	r3, [r4, #12]
 80106be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106c2:	81a3      	strh	r3, [r4, #12]
 80106c4:	f04f 30ff 	mov.w	r0, #4294967295
 80106c8:	e78e      	b.n	80105e8 <__sflush_r+0x1c>
 80106ca:	4407      	add	r7, r0
 80106cc:	eba8 0800 	sub.w	r8, r8, r0
 80106d0:	e7e9      	b.n	80106a6 <__sflush_r+0xda>
 80106d2:	bf00      	nop
 80106d4:	dfbffffe 	.word	0xdfbffffe

080106d8 <_fflush_r>:
 80106d8:	b538      	push	{r3, r4, r5, lr}
 80106da:	690b      	ldr	r3, [r1, #16]
 80106dc:	4605      	mov	r5, r0
 80106de:	460c      	mov	r4, r1
 80106e0:	b913      	cbnz	r3, 80106e8 <_fflush_r+0x10>
 80106e2:	2500      	movs	r5, #0
 80106e4:	4628      	mov	r0, r5
 80106e6:	bd38      	pop	{r3, r4, r5, pc}
 80106e8:	b118      	cbz	r0, 80106f2 <_fflush_r+0x1a>
 80106ea:	6a03      	ldr	r3, [r0, #32]
 80106ec:	b90b      	cbnz	r3, 80106f2 <_fflush_r+0x1a>
 80106ee:	f7fc fff1 	bl	800d6d4 <__sinit>
 80106f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d0f3      	beq.n	80106e2 <_fflush_r+0xa>
 80106fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80106fc:	07d0      	lsls	r0, r2, #31
 80106fe:	d404      	bmi.n	801070a <_fflush_r+0x32>
 8010700:	0599      	lsls	r1, r3, #22
 8010702:	d402      	bmi.n	801070a <_fflush_r+0x32>
 8010704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010706:	f7fd f9fd 	bl	800db04 <__retarget_lock_acquire_recursive>
 801070a:	4628      	mov	r0, r5
 801070c:	4621      	mov	r1, r4
 801070e:	f7ff ff5d 	bl	80105cc <__sflush_r>
 8010712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010714:	07da      	lsls	r2, r3, #31
 8010716:	4605      	mov	r5, r0
 8010718:	d4e4      	bmi.n	80106e4 <_fflush_r+0xc>
 801071a:	89a3      	ldrh	r3, [r4, #12]
 801071c:	059b      	lsls	r3, r3, #22
 801071e:	d4e1      	bmi.n	80106e4 <_fflush_r+0xc>
 8010720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010722:	f7fd f9f0 	bl	800db06 <__retarget_lock_release_recursive>
 8010726:	e7dd      	b.n	80106e4 <_fflush_r+0xc>

08010728 <__swhatbuf_r>:
 8010728:	b570      	push	{r4, r5, r6, lr}
 801072a:	460c      	mov	r4, r1
 801072c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010730:	2900      	cmp	r1, #0
 8010732:	b096      	sub	sp, #88	; 0x58
 8010734:	4615      	mov	r5, r2
 8010736:	461e      	mov	r6, r3
 8010738:	da0d      	bge.n	8010756 <__swhatbuf_r+0x2e>
 801073a:	89a3      	ldrh	r3, [r4, #12]
 801073c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010740:	f04f 0100 	mov.w	r1, #0
 8010744:	bf0c      	ite	eq
 8010746:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801074a:	2340      	movne	r3, #64	; 0x40
 801074c:	2000      	movs	r0, #0
 801074e:	6031      	str	r1, [r6, #0]
 8010750:	602b      	str	r3, [r5, #0]
 8010752:	b016      	add	sp, #88	; 0x58
 8010754:	bd70      	pop	{r4, r5, r6, pc}
 8010756:	466a      	mov	r2, sp
 8010758:	f000 f874 	bl	8010844 <_fstat_r>
 801075c:	2800      	cmp	r0, #0
 801075e:	dbec      	blt.n	801073a <__swhatbuf_r+0x12>
 8010760:	9901      	ldr	r1, [sp, #4]
 8010762:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010766:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801076a:	4259      	negs	r1, r3
 801076c:	4159      	adcs	r1, r3
 801076e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010772:	e7eb      	b.n	801074c <__swhatbuf_r+0x24>

08010774 <__smakebuf_r>:
 8010774:	898b      	ldrh	r3, [r1, #12]
 8010776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010778:	079d      	lsls	r5, r3, #30
 801077a:	4606      	mov	r6, r0
 801077c:	460c      	mov	r4, r1
 801077e:	d507      	bpl.n	8010790 <__smakebuf_r+0x1c>
 8010780:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010784:	6023      	str	r3, [r4, #0]
 8010786:	6123      	str	r3, [r4, #16]
 8010788:	2301      	movs	r3, #1
 801078a:	6163      	str	r3, [r4, #20]
 801078c:	b002      	add	sp, #8
 801078e:	bd70      	pop	{r4, r5, r6, pc}
 8010790:	ab01      	add	r3, sp, #4
 8010792:	466a      	mov	r2, sp
 8010794:	f7ff ffc8 	bl	8010728 <__swhatbuf_r>
 8010798:	9900      	ldr	r1, [sp, #0]
 801079a:	4605      	mov	r5, r0
 801079c:	4630      	mov	r0, r6
 801079e:	f7fe f8a9 	bl	800e8f4 <_malloc_r>
 80107a2:	b948      	cbnz	r0, 80107b8 <__smakebuf_r+0x44>
 80107a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107a8:	059a      	lsls	r2, r3, #22
 80107aa:	d4ef      	bmi.n	801078c <__smakebuf_r+0x18>
 80107ac:	f023 0303 	bic.w	r3, r3, #3
 80107b0:	f043 0302 	orr.w	r3, r3, #2
 80107b4:	81a3      	strh	r3, [r4, #12]
 80107b6:	e7e3      	b.n	8010780 <__smakebuf_r+0xc>
 80107b8:	89a3      	ldrh	r3, [r4, #12]
 80107ba:	6020      	str	r0, [r4, #0]
 80107bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107c0:	81a3      	strh	r3, [r4, #12]
 80107c2:	9b00      	ldr	r3, [sp, #0]
 80107c4:	6163      	str	r3, [r4, #20]
 80107c6:	9b01      	ldr	r3, [sp, #4]
 80107c8:	6120      	str	r0, [r4, #16]
 80107ca:	b15b      	cbz	r3, 80107e4 <__smakebuf_r+0x70>
 80107cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107d0:	4630      	mov	r0, r6
 80107d2:	f000 f849 	bl	8010868 <_isatty_r>
 80107d6:	b128      	cbz	r0, 80107e4 <__smakebuf_r+0x70>
 80107d8:	89a3      	ldrh	r3, [r4, #12]
 80107da:	f023 0303 	bic.w	r3, r3, #3
 80107de:	f043 0301 	orr.w	r3, r3, #1
 80107e2:	81a3      	strh	r3, [r4, #12]
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	431d      	orrs	r5, r3
 80107e8:	81a5      	strh	r5, [r4, #12]
 80107ea:	e7cf      	b.n	801078c <__smakebuf_r+0x18>

080107ec <memmove>:
 80107ec:	4288      	cmp	r0, r1
 80107ee:	b510      	push	{r4, lr}
 80107f0:	eb01 0402 	add.w	r4, r1, r2
 80107f4:	d902      	bls.n	80107fc <memmove+0x10>
 80107f6:	4284      	cmp	r4, r0
 80107f8:	4623      	mov	r3, r4
 80107fa:	d807      	bhi.n	801080c <memmove+0x20>
 80107fc:	1e43      	subs	r3, r0, #1
 80107fe:	42a1      	cmp	r1, r4
 8010800:	d008      	beq.n	8010814 <memmove+0x28>
 8010802:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010806:	f803 2f01 	strb.w	r2, [r3, #1]!
 801080a:	e7f8      	b.n	80107fe <memmove+0x12>
 801080c:	4402      	add	r2, r0
 801080e:	4601      	mov	r1, r0
 8010810:	428a      	cmp	r2, r1
 8010812:	d100      	bne.n	8010816 <memmove+0x2a>
 8010814:	bd10      	pop	{r4, pc}
 8010816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801081a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801081e:	e7f7      	b.n	8010810 <memmove+0x24>

08010820 <strncmp>:
 8010820:	b510      	push	{r4, lr}
 8010822:	b16a      	cbz	r2, 8010840 <strncmp+0x20>
 8010824:	3901      	subs	r1, #1
 8010826:	1884      	adds	r4, r0, r2
 8010828:	f810 2b01 	ldrb.w	r2, [r0], #1
 801082c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8010830:	429a      	cmp	r2, r3
 8010832:	d103      	bne.n	801083c <strncmp+0x1c>
 8010834:	42a0      	cmp	r0, r4
 8010836:	d001      	beq.n	801083c <strncmp+0x1c>
 8010838:	2a00      	cmp	r2, #0
 801083a:	d1f5      	bne.n	8010828 <strncmp+0x8>
 801083c:	1ad0      	subs	r0, r2, r3
 801083e:	bd10      	pop	{r4, pc}
 8010840:	4610      	mov	r0, r2
 8010842:	e7fc      	b.n	801083e <strncmp+0x1e>

08010844 <_fstat_r>:
 8010844:	b538      	push	{r3, r4, r5, lr}
 8010846:	4d07      	ldr	r5, [pc, #28]	; (8010864 <_fstat_r+0x20>)
 8010848:	2300      	movs	r3, #0
 801084a:	4604      	mov	r4, r0
 801084c:	4608      	mov	r0, r1
 801084e:	4611      	mov	r1, r2
 8010850:	602b      	str	r3, [r5, #0]
 8010852:	f7f3 fb13 	bl	8003e7c <_fstat>
 8010856:	1c43      	adds	r3, r0, #1
 8010858:	d102      	bne.n	8010860 <_fstat_r+0x1c>
 801085a:	682b      	ldr	r3, [r5, #0]
 801085c:	b103      	cbz	r3, 8010860 <_fstat_r+0x1c>
 801085e:	6023      	str	r3, [r4, #0]
 8010860:	bd38      	pop	{r3, r4, r5, pc}
 8010862:	bf00      	nop
 8010864:	2000296c 	.word	0x2000296c

08010868 <_isatty_r>:
 8010868:	b538      	push	{r3, r4, r5, lr}
 801086a:	4d06      	ldr	r5, [pc, #24]	; (8010884 <_isatty_r+0x1c>)
 801086c:	2300      	movs	r3, #0
 801086e:	4604      	mov	r4, r0
 8010870:	4608      	mov	r0, r1
 8010872:	602b      	str	r3, [r5, #0]
 8010874:	f7f3 fb12 	bl	8003e9c <_isatty>
 8010878:	1c43      	adds	r3, r0, #1
 801087a:	d102      	bne.n	8010882 <_isatty_r+0x1a>
 801087c:	682b      	ldr	r3, [r5, #0]
 801087e:	b103      	cbz	r3, 8010882 <_isatty_r+0x1a>
 8010880:	6023      	str	r3, [r4, #0]
 8010882:	bd38      	pop	{r3, r4, r5, pc}
 8010884:	2000296c 	.word	0x2000296c

08010888 <_sbrk_r>:
 8010888:	b538      	push	{r3, r4, r5, lr}
 801088a:	4d06      	ldr	r5, [pc, #24]	; (80108a4 <_sbrk_r+0x1c>)
 801088c:	2300      	movs	r3, #0
 801088e:	4604      	mov	r4, r0
 8010890:	4608      	mov	r0, r1
 8010892:	602b      	str	r3, [r5, #0]
 8010894:	f7f3 fb1a 	bl	8003ecc <_sbrk>
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	d102      	bne.n	80108a2 <_sbrk_r+0x1a>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	b103      	cbz	r3, 80108a2 <_sbrk_r+0x1a>
 80108a0:	6023      	str	r3, [r4, #0]
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	2000296c 	.word	0x2000296c

080108a8 <memcpy>:
 80108a8:	440a      	add	r2, r1
 80108aa:	4291      	cmp	r1, r2
 80108ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80108b0:	d100      	bne.n	80108b4 <memcpy+0xc>
 80108b2:	4770      	bx	lr
 80108b4:	b510      	push	{r4, lr}
 80108b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80108be:	4291      	cmp	r1, r2
 80108c0:	d1f9      	bne.n	80108b6 <memcpy+0xe>
 80108c2:	bd10      	pop	{r4, pc}
 80108c4:	0000      	movs	r0, r0
	...

080108c8 <nan>:
 80108c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80108d0 <nan+0x8>
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	00000000 	.word	0x00000000
 80108d4:	7ff80000 	.word	0x7ff80000

080108d8 <__assert_func>:
 80108d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80108da:	4614      	mov	r4, r2
 80108dc:	461a      	mov	r2, r3
 80108de:	4b09      	ldr	r3, [pc, #36]	; (8010904 <__assert_func+0x2c>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4605      	mov	r5, r0
 80108e4:	68d8      	ldr	r0, [r3, #12]
 80108e6:	b14c      	cbz	r4, 80108fc <__assert_func+0x24>
 80108e8:	4b07      	ldr	r3, [pc, #28]	; (8010908 <__assert_func+0x30>)
 80108ea:	9100      	str	r1, [sp, #0]
 80108ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108f0:	4906      	ldr	r1, [pc, #24]	; (801090c <__assert_func+0x34>)
 80108f2:	462b      	mov	r3, r5
 80108f4:	f000 fbca 	bl	801108c <fiprintf>
 80108f8:	f000 fbda 	bl	80110b0 <abort>
 80108fc:	4b04      	ldr	r3, [pc, #16]	; (8010910 <__assert_func+0x38>)
 80108fe:	461c      	mov	r4, r3
 8010900:	e7f3      	b.n	80108ea <__assert_func+0x12>
 8010902:	bf00      	nop
 8010904:	2000007c 	.word	0x2000007c
 8010908:	08012452 	.word	0x08012452
 801090c:	0801245f 	.word	0x0801245f
 8010910:	0801248d 	.word	0x0801248d

08010914 <_calloc_r>:
 8010914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010916:	fba1 2402 	umull	r2, r4, r1, r2
 801091a:	b94c      	cbnz	r4, 8010930 <_calloc_r+0x1c>
 801091c:	4611      	mov	r1, r2
 801091e:	9201      	str	r2, [sp, #4]
 8010920:	f7fd ffe8 	bl	800e8f4 <_malloc_r>
 8010924:	9a01      	ldr	r2, [sp, #4]
 8010926:	4605      	mov	r5, r0
 8010928:	b930      	cbnz	r0, 8010938 <_calloc_r+0x24>
 801092a:	4628      	mov	r0, r5
 801092c:	b003      	add	sp, #12
 801092e:	bd30      	pop	{r4, r5, pc}
 8010930:	220c      	movs	r2, #12
 8010932:	6002      	str	r2, [r0, #0]
 8010934:	2500      	movs	r5, #0
 8010936:	e7f8      	b.n	801092a <_calloc_r+0x16>
 8010938:	4621      	mov	r1, r4
 801093a:	f7fd f867 	bl	800da0c <memset>
 801093e:	e7f4      	b.n	801092a <_calloc_r+0x16>

08010940 <rshift>:
 8010940:	6903      	ldr	r3, [r0, #16]
 8010942:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010946:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801094a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801094e:	f100 0414 	add.w	r4, r0, #20
 8010952:	dd45      	ble.n	80109e0 <rshift+0xa0>
 8010954:	f011 011f 	ands.w	r1, r1, #31
 8010958:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801095c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010960:	d10c      	bne.n	801097c <rshift+0x3c>
 8010962:	f100 0710 	add.w	r7, r0, #16
 8010966:	4629      	mov	r1, r5
 8010968:	42b1      	cmp	r1, r6
 801096a:	d334      	bcc.n	80109d6 <rshift+0x96>
 801096c:	1a9b      	subs	r3, r3, r2
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	1eea      	subs	r2, r5, #3
 8010972:	4296      	cmp	r6, r2
 8010974:	bf38      	it	cc
 8010976:	2300      	movcc	r3, #0
 8010978:	4423      	add	r3, r4
 801097a:	e015      	b.n	80109a8 <rshift+0x68>
 801097c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010980:	f1c1 0820 	rsb	r8, r1, #32
 8010984:	40cf      	lsrs	r7, r1
 8010986:	f105 0e04 	add.w	lr, r5, #4
 801098a:	46a1      	mov	r9, r4
 801098c:	4576      	cmp	r6, lr
 801098e:	46f4      	mov	ip, lr
 8010990:	d815      	bhi.n	80109be <rshift+0x7e>
 8010992:	1a9a      	subs	r2, r3, r2
 8010994:	0092      	lsls	r2, r2, #2
 8010996:	3a04      	subs	r2, #4
 8010998:	3501      	adds	r5, #1
 801099a:	42ae      	cmp	r6, r5
 801099c:	bf38      	it	cc
 801099e:	2200      	movcc	r2, #0
 80109a0:	18a3      	adds	r3, r4, r2
 80109a2:	50a7      	str	r7, [r4, r2]
 80109a4:	b107      	cbz	r7, 80109a8 <rshift+0x68>
 80109a6:	3304      	adds	r3, #4
 80109a8:	1b1a      	subs	r2, r3, r4
 80109aa:	42a3      	cmp	r3, r4
 80109ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80109b0:	bf08      	it	eq
 80109b2:	2300      	moveq	r3, #0
 80109b4:	6102      	str	r2, [r0, #16]
 80109b6:	bf08      	it	eq
 80109b8:	6143      	streq	r3, [r0, #20]
 80109ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109be:	f8dc c000 	ldr.w	ip, [ip]
 80109c2:	fa0c fc08 	lsl.w	ip, ip, r8
 80109c6:	ea4c 0707 	orr.w	r7, ip, r7
 80109ca:	f849 7b04 	str.w	r7, [r9], #4
 80109ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80109d2:	40cf      	lsrs	r7, r1
 80109d4:	e7da      	b.n	801098c <rshift+0x4c>
 80109d6:	f851 cb04 	ldr.w	ip, [r1], #4
 80109da:	f847 cf04 	str.w	ip, [r7, #4]!
 80109de:	e7c3      	b.n	8010968 <rshift+0x28>
 80109e0:	4623      	mov	r3, r4
 80109e2:	e7e1      	b.n	80109a8 <rshift+0x68>

080109e4 <__hexdig_fun>:
 80109e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80109e8:	2b09      	cmp	r3, #9
 80109ea:	d802      	bhi.n	80109f2 <__hexdig_fun+0xe>
 80109ec:	3820      	subs	r0, #32
 80109ee:	b2c0      	uxtb	r0, r0
 80109f0:	4770      	bx	lr
 80109f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80109f6:	2b05      	cmp	r3, #5
 80109f8:	d801      	bhi.n	80109fe <__hexdig_fun+0x1a>
 80109fa:	3847      	subs	r0, #71	; 0x47
 80109fc:	e7f7      	b.n	80109ee <__hexdig_fun+0xa>
 80109fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010a02:	2b05      	cmp	r3, #5
 8010a04:	d801      	bhi.n	8010a0a <__hexdig_fun+0x26>
 8010a06:	3827      	subs	r0, #39	; 0x27
 8010a08:	e7f1      	b.n	80109ee <__hexdig_fun+0xa>
 8010a0a:	2000      	movs	r0, #0
 8010a0c:	4770      	bx	lr
	...

08010a10 <__gethex>:
 8010a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a14:	4617      	mov	r7, r2
 8010a16:	680a      	ldr	r2, [r1, #0]
 8010a18:	b085      	sub	sp, #20
 8010a1a:	f102 0b02 	add.w	fp, r2, #2
 8010a1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010a22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010a26:	4681      	mov	r9, r0
 8010a28:	468a      	mov	sl, r1
 8010a2a:	9302      	str	r3, [sp, #8]
 8010a2c:	32fe      	adds	r2, #254	; 0xfe
 8010a2e:	eb02 030b 	add.w	r3, r2, fp
 8010a32:	46d8      	mov	r8, fp
 8010a34:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8010a38:	9301      	str	r3, [sp, #4]
 8010a3a:	2830      	cmp	r0, #48	; 0x30
 8010a3c:	d0f7      	beq.n	8010a2e <__gethex+0x1e>
 8010a3e:	f7ff ffd1 	bl	80109e4 <__hexdig_fun>
 8010a42:	4604      	mov	r4, r0
 8010a44:	2800      	cmp	r0, #0
 8010a46:	d138      	bne.n	8010aba <__gethex+0xaa>
 8010a48:	49a7      	ldr	r1, [pc, #668]	; (8010ce8 <__gethex+0x2d8>)
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	4640      	mov	r0, r8
 8010a4e:	f7ff fee7 	bl	8010820 <strncmp>
 8010a52:	4606      	mov	r6, r0
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d169      	bne.n	8010b2c <__gethex+0x11c>
 8010a58:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010a5c:	465d      	mov	r5, fp
 8010a5e:	f7ff ffc1 	bl	80109e4 <__hexdig_fun>
 8010a62:	2800      	cmp	r0, #0
 8010a64:	d064      	beq.n	8010b30 <__gethex+0x120>
 8010a66:	465a      	mov	r2, fp
 8010a68:	7810      	ldrb	r0, [r2, #0]
 8010a6a:	2830      	cmp	r0, #48	; 0x30
 8010a6c:	4690      	mov	r8, r2
 8010a6e:	f102 0201 	add.w	r2, r2, #1
 8010a72:	d0f9      	beq.n	8010a68 <__gethex+0x58>
 8010a74:	f7ff ffb6 	bl	80109e4 <__hexdig_fun>
 8010a78:	2301      	movs	r3, #1
 8010a7a:	fab0 f480 	clz	r4, r0
 8010a7e:	0964      	lsrs	r4, r4, #5
 8010a80:	465e      	mov	r6, fp
 8010a82:	9301      	str	r3, [sp, #4]
 8010a84:	4642      	mov	r2, r8
 8010a86:	4615      	mov	r5, r2
 8010a88:	3201      	adds	r2, #1
 8010a8a:	7828      	ldrb	r0, [r5, #0]
 8010a8c:	f7ff ffaa 	bl	80109e4 <__hexdig_fun>
 8010a90:	2800      	cmp	r0, #0
 8010a92:	d1f8      	bne.n	8010a86 <__gethex+0x76>
 8010a94:	4994      	ldr	r1, [pc, #592]	; (8010ce8 <__gethex+0x2d8>)
 8010a96:	2201      	movs	r2, #1
 8010a98:	4628      	mov	r0, r5
 8010a9a:	f7ff fec1 	bl	8010820 <strncmp>
 8010a9e:	b978      	cbnz	r0, 8010ac0 <__gethex+0xb0>
 8010aa0:	b946      	cbnz	r6, 8010ab4 <__gethex+0xa4>
 8010aa2:	1c6e      	adds	r6, r5, #1
 8010aa4:	4632      	mov	r2, r6
 8010aa6:	4615      	mov	r5, r2
 8010aa8:	3201      	adds	r2, #1
 8010aaa:	7828      	ldrb	r0, [r5, #0]
 8010aac:	f7ff ff9a 	bl	80109e4 <__hexdig_fun>
 8010ab0:	2800      	cmp	r0, #0
 8010ab2:	d1f8      	bne.n	8010aa6 <__gethex+0x96>
 8010ab4:	1b73      	subs	r3, r6, r5
 8010ab6:	009e      	lsls	r6, r3, #2
 8010ab8:	e004      	b.n	8010ac4 <__gethex+0xb4>
 8010aba:	2400      	movs	r4, #0
 8010abc:	4626      	mov	r6, r4
 8010abe:	e7e1      	b.n	8010a84 <__gethex+0x74>
 8010ac0:	2e00      	cmp	r6, #0
 8010ac2:	d1f7      	bne.n	8010ab4 <__gethex+0xa4>
 8010ac4:	782b      	ldrb	r3, [r5, #0]
 8010ac6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010aca:	2b50      	cmp	r3, #80	; 0x50
 8010acc:	d13d      	bne.n	8010b4a <__gethex+0x13a>
 8010ace:	786b      	ldrb	r3, [r5, #1]
 8010ad0:	2b2b      	cmp	r3, #43	; 0x2b
 8010ad2:	d02f      	beq.n	8010b34 <__gethex+0x124>
 8010ad4:	2b2d      	cmp	r3, #45	; 0x2d
 8010ad6:	d031      	beq.n	8010b3c <__gethex+0x12c>
 8010ad8:	1c69      	adds	r1, r5, #1
 8010ada:	f04f 0b00 	mov.w	fp, #0
 8010ade:	7808      	ldrb	r0, [r1, #0]
 8010ae0:	f7ff ff80 	bl	80109e4 <__hexdig_fun>
 8010ae4:	1e42      	subs	r2, r0, #1
 8010ae6:	b2d2      	uxtb	r2, r2
 8010ae8:	2a18      	cmp	r2, #24
 8010aea:	d82e      	bhi.n	8010b4a <__gethex+0x13a>
 8010aec:	f1a0 0210 	sub.w	r2, r0, #16
 8010af0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010af4:	f7ff ff76 	bl	80109e4 <__hexdig_fun>
 8010af8:	f100 3cff 	add.w	ip, r0, #4294967295
 8010afc:	fa5f fc8c 	uxtb.w	ip, ip
 8010b00:	f1bc 0f18 	cmp.w	ip, #24
 8010b04:	d91d      	bls.n	8010b42 <__gethex+0x132>
 8010b06:	f1bb 0f00 	cmp.w	fp, #0
 8010b0a:	d000      	beq.n	8010b0e <__gethex+0xfe>
 8010b0c:	4252      	negs	r2, r2
 8010b0e:	4416      	add	r6, r2
 8010b10:	f8ca 1000 	str.w	r1, [sl]
 8010b14:	b1dc      	cbz	r4, 8010b4e <__gethex+0x13e>
 8010b16:	9b01      	ldr	r3, [sp, #4]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	bf14      	ite	ne
 8010b1c:	f04f 0800 	movne.w	r8, #0
 8010b20:	f04f 0806 	moveq.w	r8, #6
 8010b24:	4640      	mov	r0, r8
 8010b26:	b005      	add	sp, #20
 8010b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b2c:	4645      	mov	r5, r8
 8010b2e:	4626      	mov	r6, r4
 8010b30:	2401      	movs	r4, #1
 8010b32:	e7c7      	b.n	8010ac4 <__gethex+0xb4>
 8010b34:	f04f 0b00 	mov.w	fp, #0
 8010b38:	1ca9      	adds	r1, r5, #2
 8010b3a:	e7d0      	b.n	8010ade <__gethex+0xce>
 8010b3c:	f04f 0b01 	mov.w	fp, #1
 8010b40:	e7fa      	b.n	8010b38 <__gethex+0x128>
 8010b42:	230a      	movs	r3, #10
 8010b44:	fb03 0002 	mla	r0, r3, r2, r0
 8010b48:	e7d0      	b.n	8010aec <__gethex+0xdc>
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	e7e0      	b.n	8010b10 <__gethex+0x100>
 8010b4e:	eba5 0308 	sub.w	r3, r5, r8
 8010b52:	3b01      	subs	r3, #1
 8010b54:	4621      	mov	r1, r4
 8010b56:	2b07      	cmp	r3, #7
 8010b58:	dc0a      	bgt.n	8010b70 <__gethex+0x160>
 8010b5a:	4648      	mov	r0, r9
 8010b5c:	f7fd ff56 	bl	800ea0c <_Balloc>
 8010b60:	4604      	mov	r4, r0
 8010b62:	b940      	cbnz	r0, 8010b76 <__gethex+0x166>
 8010b64:	4b61      	ldr	r3, [pc, #388]	; (8010cec <__gethex+0x2dc>)
 8010b66:	4602      	mov	r2, r0
 8010b68:	21e4      	movs	r1, #228	; 0xe4
 8010b6a:	4861      	ldr	r0, [pc, #388]	; (8010cf0 <__gethex+0x2e0>)
 8010b6c:	f7ff feb4 	bl	80108d8 <__assert_func>
 8010b70:	3101      	adds	r1, #1
 8010b72:	105b      	asrs	r3, r3, #1
 8010b74:	e7ef      	b.n	8010b56 <__gethex+0x146>
 8010b76:	f100 0a14 	add.w	sl, r0, #20
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	495a      	ldr	r1, [pc, #360]	; (8010ce8 <__gethex+0x2d8>)
 8010b7e:	f8cd a004 	str.w	sl, [sp, #4]
 8010b82:	469b      	mov	fp, r3
 8010b84:	45a8      	cmp	r8, r5
 8010b86:	d342      	bcc.n	8010c0e <__gethex+0x1fe>
 8010b88:	9801      	ldr	r0, [sp, #4]
 8010b8a:	f840 bb04 	str.w	fp, [r0], #4
 8010b8e:	eba0 000a 	sub.w	r0, r0, sl
 8010b92:	1080      	asrs	r0, r0, #2
 8010b94:	6120      	str	r0, [r4, #16]
 8010b96:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8010b9a:	4658      	mov	r0, fp
 8010b9c:	f7fe f828 	bl	800ebf0 <__hi0bits>
 8010ba0:	683d      	ldr	r5, [r7, #0]
 8010ba2:	eba8 0000 	sub.w	r0, r8, r0
 8010ba6:	42a8      	cmp	r0, r5
 8010ba8:	dd59      	ble.n	8010c5e <__gethex+0x24e>
 8010baa:	eba0 0805 	sub.w	r8, r0, r5
 8010bae:	4641      	mov	r1, r8
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	f7fe fbb7 	bl	800f324 <__any_on>
 8010bb6:	4683      	mov	fp, r0
 8010bb8:	b1b8      	cbz	r0, 8010bea <__gethex+0x1da>
 8010bba:	f108 33ff 	add.w	r3, r8, #4294967295
 8010bbe:	1159      	asrs	r1, r3, #5
 8010bc0:	f003 021f 	and.w	r2, r3, #31
 8010bc4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010bc8:	f04f 0b01 	mov.w	fp, #1
 8010bcc:	fa0b f202 	lsl.w	r2, fp, r2
 8010bd0:	420a      	tst	r2, r1
 8010bd2:	d00a      	beq.n	8010bea <__gethex+0x1da>
 8010bd4:	455b      	cmp	r3, fp
 8010bd6:	dd06      	ble.n	8010be6 <__gethex+0x1d6>
 8010bd8:	f1a8 0102 	sub.w	r1, r8, #2
 8010bdc:	4620      	mov	r0, r4
 8010bde:	f7fe fba1 	bl	800f324 <__any_on>
 8010be2:	2800      	cmp	r0, #0
 8010be4:	d138      	bne.n	8010c58 <__gethex+0x248>
 8010be6:	f04f 0b02 	mov.w	fp, #2
 8010bea:	4641      	mov	r1, r8
 8010bec:	4620      	mov	r0, r4
 8010bee:	f7ff fea7 	bl	8010940 <rshift>
 8010bf2:	4446      	add	r6, r8
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	42b3      	cmp	r3, r6
 8010bf8:	da41      	bge.n	8010c7e <__gethex+0x26e>
 8010bfa:	4621      	mov	r1, r4
 8010bfc:	4648      	mov	r0, r9
 8010bfe:	f7fd ff45 	bl	800ea8c <_Bfree>
 8010c02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010c04:	2300      	movs	r3, #0
 8010c06:	6013      	str	r3, [r2, #0]
 8010c08:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8010c0c:	e78a      	b.n	8010b24 <__gethex+0x114>
 8010c0e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8010c12:	2a2e      	cmp	r2, #46	; 0x2e
 8010c14:	d014      	beq.n	8010c40 <__gethex+0x230>
 8010c16:	2b20      	cmp	r3, #32
 8010c18:	d106      	bne.n	8010c28 <__gethex+0x218>
 8010c1a:	9b01      	ldr	r3, [sp, #4]
 8010c1c:	f843 bb04 	str.w	fp, [r3], #4
 8010c20:	f04f 0b00 	mov.w	fp, #0
 8010c24:	9301      	str	r3, [sp, #4]
 8010c26:	465b      	mov	r3, fp
 8010c28:	7828      	ldrb	r0, [r5, #0]
 8010c2a:	9303      	str	r3, [sp, #12]
 8010c2c:	f7ff feda 	bl	80109e4 <__hexdig_fun>
 8010c30:	9b03      	ldr	r3, [sp, #12]
 8010c32:	f000 000f 	and.w	r0, r0, #15
 8010c36:	4098      	lsls	r0, r3
 8010c38:	ea4b 0b00 	orr.w	fp, fp, r0
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	e7a1      	b.n	8010b84 <__gethex+0x174>
 8010c40:	45a8      	cmp	r8, r5
 8010c42:	d8e8      	bhi.n	8010c16 <__gethex+0x206>
 8010c44:	2201      	movs	r2, #1
 8010c46:	4628      	mov	r0, r5
 8010c48:	9303      	str	r3, [sp, #12]
 8010c4a:	f7ff fde9 	bl	8010820 <strncmp>
 8010c4e:	4926      	ldr	r1, [pc, #152]	; (8010ce8 <__gethex+0x2d8>)
 8010c50:	9b03      	ldr	r3, [sp, #12]
 8010c52:	2800      	cmp	r0, #0
 8010c54:	d1df      	bne.n	8010c16 <__gethex+0x206>
 8010c56:	e795      	b.n	8010b84 <__gethex+0x174>
 8010c58:	f04f 0b03 	mov.w	fp, #3
 8010c5c:	e7c5      	b.n	8010bea <__gethex+0x1da>
 8010c5e:	da0b      	bge.n	8010c78 <__gethex+0x268>
 8010c60:	eba5 0800 	sub.w	r8, r5, r0
 8010c64:	4621      	mov	r1, r4
 8010c66:	4642      	mov	r2, r8
 8010c68:	4648      	mov	r0, r9
 8010c6a:	f7fe f929 	bl	800eec0 <__lshift>
 8010c6e:	eba6 0608 	sub.w	r6, r6, r8
 8010c72:	4604      	mov	r4, r0
 8010c74:	f100 0a14 	add.w	sl, r0, #20
 8010c78:	f04f 0b00 	mov.w	fp, #0
 8010c7c:	e7ba      	b.n	8010bf4 <__gethex+0x1e4>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	42b3      	cmp	r3, r6
 8010c82:	dd73      	ble.n	8010d6c <__gethex+0x35c>
 8010c84:	1b9e      	subs	r6, r3, r6
 8010c86:	42b5      	cmp	r5, r6
 8010c88:	dc34      	bgt.n	8010cf4 <__gethex+0x2e4>
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2b02      	cmp	r3, #2
 8010c8e:	d023      	beq.n	8010cd8 <__gethex+0x2c8>
 8010c90:	2b03      	cmp	r3, #3
 8010c92:	d025      	beq.n	8010ce0 <__gethex+0x2d0>
 8010c94:	2b01      	cmp	r3, #1
 8010c96:	d115      	bne.n	8010cc4 <__gethex+0x2b4>
 8010c98:	42b5      	cmp	r5, r6
 8010c9a:	d113      	bne.n	8010cc4 <__gethex+0x2b4>
 8010c9c:	2d01      	cmp	r5, #1
 8010c9e:	d10b      	bne.n	8010cb8 <__gethex+0x2a8>
 8010ca0:	9a02      	ldr	r2, [sp, #8]
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6013      	str	r3, [r2, #0]
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	6123      	str	r3, [r4, #16]
 8010caa:	f8ca 3000 	str.w	r3, [sl]
 8010cae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cb0:	f04f 0862 	mov.w	r8, #98	; 0x62
 8010cb4:	601c      	str	r4, [r3, #0]
 8010cb6:	e735      	b.n	8010b24 <__gethex+0x114>
 8010cb8:	1e69      	subs	r1, r5, #1
 8010cba:	4620      	mov	r0, r4
 8010cbc:	f7fe fb32 	bl	800f324 <__any_on>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	d1ed      	bne.n	8010ca0 <__gethex+0x290>
 8010cc4:	4621      	mov	r1, r4
 8010cc6:	4648      	mov	r0, r9
 8010cc8:	f7fd fee0 	bl	800ea8c <_Bfree>
 8010ccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010cce:	2300      	movs	r3, #0
 8010cd0:	6013      	str	r3, [r2, #0]
 8010cd2:	f04f 0850 	mov.w	r8, #80	; 0x50
 8010cd6:	e725      	b.n	8010b24 <__gethex+0x114>
 8010cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d1f2      	bne.n	8010cc4 <__gethex+0x2b4>
 8010cde:	e7df      	b.n	8010ca0 <__gethex+0x290>
 8010ce0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d1dc      	bne.n	8010ca0 <__gethex+0x290>
 8010ce6:	e7ed      	b.n	8010cc4 <__gethex+0x2b4>
 8010ce8:	080122e4 	.word	0x080122e4
 8010cec:	08012179 	.word	0x08012179
 8010cf0:	0801248e 	.word	0x0801248e
 8010cf4:	f106 38ff 	add.w	r8, r6, #4294967295
 8010cf8:	f1bb 0f00 	cmp.w	fp, #0
 8010cfc:	d133      	bne.n	8010d66 <__gethex+0x356>
 8010cfe:	f1b8 0f00 	cmp.w	r8, #0
 8010d02:	d004      	beq.n	8010d0e <__gethex+0x2fe>
 8010d04:	4641      	mov	r1, r8
 8010d06:	4620      	mov	r0, r4
 8010d08:	f7fe fb0c 	bl	800f324 <__any_on>
 8010d0c:	4683      	mov	fp, r0
 8010d0e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8010d12:	2301      	movs	r3, #1
 8010d14:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010d18:	f008 081f 	and.w	r8, r8, #31
 8010d1c:	fa03 f308 	lsl.w	r3, r3, r8
 8010d20:	4213      	tst	r3, r2
 8010d22:	4631      	mov	r1, r6
 8010d24:	4620      	mov	r0, r4
 8010d26:	bf18      	it	ne
 8010d28:	f04b 0b02 	orrne.w	fp, fp, #2
 8010d2c:	1bad      	subs	r5, r5, r6
 8010d2e:	f7ff fe07 	bl	8010940 <rshift>
 8010d32:	687e      	ldr	r6, [r7, #4]
 8010d34:	f04f 0802 	mov.w	r8, #2
 8010d38:	f1bb 0f00 	cmp.w	fp, #0
 8010d3c:	d04a      	beq.n	8010dd4 <__gethex+0x3c4>
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2b02      	cmp	r3, #2
 8010d42:	d016      	beq.n	8010d72 <__gethex+0x362>
 8010d44:	2b03      	cmp	r3, #3
 8010d46:	d018      	beq.n	8010d7a <__gethex+0x36a>
 8010d48:	2b01      	cmp	r3, #1
 8010d4a:	d109      	bne.n	8010d60 <__gethex+0x350>
 8010d4c:	f01b 0f02 	tst.w	fp, #2
 8010d50:	d006      	beq.n	8010d60 <__gethex+0x350>
 8010d52:	f8da 3000 	ldr.w	r3, [sl]
 8010d56:	ea4b 0b03 	orr.w	fp, fp, r3
 8010d5a:	f01b 0f01 	tst.w	fp, #1
 8010d5e:	d10f      	bne.n	8010d80 <__gethex+0x370>
 8010d60:	f048 0810 	orr.w	r8, r8, #16
 8010d64:	e036      	b.n	8010dd4 <__gethex+0x3c4>
 8010d66:	f04f 0b01 	mov.w	fp, #1
 8010d6a:	e7d0      	b.n	8010d0e <__gethex+0x2fe>
 8010d6c:	f04f 0801 	mov.w	r8, #1
 8010d70:	e7e2      	b.n	8010d38 <__gethex+0x328>
 8010d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d74:	f1c3 0301 	rsb	r3, r3, #1
 8010d78:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d0ef      	beq.n	8010d60 <__gethex+0x350>
 8010d80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010d84:	f104 0214 	add.w	r2, r4, #20
 8010d88:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010d8c:	9301      	str	r3, [sp, #4]
 8010d8e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8010d92:	2300      	movs	r3, #0
 8010d94:	4694      	mov	ip, r2
 8010d96:	f852 1b04 	ldr.w	r1, [r2], #4
 8010d9a:	f1b1 3fff 	cmp.w	r1, #4294967295
 8010d9e:	d01e      	beq.n	8010dde <__gethex+0x3ce>
 8010da0:	3101      	adds	r1, #1
 8010da2:	f8cc 1000 	str.w	r1, [ip]
 8010da6:	f1b8 0f02 	cmp.w	r8, #2
 8010daa:	f104 0214 	add.w	r2, r4, #20
 8010dae:	d13d      	bne.n	8010e2c <__gethex+0x41c>
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	3b01      	subs	r3, #1
 8010db4:	42ab      	cmp	r3, r5
 8010db6:	d10b      	bne.n	8010dd0 <__gethex+0x3c0>
 8010db8:	1169      	asrs	r1, r5, #5
 8010dba:	2301      	movs	r3, #1
 8010dbc:	f005 051f 	and.w	r5, r5, #31
 8010dc0:	fa03 f505 	lsl.w	r5, r3, r5
 8010dc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010dc8:	421d      	tst	r5, r3
 8010dca:	bf18      	it	ne
 8010dcc:	f04f 0801 	movne.w	r8, #1
 8010dd0:	f048 0820 	orr.w	r8, r8, #32
 8010dd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010dd6:	601c      	str	r4, [r3, #0]
 8010dd8:	9b02      	ldr	r3, [sp, #8]
 8010dda:	601e      	str	r6, [r3, #0]
 8010ddc:	e6a2      	b.n	8010b24 <__gethex+0x114>
 8010dde:	4290      	cmp	r0, r2
 8010de0:	f842 3c04 	str.w	r3, [r2, #-4]
 8010de4:	d8d6      	bhi.n	8010d94 <__gethex+0x384>
 8010de6:	68a2      	ldr	r2, [r4, #8]
 8010de8:	4593      	cmp	fp, r2
 8010dea:	db17      	blt.n	8010e1c <__gethex+0x40c>
 8010dec:	6861      	ldr	r1, [r4, #4]
 8010dee:	4648      	mov	r0, r9
 8010df0:	3101      	adds	r1, #1
 8010df2:	f7fd fe0b 	bl	800ea0c <_Balloc>
 8010df6:	4682      	mov	sl, r0
 8010df8:	b918      	cbnz	r0, 8010e02 <__gethex+0x3f2>
 8010dfa:	4b1b      	ldr	r3, [pc, #108]	; (8010e68 <__gethex+0x458>)
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	2184      	movs	r1, #132	; 0x84
 8010e00:	e6b3      	b.n	8010b6a <__gethex+0x15a>
 8010e02:	6922      	ldr	r2, [r4, #16]
 8010e04:	3202      	adds	r2, #2
 8010e06:	f104 010c 	add.w	r1, r4, #12
 8010e0a:	0092      	lsls	r2, r2, #2
 8010e0c:	300c      	adds	r0, #12
 8010e0e:	f7ff fd4b 	bl	80108a8 <memcpy>
 8010e12:	4621      	mov	r1, r4
 8010e14:	4648      	mov	r0, r9
 8010e16:	f7fd fe39 	bl	800ea8c <_Bfree>
 8010e1a:	4654      	mov	r4, sl
 8010e1c:	6922      	ldr	r2, [r4, #16]
 8010e1e:	1c51      	adds	r1, r2, #1
 8010e20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010e24:	6121      	str	r1, [r4, #16]
 8010e26:	2101      	movs	r1, #1
 8010e28:	6151      	str	r1, [r2, #20]
 8010e2a:	e7bc      	b.n	8010da6 <__gethex+0x396>
 8010e2c:	6921      	ldr	r1, [r4, #16]
 8010e2e:	4559      	cmp	r1, fp
 8010e30:	dd0b      	ble.n	8010e4a <__gethex+0x43a>
 8010e32:	2101      	movs	r1, #1
 8010e34:	4620      	mov	r0, r4
 8010e36:	f7ff fd83 	bl	8010940 <rshift>
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	3601      	adds	r6, #1
 8010e3e:	42b3      	cmp	r3, r6
 8010e40:	f6ff aedb 	blt.w	8010bfa <__gethex+0x1ea>
 8010e44:	f04f 0801 	mov.w	r8, #1
 8010e48:	e7c2      	b.n	8010dd0 <__gethex+0x3c0>
 8010e4a:	f015 051f 	ands.w	r5, r5, #31
 8010e4e:	d0f9      	beq.n	8010e44 <__gethex+0x434>
 8010e50:	9b01      	ldr	r3, [sp, #4]
 8010e52:	441a      	add	r2, r3
 8010e54:	f1c5 0520 	rsb	r5, r5, #32
 8010e58:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8010e5c:	f7fd fec8 	bl	800ebf0 <__hi0bits>
 8010e60:	42a8      	cmp	r0, r5
 8010e62:	dbe6      	blt.n	8010e32 <__gethex+0x422>
 8010e64:	e7ee      	b.n	8010e44 <__gethex+0x434>
 8010e66:	bf00      	nop
 8010e68:	08012179 	.word	0x08012179

08010e6c <L_shift>:
 8010e6c:	f1c2 0208 	rsb	r2, r2, #8
 8010e70:	0092      	lsls	r2, r2, #2
 8010e72:	b570      	push	{r4, r5, r6, lr}
 8010e74:	f1c2 0620 	rsb	r6, r2, #32
 8010e78:	6843      	ldr	r3, [r0, #4]
 8010e7a:	6804      	ldr	r4, [r0, #0]
 8010e7c:	fa03 f506 	lsl.w	r5, r3, r6
 8010e80:	432c      	orrs	r4, r5
 8010e82:	40d3      	lsrs	r3, r2
 8010e84:	6004      	str	r4, [r0, #0]
 8010e86:	f840 3f04 	str.w	r3, [r0, #4]!
 8010e8a:	4288      	cmp	r0, r1
 8010e8c:	d3f4      	bcc.n	8010e78 <L_shift+0xc>
 8010e8e:	bd70      	pop	{r4, r5, r6, pc}

08010e90 <__match>:
 8010e90:	b530      	push	{r4, r5, lr}
 8010e92:	6803      	ldr	r3, [r0, #0]
 8010e94:	3301      	adds	r3, #1
 8010e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e9a:	b914      	cbnz	r4, 8010ea2 <__match+0x12>
 8010e9c:	6003      	str	r3, [r0, #0]
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	bd30      	pop	{r4, r5, pc}
 8010ea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ea6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010eaa:	2d19      	cmp	r5, #25
 8010eac:	bf98      	it	ls
 8010eae:	3220      	addls	r2, #32
 8010eb0:	42a2      	cmp	r2, r4
 8010eb2:	d0f0      	beq.n	8010e96 <__match+0x6>
 8010eb4:	2000      	movs	r0, #0
 8010eb6:	e7f3      	b.n	8010ea0 <__match+0x10>

08010eb8 <__hexnan>:
 8010eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ebc:	680b      	ldr	r3, [r1, #0]
 8010ebe:	6801      	ldr	r1, [r0, #0]
 8010ec0:	115e      	asrs	r6, r3, #5
 8010ec2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010ec6:	f013 031f 	ands.w	r3, r3, #31
 8010eca:	b087      	sub	sp, #28
 8010ecc:	bf18      	it	ne
 8010ece:	3604      	addne	r6, #4
 8010ed0:	2500      	movs	r5, #0
 8010ed2:	1f37      	subs	r7, r6, #4
 8010ed4:	4682      	mov	sl, r0
 8010ed6:	4690      	mov	r8, r2
 8010ed8:	9301      	str	r3, [sp, #4]
 8010eda:	f846 5c04 	str.w	r5, [r6, #-4]
 8010ede:	46b9      	mov	r9, r7
 8010ee0:	463c      	mov	r4, r7
 8010ee2:	9502      	str	r5, [sp, #8]
 8010ee4:	46ab      	mov	fp, r5
 8010ee6:	784a      	ldrb	r2, [r1, #1]
 8010ee8:	1c4b      	adds	r3, r1, #1
 8010eea:	9303      	str	r3, [sp, #12]
 8010eec:	b342      	cbz	r2, 8010f40 <__hexnan+0x88>
 8010eee:	4610      	mov	r0, r2
 8010ef0:	9105      	str	r1, [sp, #20]
 8010ef2:	9204      	str	r2, [sp, #16]
 8010ef4:	f7ff fd76 	bl	80109e4 <__hexdig_fun>
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	d14f      	bne.n	8010f9c <__hexnan+0xe4>
 8010efc:	9a04      	ldr	r2, [sp, #16]
 8010efe:	9905      	ldr	r1, [sp, #20]
 8010f00:	2a20      	cmp	r2, #32
 8010f02:	d818      	bhi.n	8010f36 <__hexnan+0x7e>
 8010f04:	9b02      	ldr	r3, [sp, #8]
 8010f06:	459b      	cmp	fp, r3
 8010f08:	dd13      	ble.n	8010f32 <__hexnan+0x7a>
 8010f0a:	454c      	cmp	r4, r9
 8010f0c:	d206      	bcs.n	8010f1c <__hexnan+0x64>
 8010f0e:	2d07      	cmp	r5, #7
 8010f10:	dc04      	bgt.n	8010f1c <__hexnan+0x64>
 8010f12:	462a      	mov	r2, r5
 8010f14:	4649      	mov	r1, r9
 8010f16:	4620      	mov	r0, r4
 8010f18:	f7ff ffa8 	bl	8010e6c <L_shift>
 8010f1c:	4544      	cmp	r4, r8
 8010f1e:	d950      	bls.n	8010fc2 <__hexnan+0x10a>
 8010f20:	2300      	movs	r3, #0
 8010f22:	f1a4 0904 	sub.w	r9, r4, #4
 8010f26:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f2a:	f8cd b008 	str.w	fp, [sp, #8]
 8010f2e:	464c      	mov	r4, r9
 8010f30:	461d      	mov	r5, r3
 8010f32:	9903      	ldr	r1, [sp, #12]
 8010f34:	e7d7      	b.n	8010ee6 <__hexnan+0x2e>
 8010f36:	2a29      	cmp	r2, #41	; 0x29
 8010f38:	d155      	bne.n	8010fe6 <__hexnan+0x12e>
 8010f3a:	3102      	adds	r1, #2
 8010f3c:	f8ca 1000 	str.w	r1, [sl]
 8010f40:	f1bb 0f00 	cmp.w	fp, #0
 8010f44:	d04f      	beq.n	8010fe6 <__hexnan+0x12e>
 8010f46:	454c      	cmp	r4, r9
 8010f48:	d206      	bcs.n	8010f58 <__hexnan+0xa0>
 8010f4a:	2d07      	cmp	r5, #7
 8010f4c:	dc04      	bgt.n	8010f58 <__hexnan+0xa0>
 8010f4e:	462a      	mov	r2, r5
 8010f50:	4649      	mov	r1, r9
 8010f52:	4620      	mov	r0, r4
 8010f54:	f7ff ff8a 	bl	8010e6c <L_shift>
 8010f58:	4544      	cmp	r4, r8
 8010f5a:	d934      	bls.n	8010fc6 <__hexnan+0x10e>
 8010f5c:	f1a8 0204 	sub.w	r2, r8, #4
 8010f60:	4623      	mov	r3, r4
 8010f62:	f853 1b04 	ldr.w	r1, [r3], #4
 8010f66:	f842 1f04 	str.w	r1, [r2, #4]!
 8010f6a:	429f      	cmp	r7, r3
 8010f6c:	d2f9      	bcs.n	8010f62 <__hexnan+0xaa>
 8010f6e:	1b3b      	subs	r3, r7, r4
 8010f70:	f023 0303 	bic.w	r3, r3, #3
 8010f74:	3304      	adds	r3, #4
 8010f76:	3e03      	subs	r6, #3
 8010f78:	3401      	adds	r4, #1
 8010f7a:	42a6      	cmp	r6, r4
 8010f7c:	bf38      	it	cc
 8010f7e:	2304      	movcc	r3, #4
 8010f80:	4443      	add	r3, r8
 8010f82:	2200      	movs	r2, #0
 8010f84:	f843 2b04 	str.w	r2, [r3], #4
 8010f88:	429f      	cmp	r7, r3
 8010f8a:	d2fb      	bcs.n	8010f84 <__hexnan+0xcc>
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	b91b      	cbnz	r3, 8010f98 <__hexnan+0xe0>
 8010f90:	4547      	cmp	r7, r8
 8010f92:	d126      	bne.n	8010fe2 <__hexnan+0x12a>
 8010f94:	2301      	movs	r3, #1
 8010f96:	603b      	str	r3, [r7, #0]
 8010f98:	2005      	movs	r0, #5
 8010f9a:	e025      	b.n	8010fe8 <__hexnan+0x130>
 8010f9c:	3501      	adds	r5, #1
 8010f9e:	2d08      	cmp	r5, #8
 8010fa0:	f10b 0b01 	add.w	fp, fp, #1
 8010fa4:	dd06      	ble.n	8010fb4 <__hexnan+0xfc>
 8010fa6:	4544      	cmp	r4, r8
 8010fa8:	d9c3      	bls.n	8010f32 <__hexnan+0x7a>
 8010faa:	2300      	movs	r3, #0
 8010fac:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fb0:	2501      	movs	r5, #1
 8010fb2:	3c04      	subs	r4, #4
 8010fb4:	6822      	ldr	r2, [r4, #0]
 8010fb6:	f000 000f 	and.w	r0, r0, #15
 8010fba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010fbe:	6020      	str	r0, [r4, #0]
 8010fc0:	e7b7      	b.n	8010f32 <__hexnan+0x7a>
 8010fc2:	2508      	movs	r5, #8
 8010fc4:	e7b5      	b.n	8010f32 <__hexnan+0x7a>
 8010fc6:	9b01      	ldr	r3, [sp, #4]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d0df      	beq.n	8010f8c <__hexnan+0xd4>
 8010fcc:	f1c3 0320 	rsb	r3, r3, #32
 8010fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8010fd4:	40da      	lsrs	r2, r3
 8010fd6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010fda:	4013      	ands	r3, r2
 8010fdc:	f846 3c04 	str.w	r3, [r6, #-4]
 8010fe0:	e7d4      	b.n	8010f8c <__hexnan+0xd4>
 8010fe2:	3f04      	subs	r7, #4
 8010fe4:	e7d2      	b.n	8010f8c <__hexnan+0xd4>
 8010fe6:	2004      	movs	r0, #4
 8010fe8:	b007      	add	sp, #28
 8010fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010fee <__ascii_mbtowc>:
 8010fee:	b082      	sub	sp, #8
 8010ff0:	b901      	cbnz	r1, 8010ff4 <__ascii_mbtowc+0x6>
 8010ff2:	a901      	add	r1, sp, #4
 8010ff4:	b142      	cbz	r2, 8011008 <__ascii_mbtowc+0x1a>
 8010ff6:	b14b      	cbz	r3, 801100c <__ascii_mbtowc+0x1e>
 8010ff8:	7813      	ldrb	r3, [r2, #0]
 8010ffa:	600b      	str	r3, [r1, #0]
 8010ffc:	7812      	ldrb	r2, [r2, #0]
 8010ffe:	1e10      	subs	r0, r2, #0
 8011000:	bf18      	it	ne
 8011002:	2001      	movne	r0, #1
 8011004:	b002      	add	sp, #8
 8011006:	4770      	bx	lr
 8011008:	4610      	mov	r0, r2
 801100a:	e7fb      	b.n	8011004 <__ascii_mbtowc+0x16>
 801100c:	f06f 0001 	mvn.w	r0, #1
 8011010:	e7f8      	b.n	8011004 <__ascii_mbtowc+0x16>

08011012 <_realloc_r>:
 8011012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011016:	4680      	mov	r8, r0
 8011018:	4614      	mov	r4, r2
 801101a:	460e      	mov	r6, r1
 801101c:	b921      	cbnz	r1, 8011028 <_realloc_r+0x16>
 801101e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011022:	4611      	mov	r1, r2
 8011024:	f7fd bc66 	b.w	800e8f4 <_malloc_r>
 8011028:	b92a      	cbnz	r2, 8011036 <_realloc_r+0x24>
 801102a:	f7fd fbef 	bl	800e80c <_free_r>
 801102e:	4625      	mov	r5, r4
 8011030:	4628      	mov	r0, r5
 8011032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011036:	f000 f842 	bl	80110be <_malloc_usable_size_r>
 801103a:	4284      	cmp	r4, r0
 801103c:	4607      	mov	r7, r0
 801103e:	d802      	bhi.n	8011046 <_realloc_r+0x34>
 8011040:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011044:	d812      	bhi.n	801106c <_realloc_r+0x5a>
 8011046:	4621      	mov	r1, r4
 8011048:	4640      	mov	r0, r8
 801104a:	f7fd fc53 	bl	800e8f4 <_malloc_r>
 801104e:	4605      	mov	r5, r0
 8011050:	2800      	cmp	r0, #0
 8011052:	d0ed      	beq.n	8011030 <_realloc_r+0x1e>
 8011054:	42bc      	cmp	r4, r7
 8011056:	4622      	mov	r2, r4
 8011058:	4631      	mov	r1, r6
 801105a:	bf28      	it	cs
 801105c:	463a      	movcs	r2, r7
 801105e:	f7ff fc23 	bl	80108a8 <memcpy>
 8011062:	4631      	mov	r1, r6
 8011064:	4640      	mov	r0, r8
 8011066:	f7fd fbd1 	bl	800e80c <_free_r>
 801106a:	e7e1      	b.n	8011030 <_realloc_r+0x1e>
 801106c:	4635      	mov	r5, r6
 801106e:	e7df      	b.n	8011030 <_realloc_r+0x1e>

08011070 <__ascii_wctomb>:
 8011070:	b149      	cbz	r1, 8011086 <__ascii_wctomb+0x16>
 8011072:	2aff      	cmp	r2, #255	; 0xff
 8011074:	bf85      	ittet	hi
 8011076:	238a      	movhi	r3, #138	; 0x8a
 8011078:	6003      	strhi	r3, [r0, #0]
 801107a:	700a      	strbls	r2, [r1, #0]
 801107c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011080:	bf98      	it	ls
 8011082:	2001      	movls	r0, #1
 8011084:	4770      	bx	lr
 8011086:	4608      	mov	r0, r1
 8011088:	4770      	bx	lr
	...

0801108c <fiprintf>:
 801108c:	b40e      	push	{r1, r2, r3}
 801108e:	b503      	push	{r0, r1, lr}
 8011090:	4601      	mov	r1, r0
 8011092:	ab03      	add	r3, sp, #12
 8011094:	4805      	ldr	r0, [pc, #20]	; (80110ac <fiprintf+0x20>)
 8011096:	f853 2b04 	ldr.w	r2, [r3], #4
 801109a:	6800      	ldr	r0, [r0, #0]
 801109c:	9301      	str	r3, [sp, #4]
 801109e:	f7ff f97b 	bl	8010398 <_vfiprintf_r>
 80110a2:	b002      	add	sp, #8
 80110a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80110a8:	b003      	add	sp, #12
 80110aa:	4770      	bx	lr
 80110ac:	2000007c 	.word	0x2000007c

080110b0 <abort>:
 80110b0:	b508      	push	{r3, lr}
 80110b2:	2006      	movs	r0, #6
 80110b4:	f000 f834 	bl	8011120 <raise>
 80110b8:	2001      	movs	r0, #1
 80110ba:	f7f2 fe90 	bl	8003dde <_exit>

080110be <_malloc_usable_size_r>:
 80110be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110c2:	1f18      	subs	r0, r3, #4
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	bfbc      	itt	lt
 80110c8:	580b      	ldrlt	r3, [r1, r0]
 80110ca:	18c0      	addlt	r0, r0, r3
 80110cc:	4770      	bx	lr

080110ce <_raise_r>:
 80110ce:	291f      	cmp	r1, #31
 80110d0:	b538      	push	{r3, r4, r5, lr}
 80110d2:	4604      	mov	r4, r0
 80110d4:	460d      	mov	r5, r1
 80110d6:	d904      	bls.n	80110e2 <_raise_r+0x14>
 80110d8:	2316      	movs	r3, #22
 80110da:	6003      	str	r3, [r0, #0]
 80110dc:	f04f 30ff 	mov.w	r0, #4294967295
 80110e0:	bd38      	pop	{r3, r4, r5, pc}
 80110e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80110e4:	b112      	cbz	r2, 80110ec <_raise_r+0x1e>
 80110e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110ea:	b94b      	cbnz	r3, 8011100 <_raise_r+0x32>
 80110ec:	4620      	mov	r0, r4
 80110ee:	f000 f831 	bl	8011154 <_getpid_r>
 80110f2:	462a      	mov	r2, r5
 80110f4:	4601      	mov	r1, r0
 80110f6:	4620      	mov	r0, r4
 80110f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110fc:	f000 b818 	b.w	8011130 <_kill_r>
 8011100:	2b01      	cmp	r3, #1
 8011102:	d00a      	beq.n	801111a <_raise_r+0x4c>
 8011104:	1c59      	adds	r1, r3, #1
 8011106:	d103      	bne.n	8011110 <_raise_r+0x42>
 8011108:	2316      	movs	r3, #22
 801110a:	6003      	str	r3, [r0, #0]
 801110c:	2001      	movs	r0, #1
 801110e:	e7e7      	b.n	80110e0 <_raise_r+0x12>
 8011110:	2400      	movs	r4, #0
 8011112:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011116:	4628      	mov	r0, r5
 8011118:	4798      	blx	r3
 801111a:	2000      	movs	r0, #0
 801111c:	e7e0      	b.n	80110e0 <_raise_r+0x12>
	...

08011120 <raise>:
 8011120:	4b02      	ldr	r3, [pc, #8]	; (801112c <raise+0xc>)
 8011122:	4601      	mov	r1, r0
 8011124:	6818      	ldr	r0, [r3, #0]
 8011126:	f7ff bfd2 	b.w	80110ce <_raise_r>
 801112a:	bf00      	nop
 801112c:	2000007c 	.word	0x2000007c

08011130 <_kill_r>:
 8011130:	b538      	push	{r3, r4, r5, lr}
 8011132:	4d07      	ldr	r5, [pc, #28]	; (8011150 <_kill_r+0x20>)
 8011134:	2300      	movs	r3, #0
 8011136:	4604      	mov	r4, r0
 8011138:	4608      	mov	r0, r1
 801113a:	4611      	mov	r1, r2
 801113c:	602b      	str	r3, [r5, #0]
 801113e:	f7f2 fe3e 	bl	8003dbe <_kill>
 8011142:	1c43      	adds	r3, r0, #1
 8011144:	d102      	bne.n	801114c <_kill_r+0x1c>
 8011146:	682b      	ldr	r3, [r5, #0]
 8011148:	b103      	cbz	r3, 801114c <_kill_r+0x1c>
 801114a:	6023      	str	r3, [r4, #0]
 801114c:	bd38      	pop	{r3, r4, r5, pc}
 801114e:	bf00      	nop
 8011150:	2000296c 	.word	0x2000296c

08011154 <_getpid_r>:
 8011154:	f7f2 be2b 	b.w	8003dae <_getpid>

08011158 <powf>:
 8011158:	b508      	push	{r3, lr}
 801115a:	ed2d 8b04 	vpush	{d8-d9}
 801115e:	eeb0 8a60 	vmov.f32	s16, s1
 8011162:	eeb0 9a40 	vmov.f32	s18, s0
 8011166:	f000 f85b 	bl	8011220 <__ieee754_powf>
 801116a:	eeb4 8a48 	vcmp.f32	s16, s16
 801116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011172:	eef0 8a40 	vmov.f32	s17, s0
 8011176:	d63e      	bvs.n	80111f6 <powf+0x9e>
 8011178:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011180:	d112      	bne.n	80111a8 <powf+0x50>
 8011182:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118a:	d039      	beq.n	8011200 <powf+0xa8>
 801118c:	eeb0 0a48 	vmov.f32	s0, s16
 8011190:	f000 f839 	bl	8011206 <finitef>
 8011194:	b378      	cbz	r0, 80111f6 <powf+0x9e>
 8011196:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801119e:	d52a      	bpl.n	80111f6 <powf+0x9e>
 80111a0:	f7fc fc86 	bl	800dab0 <__errno>
 80111a4:	2322      	movs	r3, #34	; 0x22
 80111a6:	e014      	b.n	80111d2 <powf+0x7a>
 80111a8:	f000 f82d 	bl	8011206 <finitef>
 80111ac:	b998      	cbnz	r0, 80111d6 <powf+0x7e>
 80111ae:	eeb0 0a49 	vmov.f32	s0, s18
 80111b2:	f000 f828 	bl	8011206 <finitef>
 80111b6:	b170      	cbz	r0, 80111d6 <powf+0x7e>
 80111b8:	eeb0 0a48 	vmov.f32	s0, s16
 80111bc:	f000 f823 	bl	8011206 <finitef>
 80111c0:	b148      	cbz	r0, 80111d6 <powf+0x7e>
 80111c2:	eef4 8a68 	vcmp.f32	s17, s17
 80111c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ca:	d7e9      	bvc.n	80111a0 <powf+0x48>
 80111cc:	f7fc fc70 	bl	800dab0 <__errno>
 80111d0:	2321      	movs	r3, #33	; 0x21
 80111d2:	6003      	str	r3, [r0, #0]
 80111d4:	e00f      	b.n	80111f6 <powf+0x9e>
 80111d6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80111da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111de:	d10a      	bne.n	80111f6 <powf+0x9e>
 80111e0:	eeb0 0a49 	vmov.f32	s0, s18
 80111e4:	f000 f80f 	bl	8011206 <finitef>
 80111e8:	b128      	cbz	r0, 80111f6 <powf+0x9e>
 80111ea:	eeb0 0a48 	vmov.f32	s0, s16
 80111ee:	f000 f80a 	bl	8011206 <finitef>
 80111f2:	2800      	cmp	r0, #0
 80111f4:	d1d4      	bne.n	80111a0 <powf+0x48>
 80111f6:	eeb0 0a68 	vmov.f32	s0, s17
 80111fa:	ecbd 8b04 	vpop	{d8-d9}
 80111fe:	bd08      	pop	{r3, pc}
 8011200:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011204:	e7f7      	b.n	80111f6 <powf+0x9e>

08011206 <finitef>:
 8011206:	b082      	sub	sp, #8
 8011208:	ed8d 0a01 	vstr	s0, [sp, #4]
 801120c:	9801      	ldr	r0, [sp, #4]
 801120e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011212:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011216:	bfac      	ite	ge
 8011218:	2000      	movge	r0, #0
 801121a:	2001      	movlt	r0, #1
 801121c:	b002      	add	sp, #8
 801121e:	4770      	bx	lr

08011220 <__ieee754_powf>:
 8011220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011224:	ee10 4a90 	vmov	r4, s1
 8011228:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 801122c:	ed2d 8b02 	vpush	{d8}
 8011230:	ee10 7a10 	vmov	r7, s0
 8011234:	eeb0 8a40 	vmov.f32	s16, s0
 8011238:	eef0 8a60 	vmov.f32	s17, s1
 801123c:	d10c      	bne.n	8011258 <__ieee754_powf+0x38>
 801123e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 8011242:	007f      	lsls	r7, r7, #1
 8011244:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8011248:	f240 8292 	bls.w	8011770 <__ieee754_powf+0x550>
 801124c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8011250:	ecbd 8b02 	vpop	{d8}
 8011254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011258:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 801125c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8011260:	dcf4      	bgt.n	801124c <__ieee754_powf+0x2c>
 8011262:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8011266:	dd08      	ble.n	801127a <__ieee754_powf+0x5a>
 8011268:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801126c:	d1ee      	bne.n	801124c <__ieee754_powf+0x2c>
 801126e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8011272:	0064      	lsls	r4, r4, #1
 8011274:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8011278:	e7e6      	b.n	8011248 <__ieee754_powf+0x28>
 801127a:	2f00      	cmp	r7, #0
 801127c:	da20      	bge.n	80112c0 <__ieee754_powf+0xa0>
 801127e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8011282:	da2d      	bge.n	80112e0 <__ieee754_powf+0xc0>
 8011284:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8011288:	f2c0 827b 	blt.w	8011782 <__ieee754_powf+0x562>
 801128c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8011290:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8011294:	fa48 f603 	asr.w	r6, r8, r3
 8011298:	fa06 f303 	lsl.w	r3, r6, r3
 801129c:	4543      	cmp	r3, r8
 801129e:	f040 8270 	bne.w	8011782 <__ieee754_powf+0x562>
 80112a2:	f006 0601 	and.w	r6, r6, #1
 80112a6:	f1c6 0602 	rsb	r6, r6, #2
 80112aa:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80112ae:	d11f      	bne.n	80112f0 <__ieee754_powf+0xd0>
 80112b0:	2c00      	cmp	r4, #0
 80112b2:	f280 8263 	bge.w	801177c <__ieee754_powf+0x55c>
 80112b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80112ba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80112be:	e7c7      	b.n	8011250 <__ieee754_powf+0x30>
 80112c0:	2600      	movs	r6, #0
 80112c2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80112c6:	d1f0      	bne.n	80112aa <__ieee754_powf+0x8a>
 80112c8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 80112cc:	f000 8250 	beq.w	8011770 <__ieee754_powf+0x550>
 80112d0:	dd08      	ble.n	80112e4 <__ieee754_powf+0xc4>
 80112d2:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 80115d8 <__ieee754_powf+0x3b8>
 80112d6:	2c00      	cmp	r4, #0
 80112d8:	bfa8      	it	ge
 80112da:	eeb0 0a68 	vmovge.f32	s0, s17
 80112de:	e7b7      	b.n	8011250 <__ieee754_powf+0x30>
 80112e0:	2602      	movs	r6, #2
 80112e2:	e7ee      	b.n	80112c2 <__ieee754_powf+0xa2>
 80112e4:	2c00      	cmp	r4, #0
 80112e6:	f280 8246 	bge.w	8011776 <__ieee754_powf+0x556>
 80112ea:	eeb1 0a68 	vneg.f32	s0, s17
 80112ee:	e7af      	b.n	8011250 <__ieee754_powf+0x30>
 80112f0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80112f4:	d102      	bne.n	80112fc <__ieee754_powf+0xdc>
 80112f6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80112fa:	e7a9      	b.n	8011250 <__ieee754_powf+0x30>
 80112fc:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8011300:	eeb0 0a48 	vmov.f32	s0, s16
 8011304:	d107      	bne.n	8011316 <__ieee754_powf+0xf6>
 8011306:	2f00      	cmp	r7, #0
 8011308:	db05      	blt.n	8011316 <__ieee754_powf+0xf6>
 801130a:	ecbd 8b02 	vpop	{d8}
 801130e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011312:	f000 badf 	b.w	80118d4 <__ieee754_sqrtf>
 8011316:	f000 fa4d 	bl	80117b4 <fabsf>
 801131a:	b125      	cbz	r5, 8011326 <__ieee754_powf+0x106>
 801131c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8011320:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8011324:	d115      	bne.n	8011352 <__ieee754_powf+0x132>
 8011326:	2c00      	cmp	r4, #0
 8011328:	bfbc      	itt	lt
 801132a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801132e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8011332:	2f00      	cmp	r7, #0
 8011334:	da8c      	bge.n	8011250 <__ieee754_powf+0x30>
 8011336:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 801133a:	4335      	orrs	r5, r6
 801133c:	d104      	bne.n	8011348 <__ieee754_powf+0x128>
 801133e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011342:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011346:	e783      	b.n	8011250 <__ieee754_powf+0x30>
 8011348:	2e01      	cmp	r6, #1
 801134a:	d181      	bne.n	8011250 <__ieee754_powf+0x30>
 801134c:	eeb1 0a40 	vneg.f32	s0, s0
 8011350:	e77e      	b.n	8011250 <__ieee754_powf+0x30>
 8011352:	0ff8      	lsrs	r0, r7, #31
 8011354:	3801      	subs	r0, #1
 8011356:	ea56 0300 	orrs.w	r3, r6, r0
 801135a:	d104      	bne.n	8011366 <__ieee754_powf+0x146>
 801135c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8011360:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011364:	e774      	b.n	8011250 <__ieee754_powf+0x30>
 8011366:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 801136a:	dd73      	ble.n	8011454 <__ieee754_powf+0x234>
 801136c:	4b9b      	ldr	r3, [pc, #620]	; (80115dc <__ieee754_powf+0x3bc>)
 801136e:	429d      	cmp	r5, r3
 8011370:	dc08      	bgt.n	8011384 <__ieee754_powf+0x164>
 8011372:	2c00      	cmp	r4, #0
 8011374:	da0b      	bge.n	801138e <__ieee754_powf+0x16e>
 8011376:	2000      	movs	r0, #0
 8011378:	ecbd 8b02 	vpop	{d8}
 801137c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011380:	f000 baa2 	b.w	80118c8 <__math_oflowf>
 8011384:	4b96      	ldr	r3, [pc, #600]	; (80115e0 <__ieee754_powf+0x3c0>)
 8011386:	429d      	cmp	r5, r3
 8011388:	dd08      	ble.n	801139c <__ieee754_powf+0x17c>
 801138a:	2c00      	cmp	r4, #0
 801138c:	dcf3      	bgt.n	8011376 <__ieee754_powf+0x156>
 801138e:	2000      	movs	r0, #0
 8011390:	ecbd 8b02 	vpop	{d8}
 8011394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011398:	f000 ba90 	b.w	80118bc <__math_uflowf>
 801139c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80113a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80113a4:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80115e4 <__ieee754_powf+0x3c4>
 80113a8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80113ac:	eee0 6a67 	vfms.f32	s13, s0, s15
 80113b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80113b4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80113b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80113bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113c0:	eddf 7a89 	vldr	s15, [pc, #548]	; 80115e8 <__ieee754_powf+0x3c8>
 80113c4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80113c8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80115ec <__ieee754_powf+0x3cc>
 80113cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80113d0:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80115f0 <__ieee754_powf+0x3d0>
 80113d4:	eef0 6a67 	vmov.f32	s13, s15
 80113d8:	eee0 6a07 	vfma.f32	s13, s0, s14
 80113dc:	ee16 3a90 	vmov	r3, s13
 80113e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80113e4:	f023 030f 	bic.w	r3, r3, #15
 80113e8:	ee06 3a90 	vmov	s13, r3
 80113ec:	eee0 6a47 	vfms.f32	s13, s0, s14
 80113f0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80113f4:	3e01      	subs	r6, #1
 80113f6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80113fa:	4306      	orrs	r6, r0
 80113fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011400:	f024 040f 	bic.w	r4, r4, #15
 8011404:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011408:	bf08      	it	eq
 801140a:	eeb0 8a47 	vmoveq.f32	s16, s14
 801140e:	ee07 4a10 	vmov	s14, r4
 8011412:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8011416:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801141a:	ee07 3a90 	vmov	s15, r3
 801141e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8011422:	ee07 4a10 	vmov	s14, r4
 8011426:	ee67 7a87 	vmul.f32	s15, s15, s14
 801142a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801142e:	ee17 1a10 	vmov	r1, s14
 8011432:	2900      	cmp	r1, #0
 8011434:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011438:	f340 817c 	ble.w	8011734 <__ieee754_powf+0x514>
 801143c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8011440:	f340 80f8 	ble.w	8011634 <__ieee754_powf+0x414>
 8011444:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801144c:	bf4c      	ite	mi
 801144e:	2001      	movmi	r0, #1
 8011450:	2000      	movpl	r0, #0
 8011452:	e791      	b.n	8011378 <__ieee754_powf+0x158>
 8011454:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8011458:	bf01      	itttt	eq
 801145a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80115f4 <__ieee754_powf+0x3d4>
 801145e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8011462:	f06f 0317 	mvneq.w	r3, #23
 8011466:	ee17 5a90 	vmoveq	r5, s15
 801146a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 801146e:	bf18      	it	ne
 8011470:	2300      	movne	r3, #0
 8011472:	3a7f      	subs	r2, #127	; 0x7f
 8011474:	441a      	add	r2, r3
 8011476:	4b60      	ldr	r3, [pc, #384]	; (80115f8 <__ieee754_powf+0x3d8>)
 8011478:	f3c5 0516 	ubfx	r5, r5, #0, #23
 801147c:	429d      	cmp	r5, r3
 801147e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8011482:	dd06      	ble.n	8011492 <__ieee754_powf+0x272>
 8011484:	4b5d      	ldr	r3, [pc, #372]	; (80115fc <__ieee754_powf+0x3dc>)
 8011486:	429d      	cmp	r5, r3
 8011488:	f340 80a4 	ble.w	80115d4 <__ieee754_powf+0x3b4>
 801148c:	3201      	adds	r2, #1
 801148e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8011492:	2500      	movs	r5, #0
 8011494:	4b5a      	ldr	r3, [pc, #360]	; (8011600 <__ieee754_powf+0x3e0>)
 8011496:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801149a:	ee07 1a10 	vmov	s14, r1
 801149e:	edd3 5a00 	vldr	s11, [r3]
 80114a2:	4b58      	ldr	r3, [pc, #352]	; (8011604 <__ieee754_powf+0x3e4>)
 80114a4:	ee75 7a87 	vadd.f32	s15, s11, s14
 80114a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114ac:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80114b0:	1049      	asrs	r1, r1, #1
 80114b2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80114b6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80114ba:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80114be:	ee37 6a65 	vsub.f32	s12, s14, s11
 80114c2:	ee07 1a90 	vmov	s15, r1
 80114c6:	ee26 5a24 	vmul.f32	s10, s12, s9
 80114ca:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80114ce:	ee15 7a10 	vmov	r7, s10
 80114d2:	401f      	ands	r7, r3
 80114d4:	ee06 7a90 	vmov	s13, r7
 80114d8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80114dc:	ee37 7a65 	vsub.f32	s14, s14, s11
 80114e0:	ee65 7a05 	vmul.f32	s15, s10, s10
 80114e4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80114e8:	eddf 5a47 	vldr	s11, [pc, #284]	; 8011608 <__ieee754_powf+0x3e8>
 80114ec:	ed9f 7a47 	vldr	s14, [pc, #284]	; 801160c <__ieee754_powf+0x3ec>
 80114f0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80114f4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8011610 <__ieee754_powf+0x3f0>
 80114f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80114fc:	eddf 5a39 	vldr	s11, [pc, #228]	; 80115e4 <__ieee754_powf+0x3c4>
 8011500:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011504:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8011614 <__ieee754_powf+0x3f4>
 8011508:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801150c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8011618 <__ieee754_powf+0x3f8>
 8011510:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011514:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011518:	ee35 7a26 	vadd.f32	s14, s10, s13
 801151c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8011520:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011524:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8011528:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801152c:	eef0 5a67 	vmov.f32	s11, s15
 8011530:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8011534:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011538:	ee15 1a90 	vmov	r1, s11
 801153c:	4019      	ands	r1, r3
 801153e:	ee05 1a90 	vmov	s11, r1
 8011542:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011546:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801154a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801154e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011552:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011556:	eeb0 6a67 	vmov.f32	s12, s15
 801155a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801155e:	ee16 1a10 	vmov	r1, s12
 8011562:	4019      	ands	r1, r3
 8011564:	ee07 1a10 	vmov	s14, r1
 8011568:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801156c:	ee06 1a10 	vmov	s12, r1
 8011570:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011574:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801161c <__ieee754_powf+0x3fc>
 8011578:	4929      	ldr	r1, [pc, #164]	; (8011620 <__ieee754_powf+0x400>)
 801157a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8011624 <__ieee754_powf+0x404>
 801157e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011582:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8011628 <__ieee754_powf+0x408>
 8011586:	eee6 7a07 	vfma.f32	s15, s12, s14
 801158a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 801158e:	ed91 7a00 	vldr	s14, [r1]
 8011592:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011596:	ee07 2a10 	vmov	s14, r2
 801159a:	eef0 6a67 	vmov.f32	s13, s15
 801159e:	4a23      	ldr	r2, [pc, #140]	; (801162c <__ieee754_powf+0x40c>)
 80115a0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80115a4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80115a8:	ed92 5a00 	vldr	s10, [r2]
 80115ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80115b0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80115b4:	ee76 6a87 	vadd.f32	s13, s13, s14
 80115b8:	ee16 2a90 	vmov	r2, s13
 80115bc:	4013      	ands	r3, r2
 80115be:	ee06 3a90 	vmov	s13, r3
 80115c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80115c6:	ee37 7a45 	vsub.f32	s14, s14, s10
 80115ca:	eea6 7a65 	vfms.f32	s14, s12, s11
 80115ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115d2:	e70f      	b.n	80113f4 <__ieee754_powf+0x1d4>
 80115d4:	2501      	movs	r5, #1
 80115d6:	e75d      	b.n	8011494 <__ieee754_powf+0x274>
 80115d8:	00000000 	.word	0x00000000
 80115dc:	3f7ffff3 	.word	0x3f7ffff3
 80115e0:	3f800007 	.word	0x3f800007
 80115e4:	3eaaaaab 	.word	0x3eaaaaab
 80115e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80115ec:	36eca570 	.word	0x36eca570
 80115f0:	3fb8aa00 	.word	0x3fb8aa00
 80115f4:	4b800000 	.word	0x4b800000
 80115f8:	001cc471 	.word	0x001cc471
 80115fc:	005db3d6 	.word	0x005db3d6
 8011600:	080124f0 	.word	0x080124f0
 8011604:	fffff000 	.word	0xfffff000
 8011608:	3e6c3255 	.word	0x3e6c3255
 801160c:	3e53f142 	.word	0x3e53f142
 8011610:	3e8ba305 	.word	0x3e8ba305
 8011614:	3edb6db7 	.word	0x3edb6db7
 8011618:	3f19999a 	.word	0x3f19999a
 801161c:	3f76384f 	.word	0x3f76384f
 8011620:	08012500 	.word	0x08012500
 8011624:	3f763800 	.word	0x3f763800
 8011628:	369dc3a0 	.word	0x369dc3a0
 801162c:	080124f8 	.word	0x080124f8
 8011630:	3338aa3c 	.word	0x3338aa3c
 8011634:	f040 8093 	bne.w	801175e <__ieee754_powf+0x53e>
 8011638:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8011630 <__ieee754_powf+0x410>
 801163c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011640:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8011644:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801164c:	f73f aefa 	bgt.w	8011444 <__ieee754_powf+0x224>
 8011650:	15db      	asrs	r3, r3, #23
 8011652:	3b7e      	subs	r3, #126	; 0x7e
 8011654:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8011658:	4118      	asrs	r0, r3
 801165a:	4408      	add	r0, r1
 801165c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011660:	4a49      	ldr	r2, [pc, #292]	; (8011788 <__ieee754_powf+0x568>)
 8011662:	3b7f      	subs	r3, #127	; 0x7f
 8011664:	411a      	asrs	r2, r3
 8011666:	4002      	ands	r2, r0
 8011668:	ee07 2a10 	vmov	s14, r2
 801166c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8011670:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011674:	f1c3 0317 	rsb	r3, r3, #23
 8011678:	4118      	asrs	r0, r3
 801167a:	2900      	cmp	r1, #0
 801167c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011680:	bfb8      	it	lt
 8011682:	4240      	neglt	r0, r0
 8011684:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8011688:	eddf 6a40 	vldr	s13, [pc, #256]	; 801178c <__ieee754_powf+0x56c>
 801168c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8011790 <__ieee754_powf+0x570>
 8011690:	ee17 3a10 	vmov	r3, s14
 8011694:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8011698:	f023 030f 	bic.w	r3, r3, #15
 801169c:	ee07 3a10 	vmov	s14, r3
 80116a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80116a8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80116ac:	eddf 7a39 	vldr	s15, [pc, #228]	; 8011794 <__ieee754_powf+0x574>
 80116b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80116b4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80116b8:	eef0 6a67 	vmov.f32	s13, s15
 80116bc:	eee7 6a06 	vfma.f32	s13, s14, s12
 80116c0:	eef0 5a66 	vmov.f32	s11, s13
 80116c4:	eee7 5a46 	vfms.f32	s11, s14, s12
 80116c8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80116cc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80116d0:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8011798 <__ieee754_powf+0x578>
 80116d4:	eddf 5a31 	vldr	s11, [pc, #196]	; 801179c <__ieee754_powf+0x57c>
 80116d8:	eea7 6a25 	vfma.f32	s12, s14, s11
 80116dc:	eddf 5a30 	vldr	s11, [pc, #192]	; 80117a0 <__ieee754_powf+0x580>
 80116e0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80116e4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80117a4 <__ieee754_powf+0x584>
 80116e8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80116ec:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80117a8 <__ieee754_powf+0x588>
 80116f0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80116f4:	eeb0 6a66 	vmov.f32	s12, s13
 80116f8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80116fc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011700:	ee66 5a86 	vmul.f32	s11, s13, s12
 8011704:	ee36 6a47 	vsub.f32	s12, s12, s14
 8011708:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801170c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8011710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011714:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011718:	ee30 0a67 	vsub.f32	s0, s0, s15
 801171c:	ee10 3a10 	vmov	r3, s0
 8011720:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8011724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011728:	da1f      	bge.n	801176a <__ieee754_powf+0x54a>
 801172a:	f000 f84b 	bl	80117c4 <scalbnf>
 801172e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011732:	e58d      	b.n	8011250 <__ieee754_powf+0x30>
 8011734:	4a1d      	ldr	r2, [pc, #116]	; (80117ac <__ieee754_powf+0x58c>)
 8011736:	4293      	cmp	r3, r2
 8011738:	dd07      	ble.n	801174a <__ieee754_powf+0x52a>
 801173a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011742:	bf4c      	ite	mi
 8011744:	2001      	movmi	r0, #1
 8011746:	2000      	movpl	r0, #0
 8011748:	e622      	b.n	8011390 <__ieee754_powf+0x170>
 801174a:	d108      	bne.n	801175e <__ieee754_powf+0x53e>
 801174c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011750:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8011754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011758:	f6ff af7a 	blt.w	8011650 <__ieee754_powf+0x430>
 801175c:	e7ed      	b.n	801173a <__ieee754_powf+0x51a>
 801175e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8011762:	f73f af75 	bgt.w	8011650 <__ieee754_powf+0x430>
 8011766:	2000      	movs	r0, #0
 8011768:	e78c      	b.n	8011684 <__ieee754_powf+0x464>
 801176a:	ee00 3a10 	vmov	s0, r3
 801176e:	e7de      	b.n	801172e <__ieee754_powf+0x50e>
 8011770:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011774:	e56c      	b.n	8011250 <__ieee754_powf+0x30>
 8011776:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80117b0 <__ieee754_powf+0x590>
 801177a:	e569      	b.n	8011250 <__ieee754_powf+0x30>
 801177c:	eeb0 0a48 	vmov.f32	s0, s16
 8011780:	e566      	b.n	8011250 <__ieee754_powf+0x30>
 8011782:	2600      	movs	r6, #0
 8011784:	e591      	b.n	80112aa <__ieee754_powf+0x8a>
 8011786:	bf00      	nop
 8011788:	ff800000 	.word	0xff800000
 801178c:	3f317218 	.word	0x3f317218
 8011790:	3f317200 	.word	0x3f317200
 8011794:	35bfbe8c 	.word	0x35bfbe8c
 8011798:	b5ddea0e 	.word	0xb5ddea0e
 801179c:	3331bb4c 	.word	0x3331bb4c
 80117a0:	388ab355 	.word	0x388ab355
 80117a4:	bb360b61 	.word	0xbb360b61
 80117a8:	3e2aaaab 	.word	0x3e2aaaab
 80117ac:	43160000 	.word	0x43160000
 80117b0:	00000000 	.word	0x00000000

080117b4 <fabsf>:
 80117b4:	ee10 3a10 	vmov	r3, s0
 80117b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80117bc:	ee00 3a10 	vmov	s0, r3
 80117c0:	4770      	bx	lr
	...

080117c4 <scalbnf>:
 80117c4:	ee10 3a10 	vmov	r3, s0
 80117c8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80117cc:	d02b      	beq.n	8011826 <scalbnf+0x62>
 80117ce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80117d2:	d302      	bcc.n	80117da <scalbnf+0x16>
 80117d4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80117d8:	4770      	bx	lr
 80117da:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80117de:	d123      	bne.n	8011828 <scalbnf+0x64>
 80117e0:	4b24      	ldr	r3, [pc, #144]	; (8011874 <scalbnf+0xb0>)
 80117e2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8011878 <scalbnf+0xb4>
 80117e6:	4298      	cmp	r0, r3
 80117e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80117ec:	db17      	blt.n	801181e <scalbnf+0x5a>
 80117ee:	ee10 3a10 	vmov	r3, s0
 80117f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80117f6:	3a19      	subs	r2, #25
 80117f8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80117fc:	4288      	cmp	r0, r1
 80117fe:	dd15      	ble.n	801182c <scalbnf+0x68>
 8011800:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801187c <scalbnf+0xb8>
 8011804:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8011880 <scalbnf+0xbc>
 8011808:	ee10 3a10 	vmov	r3, s0
 801180c:	eeb0 7a67 	vmov.f32	s14, s15
 8011810:	2b00      	cmp	r3, #0
 8011812:	bfb8      	it	lt
 8011814:	eef0 7a66 	vmovlt.f32	s15, s13
 8011818:	ee27 0a87 	vmul.f32	s0, s15, s14
 801181c:	4770      	bx	lr
 801181e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8011884 <scalbnf+0xc0>
 8011822:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011826:	4770      	bx	lr
 8011828:	0dd2      	lsrs	r2, r2, #23
 801182a:	e7e5      	b.n	80117f8 <scalbnf+0x34>
 801182c:	4410      	add	r0, r2
 801182e:	28fe      	cmp	r0, #254	; 0xfe
 8011830:	dce6      	bgt.n	8011800 <scalbnf+0x3c>
 8011832:	2800      	cmp	r0, #0
 8011834:	dd06      	ble.n	8011844 <scalbnf+0x80>
 8011836:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801183a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801183e:	ee00 3a10 	vmov	s0, r3
 8011842:	4770      	bx	lr
 8011844:	f110 0f16 	cmn.w	r0, #22
 8011848:	da09      	bge.n	801185e <scalbnf+0x9a>
 801184a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8011884 <scalbnf+0xc0>
 801184e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8011888 <scalbnf+0xc4>
 8011852:	ee10 3a10 	vmov	r3, s0
 8011856:	eeb0 7a67 	vmov.f32	s14, s15
 801185a:	2b00      	cmp	r3, #0
 801185c:	e7d9      	b.n	8011812 <scalbnf+0x4e>
 801185e:	3019      	adds	r0, #25
 8011860:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011864:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011868:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801188c <scalbnf+0xc8>
 801186c:	ee07 3a90 	vmov	s15, r3
 8011870:	e7d7      	b.n	8011822 <scalbnf+0x5e>
 8011872:	bf00      	nop
 8011874:	ffff3cb0 	.word	0xffff3cb0
 8011878:	4c000000 	.word	0x4c000000
 801187c:	7149f2ca 	.word	0x7149f2ca
 8011880:	f149f2ca 	.word	0xf149f2ca
 8011884:	0da24260 	.word	0x0da24260
 8011888:	8da24260 	.word	0x8da24260
 801188c:	33000000 	.word	0x33000000

08011890 <with_errnof>:
 8011890:	b513      	push	{r0, r1, r4, lr}
 8011892:	4604      	mov	r4, r0
 8011894:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011898:	f7fc f90a 	bl	800dab0 <__errno>
 801189c:	ed9d 0a01 	vldr	s0, [sp, #4]
 80118a0:	6004      	str	r4, [r0, #0]
 80118a2:	b002      	add	sp, #8
 80118a4:	bd10      	pop	{r4, pc}

080118a6 <xflowf>:
 80118a6:	b130      	cbz	r0, 80118b6 <xflowf+0x10>
 80118a8:	eef1 7a40 	vneg.f32	s15, s0
 80118ac:	ee27 0a80 	vmul.f32	s0, s15, s0
 80118b0:	2022      	movs	r0, #34	; 0x22
 80118b2:	f7ff bfed 	b.w	8011890 <with_errnof>
 80118b6:	eef0 7a40 	vmov.f32	s15, s0
 80118ba:	e7f7      	b.n	80118ac <xflowf+0x6>

080118bc <__math_uflowf>:
 80118bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80118c4 <__math_uflowf+0x8>
 80118c0:	f7ff bff1 	b.w	80118a6 <xflowf>
 80118c4:	10000000 	.word	0x10000000

080118c8 <__math_oflowf>:
 80118c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80118d0 <__math_oflowf+0x8>
 80118cc:	f7ff bfeb 	b.w	80118a6 <xflowf>
 80118d0:	70000000 	.word	0x70000000

080118d4 <__ieee754_sqrtf>:
 80118d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80118d8:	4770      	bx	lr
	...

080118dc <_init>:
 80118dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118de:	bf00      	nop
 80118e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118e2:	bc08      	pop	{r3}
 80118e4:	469e      	mov	lr, r3
 80118e6:	4770      	bx	lr

080118e8 <_fini>:
 80118e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ea:	bf00      	nop
 80118ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80118ee:	bc08      	pop	{r3}
 80118f0:	469e      	mov	lr, r3
 80118f2:	4770      	bx	lr
